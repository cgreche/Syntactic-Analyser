Dumping Grammar:
Grammar Symbols:
0. $eof - Terminal
1. primary_expression - Nonterminal
2. IDENTIFIER - Terminal
3. CONSTANT - Terminal
4. STRING_LITERAL - Terminal
5. ( - Terminal
6. expression - Nonterminal
7. ) - Terminal
8. postfix_expression - Nonterminal
9. [ - Terminal
10. ] - Terminal
11. argument_expression_list - Nonterminal
12. struct_member_accessor - Nonterminal
13. INC_OP - Terminal
14. DEC_OP - Terminal
15. . - Terminal
16. PTR_OP - Terminal
17. assignment_expression - Nonterminal
18. , - Terminal
19. unary_expression - Nonterminal
20. unary_operator - Nonterminal
21. cast_expression - Nonterminal
22. SIZEOF - Terminal
23. type_name - Nonterminal
24. & - Terminal
25. * - Terminal
26. + - Terminal
27. - - Terminal
28. ~ - Terminal
29. ! - Terminal
30. multiplicative_expression - Nonterminal
31. / - Terminal
32. % - Terminal
33. additive_expression - Nonterminal
34. shift_expression - Nonterminal
35. LEFT_OP - Terminal
36. RIGHT_OP - Terminal
37. relational_expression - Nonterminal
38. < - Terminal
39. > - Terminal
40. LE_OP - Terminal
41. GE_OP - Terminal
42. equality_expression - Nonterminal
43. EQ_OP - Terminal
44. NE_OP - Terminal
45. and_expression - Nonterminal
46. exclusive_or_expression - Nonterminal
47. ^ - Terminal
48. inclusive_or_expression - Nonterminal
49. | - Terminal
50. logical_and_expression - Nonterminal
51. AND_OP - Terminal
52. logical_or_expression - Nonterminal
53. OR_OP - Terminal
54. conditional_expression - Nonterminal
55. ? - Terminal
56. : - Terminal
57. assignment_operator - Nonterminal
58. = - Terminal
59. MUL_ASSIGN - Terminal
60. DIV_ASSIGN - Terminal
61. MOD_ASSIGN - Terminal
62. ADD_ASSIGN - Terminal
63. SUB_ASSIGN - Terminal
64. LEFT_ASSIGN - Terminal
65. RIGHT_ASSIGN - Terminal
66. AND_ASSIGN - Terminal
67. XOR_ASSIGN - Terminal
68. OR_ASSIGN - Terminal
69. constant_expression - Nonterminal
70. declaration - Nonterminal
71. declaration_specifiers - Nonterminal
72. ; - Terminal
73. init_declarator_list - Nonterminal
74. storage_class_specifier - Nonterminal
75. type_specifier - Nonterminal
76. type_qualifier - Nonterminal
77. init_declarator - Nonterminal
78. declarator - Nonterminal
79. initializer - Nonterminal
80. TYPEDEF - Terminal
81. EXTERN - Terminal
82. STATIC - Terminal
83. AUTO - Terminal
84. REGISTER - Terminal
85. VOID - Terminal
86. CHAR - Terminal
87. SHORT - Terminal
88. INT - Terminal
89. LONG - Terminal
90. FLOAT - Terminal
91. DOUBLE - Terminal
92. SIGNED - Terminal
93. UNSIGNED - Terminal
94. struct_or_union_specifier - Nonterminal
95. enum_specifier - Nonterminal
96. TYPE_NAME - Terminal
97. struct_or_union - Nonterminal
98. struct_tag_opt - Nonterminal
99. struct_definition_start - Nonterminal
100. struct_declaration_list - Nonterminal
101. struct_definition_end - Nonterminal
102. { - Terminal
103. } - Terminal
104. STRUCT - Terminal
105. UNION - Terminal
106. struct_declaration - Nonterminal
107. specifier_qualifier_list - Nonterminal
108. struct_declarator_list - Nonterminal
109. struct_declarator - Nonterminal
110. ENUM - Terminal
111. enumerator_list - Nonterminal
112. enumerator - Nonterminal
113. CONST - Terminal
114. VOLATILE - Terminal
115. pointer - Nonterminal
116. direct_declarator - Nonterminal
117. parameter_list_start - Nonterminal
118. parameter_type_list - Nonterminal
119. parameter_list_end - Nonterminal
120. identifier_list - Nonterminal
121. type_qualifier_list - Nonterminal
122. parameter_list - Nonterminal
123. ELLIPSIS - Terminal
124. parameter_declaration - Nonterminal
125. abstract_declarator - Nonterminal
126. direct_abstract_declarator - Nonterminal
127. initializer_list - Nonterminal
128. statement - Nonterminal
129. labeled_statement - Nonterminal
130. compound_statement - Nonterminal
131. expression_statement - Nonterminal
132. selection_statement - Nonterminal
133. iteration_statement - Nonterminal
134. jump_statement - Nonterminal
135. CASE - Terminal
136. DEFAULT - Terminal
137. block_start - Nonterminal
138. block_end - Nonterminal
139. statement_list - Nonterminal
140. declaration_list - Nonterminal
141. IF - Terminal
142. ELSE - Terminal
143. SWITCH - Terminal
144. WHILE - Terminal
145. DO - Terminal
146. FOR - Terminal
147. GOTO - Terminal
148. CONTINUE - Terminal
149. BREAK - Terminal
150. RETURN - Terminal
151. translation_unit - Nonterminal
152. external_declaration - Nonterminal
153. function_definition - Nonterminal
154. $start - Nonterminal

Grammar Productions rules:
0. primary_expression -> IDENTIFIER 
1. primary_expression -> CONSTANT 
2. primary_expression -> STRING_LITERAL 
3. primary_expression -> ( expression ) 
4. postfix_expression -> primary_expression 
5. postfix_expression -> postfix_expression [ expression ] 
6. postfix_expression -> postfix_expression ( ) 
7. postfix_expression -> postfix_expression ( argument_expression_list ) 
8. postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER 
9. postfix_expression -> postfix_expression INC_OP 
10. postfix_expression -> postfix_expression DEC_OP 
11. struct_member_accessor -> . 
12. struct_member_accessor -> PTR_OP 
13. argument_expression_list -> assignment_expression 
14. argument_expression_list -> argument_expression_list , assignment_expression 
15. unary_expression -> postfix_expression 
16. unary_expression -> INC_OP unary_expression 
17. unary_expression -> DEC_OP unary_expression 
18. unary_expression -> unary_operator cast_expression 
19. unary_expression -> SIZEOF unary_expression 
20. unary_expression -> SIZEOF ( type_name ) 
21. unary_operator -> & 
22. unary_operator -> * 
23. unary_operator -> + 
24. unary_operator -> - 
25. unary_operator -> ~ 
26. unary_operator -> ! 
27. cast_expression -> unary_expression 
28. cast_expression -> ( type_name ) cast_expression 
29. multiplicative_expression -> cast_expression 
30. multiplicative_expression -> multiplicative_expression * cast_expression 
31. multiplicative_expression -> multiplicative_expression / cast_expression 
32. multiplicative_expression -> multiplicative_expression % cast_expression 
33. additive_expression -> multiplicative_expression 
34. additive_expression -> additive_expression + multiplicative_expression 
35. additive_expression -> additive_expression - multiplicative_expression 
36. shift_expression -> additive_expression 
37. shift_expression -> shift_expression LEFT_OP additive_expression 
38. shift_expression -> shift_expression RIGHT_OP additive_expression 
39. relational_expression -> shift_expression 
40. relational_expression -> relational_expression < shift_expression 
41. relational_expression -> relational_expression > shift_expression 
42. relational_expression -> relational_expression LE_OP shift_expression 
43. relational_expression -> relational_expression GE_OP shift_expression 
44. equality_expression -> relational_expression 
45. equality_expression -> equality_expression EQ_OP relational_expression 
46. equality_expression -> equality_expression NE_OP relational_expression 
47. and_expression -> equality_expression 
48. and_expression -> and_expression & equality_expression 
49. exclusive_or_expression -> and_expression 
50. exclusive_or_expression -> exclusive_or_expression ^ and_expression 
51. inclusive_or_expression -> exclusive_or_expression 
52. inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression 
53. logical_and_expression -> inclusive_or_expression 
54. logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression 
55. logical_or_expression -> logical_and_expression 
56. logical_or_expression -> logical_or_expression OR_OP logical_and_expression 
57. conditional_expression -> logical_or_expression 
58. conditional_expression -> logical_or_expression ? expression : conditional_expression 
59. assignment_expression -> conditional_expression 
60. assignment_expression -> unary_expression assignment_operator assignment_expression 
61. assignment_operator -> = 
62. assignment_operator -> MUL_ASSIGN 
63. assignment_operator -> DIV_ASSIGN 
64. assignment_operator -> MOD_ASSIGN 
65. assignment_operator -> ADD_ASSIGN 
66. assignment_operator -> SUB_ASSIGN 
67. assignment_operator -> LEFT_ASSIGN 
68. assignment_operator -> RIGHT_ASSIGN 
69. assignment_operator -> AND_ASSIGN 
70. assignment_operator -> XOR_ASSIGN 
71. assignment_operator -> OR_ASSIGN 
72. expression -> assignment_expression 
73. expression -> expression , assignment_expression 
74. constant_expression -> conditional_expression 
75. declaration -> declaration_specifiers ; 
76. declaration -> declaration_specifiers init_declarator_list ; 
77. declaration_specifiers -> storage_class_specifier 
78. declaration_specifiers -> storage_class_specifier declaration_specifiers 
79. declaration_specifiers -> type_specifier 
80. declaration_specifiers -> type_specifier declaration_specifiers 
81. declaration_specifiers -> type_qualifier 
82. declaration_specifiers -> type_qualifier declaration_specifiers 
83. init_declarator_list -> init_declarator 
84. init_declarator_list -> init_declarator_list , init_declarator 
85. init_declarator -> declarator 
86. init_declarator -> declarator = initializer 
87. storage_class_specifier -> TYPEDEF 
88. storage_class_specifier -> EXTERN 
89. storage_class_specifier -> STATIC 
90. storage_class_specifier -> AUTO 
91. storage_class_specifier -> REGISTER 
92. type_specifier -> VOID 
93. type_specifier -> CHAR 
94. type_specifier -> SHORT 
95. type_specifier -> INT 
96. type_specifier -> LONG 
97. type_specifier -> FLOAT 
98. type_specifier -> DOUBLE 
99. type_specifier -> SIGNED 
100. type_specifier -> UNSIGNED 
101. type_specifier -> struct_or_union_specifier 
102. type_specifier -> enum_specifier 
103. type_specifier -> TYPE_NAME 
104. struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end 
105. struct_or_union_specifier -> struct_or_union IDENTIFIER 
106. struct_tag_opt -> IDENTIFIER 
107. struct_tag_opt -> 
108. struct_definition_start -> { 
109. struct_definition_end -> } 
110. struct_or_union -> STRUCT 
111. struct_or_union -> UNION 
112. struct_declaration_list -> struct_declaration 
113. struct_declaration_list -> struct_declaration_list struct_declaration 
114. struct_declaration -> specifier_qualifier_list struct_declarator_list ; 
115. specifier_qualifier_list -> type_specifier specifier_qualifier_list 
116. specifier_qualifier_list -> type_specifier 
117. specifier_qualifier_list -> type_qualifier specifier_qualifier_list 
118. specifier_qualifier_list -> type_qualifier 
119. struct_declarator_list -> struct_declarator 
120. struct_declarator_list -> struct_declarator_list , struct_declarator 
121. struct_declarator -> declarator 
122. struct_declarator -> : constant_expression 
123. struct_declarator -> declarator : constant_expression 
124. enum_specifier -> ENUM { enumerator_list } 
125. enum_specifier -> ENUM IDENTIFIER { enumerator_list } 
126. enum_specifier -> ENUM IDENTIFIER 
127. enumerator_list -> enumerator 
128. enumerator_list -> enumerator_list , enumerator 
129. enumerator -> IDENTIFIER 
130. enumerator -> IDENTIFIER = constant_expression 
131. type_qualifier -> CONST 
132. type_qualifier -> VOLATILE 
133. declarator -> pointer direct_declarator 
134. declarator -> direct_declarator 
135. direct_declarator -> IDENTIFIER 
136. direct_declarator -> ( declarator ) 
137. direct_declarator -> direct_declarator [ constant_expression ] 
138. direct_declarator -> direct_declarator [ ] 
139. direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end 
140. direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end 
141. direct_declarator -> direct_declarator ( ) 
142. parameter_list_start -> ( 
143. parameter_list_end -> ) 
144. pointer -> * 
145. pointer -> * type_qualifier_list 
146. pointer -> * pointer 
147. pointer -> * type_qualifier_list pointer 
148. type_qualifier_list -> type_qualifier 
149. type_qualifier_list -> type_qualifier_list type_qualifier 
150. parameter_type_list -> parameter_list 
151. parameter_type_list -> parameter_list , ELLIPSIS 
152. parameter_list -> parameter_declaration 
153. parameter_list -> parameter_list , parameter_declaration 
154. parameter_declaration -> declaration_specifiers declarator 
155. parameter_declaration -> declaration_specifiers abstract_declarator 
156. parameter_declaration -> declaration_specifiers 
157. identifier_list -> IDENTIFIER 
158. identifier_list -> identifier_list , IDENTIFIER 
159. type_name -> specifier_qualifier_list 
160. type_name -> specifier_qualifier_list abstract_declarator 
161. abstract_declarator -> pointer 
162. abstract_declarator -> direct_abstract_declarator 
163. abstract_declarator -> pointer direct_abstract_declarator 
164. direct_abstract_declarator -> ( abstract_declarator ) 
165. direct_abstract_declarator -> [ ] 
166. direct_abstract_declarator -> [ constant_expression ] 
167. direct_abstract_declarator -> direct_abstract_declarator [ ] 
168. direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 
169. direct_abstract_declarator -> ( ) 
170. direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end 
171. direct_abstract_declarator -> direct_abstract_declarator ( ) 
172. direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end 
173. initializer -> assignment_expression 
174. initializer -> { initializer_list } 
175. initializer -> { initializer_list , } 
176. initializer_list -> initializer 
177. initializer_list -> initializer_list , initializer 
178. statement -> labeled_statement 
179. statement -> compound_statement 
180. statement -> expression_statement 
181. statement -> selection_statement 
182. statement -> iteration_statement 
183. statement -> jump_statement 
184. labeled_statement -> IDENTIFIER : statement 
185. labeled_statement -> CASE constant_expression : statement 
186. labeled_statement -> DEFAULT : statement 
187. compound_statement -> block_start block_end 
188. compound_statement -> block_start statement_list block_end 
189. compound_statement -> block_start declaration_list block_end 
190. compound_statement -> block_start declaration_list statement_list block_end 
191. block_start -> { 
192. block_end -> } 
193. declaration_list -> declaration 
194. declaration_list -> declaration_list declaration 
195. statement_list -> statement 
196. statement_list -> statement_list statement 
197. expression_statement -> ; 
198. expression_statement -> expression ; 
199. selection_statement -> IF ( expression ) statement 
200. selection_statement -> IF ( expression ) statement ELSE 
201. selection_statement -> SWITCH ( expression ) statement 
202. iteration_statement -> WHILE ( expression ) statement 
203. iteration_statement -> DO statement WHILE ( expression ) ; 
204. iteration_statement -> FOR ( expression_statement ) statement 
205. iteration_statement -> FOR ( expression_statement expression ) statement 
206. jump_statement -> GOTO IDENTIFIER ; 
207. jump_statement -> CONTINUE ; 
208. jump_statement -> BREAK ; 
209. jump_statement -> RETURN ; 
210. jump_statement -> RETURN expression ; 
211. translation_unit -> external_declaration 
212. translation_unit -> translation_unit external_declaration 
213. external_declaration -> function_definition 
214. external_declaration -> declaration 
215. function_definition -> declaration_specifiers declarator declaration_list compound_statement 
216. function_definition -> declaration_specifiers declarator compound_statement 
217. function_definition -> declarator declaration_list compound_statement 
218. function_definition -> declarator compound_statement 
219. $start -> translation_unit $eof 

Generating states...
State 0:
K  - [$start -> .translation_unit $eof]
NK - [translation_unit -> .external_declaration]
NK - [translation_unit -> .translation_unit external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
Processing state: 0
Creating itemsets from state: 0
State 1:
K  - [pointer -> *.]
K  - [pointer -> * .type_qualifier_list]
K  - [pointer -> * .pointer]
K  - [pointer -> * .type_qualifier_list pointer]
NK - [type_qualifier_list -> .type_qualifier]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
State 2:
K  - [direct_declarator -> IDENTIFIER.]
State 3:
K  - [direct_declarator -> ( .declarator )]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 4:
K  - [declaration_specifiers -> storage_class_specifier.]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 5:
K  - [type_specifier -> enum_specifier.]
State 6:
K  - [type_specifier -> struct_or_union_specifier.]
State 7:
K  - [declaration_specifiers -> type_specifier.]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 8:
K  - [external_declaration -> declaration.]
State 9:
K  - [declarator -> pointer .direct_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 10:
K  - [declarator -> direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]
State 11:
K  - [declaration_specifiers -> type_qualifier.]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 12:
K  - [function_definition -> declarator .declaration_list compound_statement]
K  - [function_definition -> declarator .compound_statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 13:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers .declarator compound_statement]
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
State 14:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER]
NK - [struct_tag_opt -> .IDENTIFIER]
NK - [struct_tag_opt -> .]
State 15:
K  - [type_specifier -> UNSIGNED.]
State 16:
K  - [type_specifier -> SIGNED.]
State 17:
K  - [enum_specifier -> ENUM .{ enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER]
State 18:
K  - [type_qualifier -> CONST.]
State 19:
K  - [struct_or_union -> STRUCT.]
State 20:
K  - [struct_or_union -> UNION.]
State 21:
K  - [type_specifier -> TYPE_NAME.]
State 22:
K  - [type_specifier -> LONG.]
State 23:
K  - [storage_class_specifier -> STATIC.]
State 24:
K  - [storage_class_specifier -> REGISTER.]
State 25:
K  - [type_specifier -> VOID.]
State 26:
K  - [type_specifier -> SHORT.]
State 27:
K  - [type_specifier -> INT.]
State 28:
K  - [type_specifier -> CHAR.]
State 29:
K  - [type_specifier -> FLOAT.]
State 30:
K  - [type_specifier -> DOUBLE.]
State 31:
K  - [storage_class_specifier -> EXTERN.]
State 32:
K  - [storage_class_specifier -> AUTO.]
State 33:
K  - [storage_class_specifier -> TYPEDEF.]
State 34:
K  - [type_qualifier -> VOLATILE.]
State 35:
K  - [external_declaration -> function_definition.]
State 36:
K  - [$start -> translation_unit .$eof]
K  - [translation_unit -> translation_unit .external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 37:
K  - [translation_unit -> external_declaration.]

Processing state: 1State: 1, Saving reduction to rule144

Creating itemsets from state: 1
State 1 already created
State 38:
K  - [pointer -> * pointer.]
State 39:
K  - [type_qualifier_list -> type_qualifier.]
State 18 already created
State 34 already created
State 40:
K  - [pointer -> * type_qualifier_list.]
K  - [pointer -> * type_qualifier_list .pointer]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]

Processing state: 2State: 2, Saving reduction to rule135

Creating itemsets from state: 2

Processing state: 3
Creating itemsets from state: 3
State 1 already created
State 2 already created
State 3 already created
State 9 already created
State 10 already created
State 41:
K  - [direct_declarator -> ( declarator .)]

Processing state: 4State: 4, Saving reduction to rule77

Creating itemsets from state: 4
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 11 already created
State 42:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers.]
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created

Processing state: 5State: 5, Saving reduction to rule102

Creating itemsets from state: 5

Processing state: 6State: 6, Saving reduction to rule101

Creating itemsets from state: 6

Processing state: 7State: 7, Saving reduction to rule79

Creating itemsets from state: 7
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 11 already created
State 43:
K  - [declaration_specifiers -> type_specifier declaration_specifiers.]
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created

Processing state: 8State: 8, Saving reduction to rule214

Creating itemsets from state: 8

Processing state: 9
Creating itemsets from state: 9
State 2 already created
State 3 already created
State 44:
K  - [declarator -> pointer direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]

Processing state: 10State: 10, Saving reduction to rule134

Creating itemsets from state: 10
State 45:
K  - [direct_declarator -> direct_declarator [ .constant_expression ]]
K  - [direct_declarator -> direct_declarator [ .]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 46:
K  - [direct_declarator -> direct_declarator ( .)]
K  - [parameter_list_start -> (.]
State 47:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [identifier_list -> .IDENTIFIER]
NK - [identifier_list -> .identifier_list , IDENTIFIER]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 11State: 11, Saving reduction to rule81

Creating itemsets from state: 11
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 11 already created
State 48:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers.]
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created

Processing state: 12
Creating itemsets from state: 12
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 49:
K  - [declaration_list -> declaration.]
State 11 already created
State 50:
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 51:
K  - [block_start -> {.]
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 52:
K  - [compound_statement -> block_start .block_end]
K  - [compound_statement -> block_start .statement_list block_end]
K  - [compound_statement -> block_start .declaration_list block_end]
K  - [compound_statement -> block_start .declaration_list statement_list block_end]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 53:
K  - [function_definition -> declarator compound_statement.]
State 54:
K  - [function_definition -> declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 13
Creating itemsets from state: 13
State 1 already created
State 2 already created
State 3 already created
State 9 already created
State 10 already created
State 55:
K  - [declaration -> declaration_specifiers init_declarator_list .;]
K  - [init_declarator_list -> init_declarator_list ., init_declarator]
State 56:
K  - [init_declarator_list -> init_declarator.]
State 57:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers declarator .compound_statement]
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 58:
K  - [declaration -> declaration_specifiers ;.]

Processing state: 14State: 14, Saving reduction to rule107

Creating itemsets from state: 14
State 59:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER.]
K  - [struct_tag_opt -> IDENTIFIER.]
State 60:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_definition_start -> .{]

Processing state: 15State: 15, Saving reduction to rule100

Creating itemsets from state: 15

Processing state: 16State: 16, Saving reduction to rule99

Creating itemsets from state: 16

Processing state: 17
Creating itemsets from state: 17
State 61:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }]
K  - [enum_specifier -> ENUM IDENTIFIER.]
State 62:
K  - [enum_specifier -> ENUM { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]

Processing state: 18State: 18, Saving reduction to rule131

Creating itemsets from state: 18

Processing state: 19State: 19, Saving reduction to rule110

Creating itemsets from state: 19

Processing state: 20State: 20, Saving reduction to rule111

Creating itemsets from state: 20

Processing state: 21State: 21, Saving reduction to rule103

Creating itemsets from state: 21

Processing state: 22State: 22, Saving reduction to rule96

Creating itemsets from state: 22

Processing state: 23State: 23, Saving reduction to rule89

Creating itemsets from state: 23

Processing state: 24State: 24, Saving reduction to rule91

Creating itemsets from state: 24

Processing state: 25State: 25, Saving reduction to rule92

Creating itemsets from state: 25

Processing state: 26State: 26, Saving reduction to rule94

Creating itemsets from state: 26

Processing state: 27State: 27, Saving reduction to rule95

Creating itemsets from state: 27

Processing state: 28State: 28, Saving reduction to rule93

Creating itemsets from state: 28

Processing state: 29State: 29, Saving reduction to rule97

Creating itemsets from state: 29

Processing state: 30State: 30, Saving reduction to rule98

Creating itemsets from state: 30

Processing state: 31State: 31, Saving reduction to rule88

Creating itemsets from state: 31

Processing state: 32State: 32, Saving reduction to rule90

Creating itemsets from state: 32

Processing state: 33State: 33, Saving reduction to rule87

Creating itemsets from state: 33

Processing state: 34State: 34, Saving reduction to rule132

Creating itemsets from state: 34

Processing state: 35State: 35, Saving reduction to rule213

Creating itemsets from state: 35

Processing state: 36
Creating itemsets from state: 36
State 63:
K  - [$start -> translation_unit $eof.]
State 1 already created
State 2 already created
State 3 already created
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 8 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 35 already created
State 64:
K  - [translation_unit -> translation_unit external_declaration.]

Processing state: 37State: 37, Saving reduction to rule211

Creating itemsets from state: 37

Processing state: 38State: 38, Saving reduction to rule146

Creating itemsets from state: 38

Processing state: 39State: 39, Saving reduction to rule148

Creating itemsets from state: 39

Processing state: 40State: 40, Saving reduction to rule145

Creating itemsets from state: 40
State 1 already created
State 65:
K  - [pointer -> * type_qualifier_list pointer.]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier.]
State 18 already created
State 34 already created

Processing state: 41
Creating itemsets from state: 41
State 67:
K  - [direct_declarator -> ( declarator ).]

Processing state: 42State: 42, Saving reduction to rule78

Creating itemsets from state: 42

Processing state: 43State: 43, Saving reduction to rule80

Creating itemsets from state: 43

Processing state: 44State: 44, Saving reduction to rule133

Creating itemsets from state: 44
State 45 already created
State 46 already created
State 47 already created

Processing state: 45
Creating itemsets from state: 45
State 68:
K  - [postfix_expression -> primary_expression.]
State 69:
K  - [unary_operator -> !.]
State 70:
K  - [unary_operator -> ~.]
State 71:
K  - [unary_operator -> -.]
State 72:
K  - [unary_operator -> +.]
State 73:
K  - [unary_operator -> *.]
State 74:
K  - [unary_expression -> SIZEOF .unary_expression]
K  - [unary_expression -> SIZEOF .( type_name )]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 75:
K  - [unary_operator -> &.]
State 76:
K  - [unary_expression -> DEC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 77:
K  - [direct_declarator -> direct_declarator [ ].]
State 78:
K  - [primary_expression -> IDENTIFIER.]
State 79:
K  - [primary_expression -> STRING_LITERAL.]
State 80:
K  - [cast_expression -> ( .type_name ) cast_expression]
K  - [primary_expression -> ( .expression )]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81:
K  - [primary_expression -> CONSTANT.]
State 82:
K  - [unary_expression -> INC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 83:
K  - [conditional_expression -> logical_or_expression.]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression]
State 84:
K  - [constant_expression -> conditional_expression.]
State 85:
K  - [direct_declarator -> direct_declarator [ constant_expression .]]
State 86:
K  - [exclusive_or_expression -> and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 87:
K  - [inclusive_or_expression -> exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 88:
K  - [unary_expression -> unary_operator .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 89:
K  - [logical_or_expression -> logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 90:
K  - [logical_and_expression -> inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 91:
K  - [unary_expression -> postfix_expression.]
K  - [postfix_expression -> postfix_expression .[ expression ]]
K  - [postfix_expression -> postfix_expression .( )]
K  - [postfix_expression -> postfix_expression .( argument_expression_list )]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER]
K  - [postfix_expression -> postfix_expression .INC_OP]
K  - [postfix_expression -> postfix_expression .DEC_OP]
NK - [struct_member_accessor -> ..]
NK - [struct_member_accessor -> .PTR_OP]
State 92:
K  - [cast_expression -> unary_expression.]
State 93:
K  - [multiplicative_expression -> cast_expression.]
State 94:
K  - [relational_expression -> shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 95:
K  - [and_expression -> equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 96:
K  - [shift_expression -> additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 97:
K  - [equality_expression -> relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 98:
K  - [additive_expression -> multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]

Processing state: 46State: 46, Saving reduction to rule142

Creating itemsets from state: 46
State 99:
K  - [direct_declarator -> direct_declarator ( ).]

Processing state: 47
Creating itemsets from state: 47
State 100:
K  - [identifier_list -> IDENTIFIER.]
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 101:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 11 already created
State 102:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end]
K  - [identifier_list -> identifier_list ., IDENTIFIER]
NK - [parameter_list_end -> .)]
State 103:
K  - [parameter_declaration -> declaration_specifiers .declarator]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator]
K  - [parameter_declaration -> declaration_specifiers.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 104:
K  - [parameter_list -> parameter_declaration.]
State 105:
K  - [parameter_type_list -> parameter_list.]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS]
K  - [parameter_list -> parameter_list ., parameter_declaration]

Processing state: 48State: 48, Saving reduction to rule82

Creating itemsets from state: 48

Processing state: 49State: 49, Saving reduction to rule193

Creating itemsets from state: 49

Processing state: 50
Creating itemsets from state: 50
State 1 already created
State 2 already created
State 3 already created
State 9 already created
State 10 already created
State 55 already created
State 56 already created
State 106:
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
State 58 already created

Processing state: 51State: 51, Saving reduction to rule191

Creating itemsets from state: 51

Processing state: 52
Creating itemsets from state: 52
State 68 already created
State 107:
K  - [expression_statement -> expression .;]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108:
K  - [labeled_statement -> IDENTIFIER .: statement]
K  - [primary_expression -> IDENTIFIER.]
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 109:
K  - [assignment_expression -> conditional_expression.]
State 49 already created
State 11 already created
State 50 already created
State 14 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110:
K  - [expression -> assignment_expression.]
State 90 already created
State 91 already created
State 111:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression]
K  - [cast_expression -> unary_expression.]
NK - [assignment_operator -> .=]
NK - [assignment_operator -> .MUL_ASSIGN]
NK - [assignment_operator -> .DIV_ASSIGN]
NK - [assignment_operator -> .MOD_ASSIGN]
NK - [assignment_operator -> .ADD_ASSIGN]
NK - [assignment_operator -> .SUB_ASSIGN]
NK - [assignment_operator -> .LEFT_ASSIGN]
NK - [assignment_operator -> .RIGHT_ASSIGN]
NK - [assignment_operator -> .AND_ASSIGN]
NK - [assignment_operator -> .XOR_ASSIGN]
NK - [assignment_operator -> .OR_ASSIGN]
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112:
K  - [expression_statement -> ;.]
State 15 already created
State 16 already created
State 113:
K  - [block_end -> }.]
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 51 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 114:
K  - [labeled_statement -> CASE .constant_expression : statement]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 115:
K  - [iteration_statement -> WHILE .( expression ) statement]
State 116:
K  - [jump_statement -> GOTO .IDENTIFIER ;]
State 117:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 118:
K  - [selection_statement -> IF .( expression ) statement]
K  - [selection_statement -> IF .( expression ) statement ELSE]
State 119:
K  - [labeled_statement -> DEFAULT .: statement]
State 120:
K  - [selection_statement -> SWITCH .( expression ) statement]
State 121:
K  - [jump_statement -> CONTINUE .;]
State 122:
K  - [jump_statement -> BREAK .;]
State 123:
K  - [jump_statement -> RETURN .;]
K  - [jump_statement -> RETURN .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement]
State 125:
K  - [statement -> expression_statement.]
State 126:
K  - [statement -> iteration_statement.]
State 127:
K  - [statement_list -> statement.]
State 128:
K  - [compound_statement -> block_start statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 52 already created
State 129:
K  - [compound_statement -> block_start block_end.]
State 130:
K  - [statement -> compound_statement.]
State 131:
K  - [statement -> jump_statement.]
State 132:
K  - [statement -> selection_statement.]
State 133:
K  - [statement -> labeled_statement.]
State 134:
K  - [compound_statement -> block_start declaration_list .block_end]
K  - [compound_statement -> block_start declaration_list .statement_list block_end]
K  - [declaration_list -> declaration_list .declaration]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 53State: 53, Saving reduction to rule218

Creating itemsets from state: 53

Processing state: 54
Creating itemsets from state: 54
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 135:
K  - [declaration_list -> declaration_list declaration.]
State 11 already created
State 50 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 51 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 52 already created
State 136:
K  - [function_definition -> declarator declaration_list compound_statement.]

Processing state: 55
Creating itemsets from state: 55
State 137:
K  - [init_declarator_list -> init_declarator_list , .init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 138:
K  - [declaration -> declaration_specifiers init_declarator_list ;.]

Processing state: 56State: 56, Saving reduction to rule83

Creating itemsets from state: 56

Processing state: 57State: 57, Saving reduction to rule85

Creating itemsets from state: 57
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 49 already created
State 11 already created
State 50 already created
State 14 already created
State 139:
K  - [init_declarator -> declarator = .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 51 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 52 already created
State 140:
K  - [function_definition -> declaration_specifiers declarator compound_statement.]
State 141:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 58State: 58, Saving reduction to rule75

Creating itemsets from state: 58

Processing state: 59State: 59, Saving reduction to rule105
State: 59, Saving reduction to rule106

Creating itemsets from state: 59

Processing state: 60
Creating itemsets from state: 60
State 142:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end]
NK - [struct_declaration_list -> .struct_declaration]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 143:
K  - [struct_definition_start -> {.]

Processing state: 61State: 61, Saving reduction to rule126

Creating itemsets from state: 61
State 144:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]

Processing state: 62
Creating itemsets from state: 62
State 145:
K  - [enumerator -> IDENTIFIER.]
K  - [enumerator -> IDENTIFIER .= constant_expression]
State 146:
K  - [enum_specifier -> ENUM { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 147:
K  - [enumerator_list -> enumerator.]

Processing state: 63State: 63, Saving reduction to rule219

Creating itemsets from state: 63

Processing state: 64State: 64, Saving reduction to rule212

Creating itemsets from state: 64

Processing state: 65State: 65, Saving reduction to rule147

Creating itemsets from state: 65

Processing state: 66State: 66, Saving reduction to rule149

Creating itemsets from state: 66

Processing state: 67State: 67, Saving reduction to rule136

Creating itemsets from state: 67

Processing state: 68State: 68, Saving reduction to rule4

Creating itemsets from state: 68

Processing state: 69State: 69, Saving reduction to rule26

Creating itemsets from state: 69

Processing state: 70State: 70, Saving reduction to rule25

Creating itemsets from state: 70

Processing state: 71State: 71, Saving reduction to rule24

Creating itemsets from state: 71

Processing state: 72State: 72, Saving reduction to rule23

Creating itemsets from state: 72

Processing state: 73State: 73, Saving reduction to rule22

Creating itemsets from state: 73

Processing state: 74
Creating itemsets from state: 74
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 148:
K  - [unary_expression -> SIZEOF ( .type_name )]
K  - [primary_expression -> ( .expression )]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 149:
K  - [unary_expression -> SIZEOF unary_expression.]

Processing state: 75State: 75, Saving reduction to rule21

Creating itemsets from state: 75

Processing state: 76
Creating itemsets from state: 76
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 150:
K  - [primary_expression -> ( .expression )]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 151:
K  - [unary_expression -> DEC_OP unary_expression.]

Processing state: 77State: 77, Saving reduction to rule138

Creating itemsets from state: 77

Processing state: 78State: 78, Saving reduction to rule0

Creating itemsets from state: 78

Processing state: 79State: 79, Saving reduction to rule2

Creating itemsets from state: 79

Processing state: 80
Creating itemsets from state: 80
State 68 already created
State 152:
K  - [primary_expression -> ( expression .)]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 5 already created
State 6 already created
State 153:
K  - [type_name -> specifier_qualifier_list.]
K  - [type_name -> specifier_qualifier_list .abstract_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 154:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_specifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 109 already created
State 155:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_qualifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 14 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 156:
K  - [cast_expression -> ( type_name .) cast_expression]
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 34 already created

Processing state: 81State: 81, Saving reduction to rule1

Creating itemsets from state: 81

Processing state: 82
Creating itemsets from state: 82
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 150 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 157:
K  - [unary_expression -> INC_OP unary_expression.]

Processing state: 83State: 83, Saving reduction to rule57

Creating itemsets from state: 83
State 158:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 159:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 84State: 84, Saving reduction to rule74

Creating itemsets from state: 84

Processing state: 85
Creating itemsets from state: 85
State 160:
K  - [direct_declarator -> direct_declarator [ constant_expression ].]

Processing state: 86State: 86, Saving reduction to rule49

Creating itemsets from state: 86
State 161:
K  - [and_expression -> and_expression & .equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 87State: 87, Saving reduction to rule51

Creating itemsets from state: 87
State 162:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 88
Creating itemsets from state: 88
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 163:
K  - [unary_expression -> unary_operator cast_expression.]

Processing state: 89State: 89, Saving reduction to rule55

Creating itemsets from state: 89
State 164:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 90State: 90, Saving reduction to rule53

Creating itemsets from state: 90
State 165:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 91State: 91, Saving reduction to rule15

Creating itemsets from state: 91
State 166:
K  - [postfix_expression -> postfix_expression DEC_OP.]
State 167:
K  - [postfix_expression -> postfix_expression [ .expression ]]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 168:
K  - [struct_member_accessor -> ..]
State 169:
K  - [struct_member_accessor -> PTR_OP.]
State 170:
K  - [postfix_expression -> postfix_expression ( .)]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list )]
NK - [argument_expression_list -> .assignment_expression]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 171:
K  - [postfix_expression -> postfix_expression INC_OP.]
State 172:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER]

Processing state: 92State: 92, Saving reduction to rule27

Creating itemsets from state: 92

Processing state: 93State: 93, Saving reduction to rule29

Creating itemsets from state: 93

Processing state: 94State: 94, Saving reduction to rule39

Creating itemsets from state: 94
State 173:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 174:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 95State: 95, Saving reduction to rule47

Creating itemsets from state: 95
State 175:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 176:
K  - [equality_expression -> equality_expression NE_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 96State: 96, Saving reduction to rule36

Creating itemsets from state: 96
State 177:
K  - [additive_expression -> additive_expression - .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 178:
K  - [additive_expression -> additive_expression + .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 97State: 97, Saving reduction to rule44

Creating itemsets from state: 97
State 179:
K  - [relational_expression -> relational_expression < .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 180:
K  - [relational_expression -> relational_expression LE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 181:
K  - [relational_expression -> relational_expression GE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 182:
K  - [relational_expression -> relational_expression > .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 98State: 98, Saving reduction to rule33

Creating itemsets from state: 98
State 183:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 184:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 185:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 99State: 99, Saving reduction to rule141

Creating itemsets from state: 99

Processing state: 100State: 100, Saving reduction to rule157

Creating itemsets from state: 100

Processing state: 101
Creating itemsets from state: 101
State 186:
K  - [parameter_list_end -> ).]
State 187:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end.]

Processing state: 102
Creating itemsets from state: 102
State 188:
K  - [identifier_list -> identifier_list , .IDENTIFIER]
State 186 already created
State 189:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end.]

Processing state: 103State: 103, Saving reduction to rule156

Creating itemsets from state: 103
State 1 already created
State 190:
K  - [direct_abstract_declarator -> [ .]]
K  - [direct_abstract_declarator -> [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 2 already created
State 191:
K  - [direct_declarator -> ( .declarator )]
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 192:
K  - [declarator -> pointer .direct_declarator]
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 10 already created
State 193:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 194:
K  - [parameter_declaration -> declaration_specifiers declarator.]
State 195:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator.]
State 196:
K  - [abstract_declarator -> direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]

Processing state: 104State: 104, Saving reduction to rule152

Creating itemsets from state: 104

Processing state: 105State: 105, Saving reduction to rule150

Creating itemsets from state: 105
State 197:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS]
K  - [parameter_list -> parameter_list , .parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 106State: 106, Saving reduction to rule85

Creating itemsets from state: 106
State 139 already created

Processing state: 107
Creating itemsets from state: 107
State 198:
K  - [expression -> expression , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 199:
K  - [expression_statement -> expression ;.]

Processing state: 108State: 108, Saving reduction to rule0

Creating itemsets from state: 108
State 200:
K  - [labeled_statement -> IDENTIFIER : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 109State: 109, Saving reduction to rule59

Creating itemsets from state: 109

Processing state: 110State: 110, Saving reduction to rule72

Creating itemsets from state: 110

Processing state: 111State: 111, Saving reduction to rule27

Creating itemsets from state: 111
State 201:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 202:
K  - [assignment_operator -> OR_ASSIGN.]
State 203:
K  - [assignment_operator -> MOD_ASSIGN.]
State 204:
K  - [assignment_operator -> MUL_ASSIGN.]
State 205:
K  - [assignment_operator -> SUB_ASSIGN.]
State 206:
K  - [assignment_operator -> LEFT_ASSIGN.]
State 207:
K  - [assignment_operator -> ADD_ASSIGN.]
State 208:
K  - [assignment_operator -> XOR_ASSIGN.]
State 209:
K  - [assignment_operator -> =.]
State 210:
K  - [assignment_operator -> RIGHT_ASSIGN.]
State 211:
K  - [assignment_operator -> AND_ASSIGN.]
State 212:
K  - [assignment_operator -> DIV_ASSIGN.]

Processing state: 112State: 112, Saving reduction to rule197

Creating itemsets from state: 112

Processing state: 113State: 113, Saving reduction to rule192

Creating itemsets from state: 113

Processing state: 114
Creating itemsets from state: 114
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 213:
K  - [labeled_statement -> CASE constant_expression .: statement]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 115
Creating itemsets from state: 115
State 214:
K  - [iteration_statement -> WHILE ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 116
Creating itemsets from state: 116
State 215:
K  - [jump_statement -> GOTO IDENTIFIER .;]

Processing state: 117
Creating itemsets from state: 117
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 216:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 118
Creating itemsets from state: 118
State 217:
K  - [selection_statement -> IF ( .expression ) statement]
K  - [selection_statement -> IF ( .expression ) statement ELSE]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 119
Creating itemsets from state: 119
State 218:
K  - [labeled_statement -> DEFAULT : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 120
Creating itemsets from state: 120
State 219:
K  - [selection_statement -> SWITCH ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 121
Creating itemsets from state: 121
State 220:
K  - [jump_statement -> CONTINUE ;.]

Processing state: 122
Creating itemsets from state: 122
State 221:
K  - [jump_statement -> BREAK ;.]

Processing state: 123
Creating itemsets from state: 123
State 68 already created
State 222:
K  - [jump_statement -> RETURN expression .;]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 223:
K  - [jump_statement -> RETURN ;.]

Processing state: 124
Creating itemsets from state: 124
State 224:
K  - [iteration_statement -> FOR ( .expression_statement ) statement]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 125State: 125, Saving reduction to rule180

Creating itemsets from state: 125

Processing state: 126State: 126, Saving reduction to rule182

Creating itemsets from state: 126

Processing state: 127State: 127, Saving reduction to rule195

Creating itemsets from state: 127

Processing state: 128
Creating itemsets from state: 128
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 113 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 225:
K  - [statement_list -> statement_list statement.]
State 52 already created
State 226:
K  - [compound_statement -> block_start statement_list block_end.]
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 129State: 129, Saving reduction to rule187

Creating itemsets from state: 129

Processing state: 130State: 130, Saving reduction to rule179

Creating itemsets from state: 130

Processing state: 131State: 131, Saving reduction to rule183

Creating itemsets from state: 131

Processing state: 132State: 132, Saving reduction to rule181

Creating itemsets from state: 132

Processing state: 133State: 133, Saving reduction to rule178

Creating itemsets from state: 133

Processing state: 134
Creating itemsets from state: 134
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 109 already created
State 135 already created
State 11 already created
State 50 already created
State 14 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 15 already created
State 16 already created
State 113 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 51 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created
State 227:
K  - [compound_statement -> block_start declaration_list statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 52 already created
State 228:
K  - [compound_statement -> block_start declaration_list block_end.]
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 135State: 135, Saving reduction to rule194

Creating itemsets from state: 135

Processing state: 136State: 136, Saving reduction to rule217

Creating itemsets from state: 136

Processing state: 137
Creating itemsets from state: 137
State 1 already created
State 2 already created
State 3 already created
State 9 already created
State 10 already created
State 229:
K  - [init_declarator_list -> init_declarator_list , init_declarator.]
State 106 already created

Processing state: 138State: 138, Saving reduction to rule76

Creating itemsets from state: 138

Processing state: 139
Creating itemsets from state: 139
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 230:
K  - [init_declarator -> declarator = initializer.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 231:
K  - [initializer -> assignment_expression.]
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 232:
K  - [initializer -> { .initializer_list }]
K  - [initializer -> { .initializer_list , }]
NK - [initializer_list -> .initializer]
NK - [initializer_list -> .initializer_list , initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 140State: 140, Saving reduction to rule216

Creating itemsets from state: 140

Processing state: 141
Creating itemsets from state: 141
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 135 already created
State 11 already created
State 50 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 51 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 52 already created
State 233:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement.]

Processing state: 142
Creating itemsets from state: 142
State 5 already created
State 6 already created
State 234:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;]
NK - [struct_declarator_list -> .struct_declarator]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 154 already created
State 235:
K  - [struct_declaration_list -> struct_declaration.]
State 155 already created
State 236:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration]
NK - [struct_definition_end -> .}]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 34 already created

Processing state: 143State: 143, Saving reduction to rule108

Creating itemsets from state: 143

Processing state: 144
Creating itemsets from state: 144
State 145 already created
State 237:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 147 already created

Processing state: 145State: 145, Saving reduction to rule129

Creating itemsets from state: 145
State 238:
K  - [enumerator -> IDENTIFIER = .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 146
Creating itemsets from state: 146
State 239:
K  - [enumerator_list -> enumerator_list , .enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 240:
K  - [enum_specifier -> ENUM { enumerator_list }.]

Processing state: 147State: 147, Saving reduction to rule127

Creating itemsets from state: 147

Processing state: 148
Creating itemsets from state: 148
State 68 already created
State 152 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 5 already created
State 6 already created
State 153 already created
State 154 already created
State 109 already created
State 155 already created
State 14 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 241:
K  - [unary_expression -> SIZEOF ( type_name .)]
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 34 already created

Processing state: 149State: 149, Saving reduction to rule19

Creating itemsets from state: 149

Processing state: 150
Creating itemsets from state: 150
State 68 already created
State 152 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 151State: 151, Saving reduction to rule17

Creating itemsets from state: 151

Processing state: 152
Creating itemsets from state: 152
State 198 already created
State 242:
K  - [primary_expression -> ( expression ).]

Processing state: 153State: 153, Saving reduction to rule159

Creating itemsets from state: 153
State 1 already created
State 190 already created
State 243:
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 244:
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 193 already created
State 245:
K  - [type_name -> specifier_qualifier_list abstract_declarator.]
State 196 already created

Processing state: 154State: 154, Saving reduction to rule116

Creating itemsets from state: 154
State 5 already created
State 6 already created
State 246:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list.]
State 154 already created
State 155 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 34 already created

Processing state: 155State: 155, Saving reduction to rule118

Creating itemsets from state: 155
State 5 already created
State 6 already created
State 247:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list.]
State 154 already created
State 155 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 34 already created

Processing state: 156
Creating itemsets from state: 156
State 248:
K  - [cast_expression -> ( type_name ) .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 157State: 157, Saving reduction to rule16

Creating itemsets from state: 157

Processing state: 158
Creating itemsets from state: 158
State 68 already created
State 249:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 159
Creating itemsets from state: 159
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 86 already created
State 87 already created
State 88 already created
State 250:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 160State: 160, Saving reduction to rule137

Creating itemsets from state: 160

Processing state: 161
Creating itemsets from state: 161
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 251:
K  - [and_expression -> and_expression & equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 96 already created
State 97 already created
State 98 already created

Processing state: 162
Creating itemsets from state: 162
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 252:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 163State: 163, Saving reduction to rule18

Creating itemsets from state: 163

Processing state: 164
Creating itemsets from state: 164
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 86 already created
State 87 already created
State 88 already created
State 253:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 165
Creating itemsets from state: 165
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 86 already created
State 254:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 166State: 166, Saving reduction to rule10

Creating itemsets from state: 166

Processing state: 167
Creating itemsets from state: 167
State 68 already created
State 255:
K  - [postfix_expression -> postfix_expression [ expression .]]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 168State: 168, Saving reduction to rule11

Creating itemsets from state: 168

Processing state: 169State: 169, Saving reduction to rule12

Creating itemsets from state: 169

Processing state: 170
Creating itemsets from state: 170
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 256:
K  - [postfix_expression -> postfix_expression ( ).]
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 257:
K  - [argument_expression_list -> assignment_expression.]
State 90 already created
State 91 already created
State 111 already created
State 258:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .)]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression]
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 171State: 171, Saving reduction to rule9

Creating itemsets from state: 171

Processing state: 172
Creating itemsets from state: 172
State 259:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER.]

Processing state: 173
Creating itemsets from state: 173
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 260:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 98 already created

Processing state: 174
Creating itemsets from state: 174
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 261:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 98 already created

Processing state: 175
Creating itemsets from state: 175
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 96 already created
State 262:
K  - [equality_expression -> equality_expression EQ_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 98 already created

Processing state: 176
Creating itemsets from state: 176
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 96 already created
State 263:
K  - [equality_expression -> equality_expression NE_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 98 already created

Processing state: 177
Creating itemsets from state: 177
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 264:
K  - [additive_expression -> additive_expression - multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]

Processing state: 178
Creating itemsets from state: 178
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 265:
K  - [additive_expression -> additive_expression + multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]

Processing state: 179
Creating itemsets from state: 179
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 266:
K  - [relational_expression -> relational_expression < shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 96 already created
State 98 already created

Processing state: 180
Creating itemsets from state: 180
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 267:
K  - [relational_expression -> relational_expression LE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 96 already created
State 98 already created

Processing state: 181
Creating itemsets from state: 181
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 268:
K  - [relational_expression -> relational_expression GE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 96 already created
State 98 already created

Processing state: 182
Creating itemsets from state: 182
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 93 already created
State 269:
K  - [relational_expression -> relational_expression > shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 96 already created
State 98 already created

Processing state: 183
Creating itemsets from state: 183
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 270:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression.]

Processing state: 184
Creating itemsets from state: 184
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 271:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression.]

Processing state: 185
Creating itemsets from state: 185
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 272:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression.]

Processing state: 186State: 186, Saving reduction to rule143

Creating itemsets from state: 186

Processing state: 187State: 187, Saving reduction to rule139

Creating itemsets from state: 187

Processing state: 188
Creating itemsets from state: 188
State 273:
K  - [identifier_list -> identifier_list , IDENTIFIER.]

Processing state: 189State: 189, Saving reduction to rule140

Creating itemsets from state: 189

Processing state: 190
Creating itemsets from state: 190
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 274:
K  - [direct_abstract_declarator -> [ ].]
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 275:
K  - [direct_abstract_declarator -> [ constant_expression .]]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 191State: 191, Saving reduction to rule142

Creating itemsets from state: 191
State 1 already created
State 190 already created
State 2 already created
State 191 already created
State 276:
K  - [direct_abstract_declarator -> ( ).]
State 192 already created
State 10 already created
State 193 already created
State 41 already created
State 277:
K  - [direct_abstract_declarator -> ( abstract_declarator .)]
State 196 already created

Processing state: 192State: 192, Saving reduction to rule161

Creating itemsets from state: 192
State 190 already created
State 2 already created
State 191 already created
State 44 already created
State 193 already created
State 278:
K  - [abstract_declarator -> pointer direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]

Processing state: 193
Creating itemsets from state: 193
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 279:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 11 already created
State 103 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 104 already created
State 105 already created

Processing state: 194State: 194, Saving reduction to rule154

Creating itemsets from state: 194

Processing state: 195State: 195, Saving reduction to rule155

Creating itemsets from state: 195

Processing state: 196State: 196, Saving reduction to rule162

Creating itemsets from state: 196
State 280:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .]]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 281:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .)]
K  - [parameter_list_start -> (.]
State 282:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 197
Creating itemsets from state: 197
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 11 already created
State 103 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 283:
K  - [parameter_type_list -> parameter_list , ELLIPSIS.]
State 284:
K  - [parameter_list -> parameter_list , parameter_declaration.]

Processing state: 198
Creating itemsets from state: 198
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 285:
K  - [expression -> expression , assignment_expression.]
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 199State: 199, Saving reduction to rule198

Creating itemsets from state: 199

Processing state: 200
Creating itemsets from state: 200
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 286:
K  - [labeled_statement -> IDENTIFIER : statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 201
Creating itemsets from state: 201
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 287:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression.]
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 202State: 202, Saving reduction to rule71

Creating itemsets from state: 202

Processing state: 203State: 203, Saving reduction to rule64

Creating itemsets from state: 203

Processing state: 204State: 204, Saving reduction to rule62

Creating itemsets from state: 204

Processing state: 205State: 205, Saving reduction to rule66

Creating itemsets from state: 205

Processing state: 206State: 206, Saving reduction to rule67

Creating itemsets from state: 206

Processing state: 207State: 207, Saving reduction to rule65

Creating itemsets from state: 207

Processing state: 208State: 208, Saving reduction to rule70

Creating itemsets from state: 208

Processing state: 209State: 209, Saving reduction to rule61

Creating itemsets from state: 209

Processing state: 210State: 210, Saving reduction to rule68

Creating itemsets from state: 210

Processing state: 211State: 211, Saving reduction to rule69

Creating itemsets from state: 211

Processing state: 212State: 212, Saving reduction to rule63

Creating itemsets from state: 212

Processing state: 213
Creating itemsets from state: 213
State 288:
K  - [labeled_statement -> CASE constant_expression : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 214
Creating itemsets from state: 214
State 68 already created
State 289:
K  - [iteration_statement -> WHILE ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 215
Creating itemsets from state: 215
State 290:
K  - [jump_statement -> GOTO IDENTIFIER ;.]

Processing state: 216
Creating itemsets from state: 216
State 291:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;]

Processing state: 217
Creating itemsets from state: 217
State 68 already created
State 292:
K  - [selection_statement -> IF ( expression .) statement]
K  - [selection_statement -> IF ( expression .) statement ELSE]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 218
Creating itemsets from state: 218
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 293:
K  - [labeled_statement -> DEFAULT : statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 219
Creating itemsets from state: 219
State 68 already created
State 294:
K  - [selection_statement -> SWITCH ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 220State: 220, Saving reduction to rule207

Creating itemsets from state: 220

Processing state: 221State: 221, Saving reduction to rule208

Creating itemsets from state: 221

Processing state: 222
Creating itemsets from state: 222
State 198 already created
State 295:
K  - [jump_statement -> RETURN expression ;.]

Processing state: 223State: 223, Saving reduction to rule209

Creating itemsets from state: 223

Processing state: 224
Creating itemsets from state: 224
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 296:
K  - [iteration_statement -> FOR ( expression_statement .) statement]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 225State: 225, Saving reduction to rule196

Creating itemsets from state: 225

Processing state: 226State: 226, Saving reduction to rule188

Creating itemsets from state: 226

Processing state: 227
Creating itemsets from state: 227
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 113 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 225 already created
State 52 already created
State 297:
K  - [compound_statement -> block_start declaration_list statement_list block_end.]
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 228State: 228, Saving reduction to rule189

Creating itemsets from state: 228

Processing state: 229State: 229, Saving reduction to rule84

Creating itemsets from state: 229

Processing state: 230State: 230, Saving reduction to rule86

Creating itemsets from state: 230

Processing state: 231State: 231, Saving reduction to rule173

Creating itemsets from state: 231

Processing state: 232
Creating itemsets from state: 232
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 298:
K  - [initializer_list -> initializer.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 231 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 232 already created
State 299:
K  - [initializer -> { initializer_list .}]
K  - [initializer -> { initializer_list ., }]
K  - [initializer_list -> initializer_list ., initializer]

Processing state: 233State: 233, Saving reduction to rule215

Creating itemsets from state: 233

Processing state: 234
Creating itemsets from state: 234
State 1 already created
State 2 already created
State 3 already created
State 9 already created
State 10 already created
State 300:
K  - [struct_declarator_list -> struct_declarator.]
State 301:
K  - [struct_declarator -> declarator.]
K  - [struct_declarator -> declarator .: constant_expression]
State 302:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator]
State 303:
K  - [struct_declarator -> : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 235State: 235, Saving reduction to rule112

Creating itemsets from state: 235

Processing state: 236
Creating itemsets from state: 236
State 5 already created
State 304:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end.]
State 6 already created
State 234 already created
State 154 already created
State 305:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration.]
State 155 already created
State 14 already created
State 15 already created
State 16 already created
State 306:
K  - [struct_definition_end -> }.]
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 34 already created

Processing state: 237
Creating itemsets from state: 237
State 239 already created
State 307:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }.]

Processing state: 238
Creating itemsets from state: 238
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 308:
K  - [enumerator -> IDENTIFIER = constant_expression.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 239
Creating itemsets from state: 239
State 145 already created
State 309:
K  - [enumerator_list -> enumerator_list , enumerator.]

Processing state: 240State: 240, Saving reduction to rule124

Creating itemsets from state: 240

Processing state: 241
Creating itemsets from state: 241
State 310:
K  - [unary_expression -> SIZEOF ( type_name ).]

Processing state: 242State: 242, Saving reduction to rule3

Creating itemsets from state: 242

Processing state: 243State: 243, Saving reduction to rule142

Creating itemsets from state: 243
State 1 already created
State 190 already created
State 243 already created
State 276 already created
State 244 already created
State 193 already created
State 277 already created
State 196 already created

Processing state: 244State: 244, Saving reduction to rule161

Creating itemsets from state: 244
State 190 already created
State 243 already created
State 193 already created
State 278 already created

Processing state: 245State: 245, Saving reduction to rule160

Creating itemsets from state: 245

Processing state: 246State: 246, Saving reduction to rule115

Creating itemsets from state: 246

Processing state: 247State: 247, Saving reduction to rule117

Creating itemsets from state: 247

Processing state: 248
Creating itemsets from state: 248
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 88 already created
State 91 already created
State 92 already created
State 311:
K  - [cast_expression -> ( type_name ) cast_expression.]

Processing state: 249
Creating itemsets from state: 249
State 198 already created
State 312:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 250State: 250, Saving reduction to rule56

Creating itemsets from state: 250
State 164 already created

Processing state: 251State: 251, Saving reduction to rule48

Creating itemsets from state: 251
State 175 already created
State 176 already created

Processing state: 252State: 252, Saving reduction to rule50

Creating itemsets from state: 252
State 161 already created

Processing state: 253State: 253, Saving reduction to rule54

Creating itemsets from state: 253
State 165 already created

Processing state: 254State: 254, Saving reduction to rule52

Creating itemsets from state: 254
State 162 already created

Processing state: 255
Creating itemsets from state: 255
State 198 already created
State 313:
K  - [postfix_expression -> postfix_expression [ expression ].]

Processing state: 256State: 256, Saving reduction to rule6

Creating itemsets from state: 256

Processing state: 257State: 257, Saving reduction to rule13

Creating itemsets from state: 257

Processing state: 258
Creating itemsets from state: 258
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 315:
K  - [postfix_expression -> postfix_expression ( argument_expression_list ).]

Processing state: 259State: 259, Saving reduction to rule8

Creating itemsets from state: 259

Processing state: 260State: 260, Saving reduction to rule37

Creating itemsets from state: 260
State 177 already created
State 178 already created

Processing state: 261State: 261, Saving reduction to rule38

Creating itemsets from state: 261
State 177 already created
State 178 already created

Processing state: 262State: 262, Saving reduction to rule45

Creating itemsets from state: 262
State 179 already created
State 180 already created
State 181 already created
State 182 already created

Processing state: 263State: 263, Saving reduction to rule46

Creating itemsets from state: 263
State 179 already created
State 180 already created
State 181 already created
State 182 already created

Processing state: 264State: 264, Saving reduction to rule35

Creating itemsets from state: 264
State 183 already created
State 184 already created
State 185 already created

Processing state: 265State: 265, Saving reduction to rule34

Creating itemsets from state: 265
State 183 already created
State 184 already created
State 185 already created

Processing state: 266State: 266, Saving reduction to rule40

Creating itemsets from state: 266
State 173 already created
State 174 already created

Processing state: 267State: 267, Saving reduction to rule42

Creating itemsets from state: 267
State 173 already created
State 174 already created

Processing state: 268State: 268, Saving reduction to rule43

Creating itemsets from state: 268
State 173 already created
State 174 already created

Processing state: 269State: 269, Saving reduction to rule41

Creating itemsets from state: 269
State 173 already created
State 174 already created

Processing state: 270State: 270, Saving reduction to rule30

Creating itemsets from state: 270

Processing state: 271State: 271, Saving reduction to rule32

Creating itemsets from state: 271

Processing state: 272State: 272, Saving reduction to rule31

Creating itemsets from state: 272

Processing state: 273State: 273, Saving reduction to rule158

Creating itemsets from state: 273

Processing state: 274State: 274, Saving reduction to rule165

Creating itemsets from state: 274

Processing state: 275
Creating itemsets from state: 275
State 316:
K  - [direct_abstract_declarator -> [ constant_expression ].]

Processing state: 276State: 276, Saving reduction to rule169

Creating itemsets from state: 276

Processing state: 277
Creating itemsets from state: 277
State 317:
K  - [direct_abstract_declarator -> ( abstract_declarator ).]

Processing state: 278State: 278, Saving reduction to rule163

Creating itemsets from state: 278
State 280 already created
State 281 already created
State 282 already created

Processing state: 279
Creating itemsets from state: 279
State 186 already created
State 318:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end.]

Processing state: 280
Creating itemsets from state: 280
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 319:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ].]
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 320:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .]]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 281State: 281, Saving reduction to rule142

Creating itemsets from state: 281
State 321:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( ).]

Processing state: 282
Creating itemsets from state: 282
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 322:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 11 already created
State 103 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 104 already created
State 105 already created

Processing state: 283State: 283, Saving reduction to rule151

Creating itemsets from state: 283

Processing state: 284State: 284, Saving reduction to rule153

Creating itemsets from state: 284

Processing state: 285State: 285, Saving reduction to rule73

Creating itemsets from state: 285

Processing state: 286State: 286, Saving reduction to rule184

Creating itemsets from state: 286

Processing state: 287State: 287, Saving reduction to rule60

Creating itemsets from state: 287

Processing state: 288
Creating itemsets from state: 288
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 323:
K  - [labeled_statement -> CASE constant_expression : statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 289
Creating itemsets from state: 289
State 198 already created
State 324:
K  - [iteration_statement -> WHILE ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 290State: 290, Saving reduction to rule206

Creating itemsets from state: 290

Processing state: 291
Creating itemsets from state: 291
State 325:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 292
Creating itemsets from state: 292
State 198 already created
State 326:
K  - [selection_statement -> IF ( expression ) .statement]
K  - [selection_statement -> IF ( expression ) .statement ELSE]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 293State: 293, Saving reduction to rule186

Creating itemsets from state: 293

Processing state: 294
Creating itemsets from state: 294
State 198 already created
State 327:
K  - [selection_statement -> SWITCH ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 295State: 295, Saving reduction to rule210

Creating itemsets from state: 295

Processing state: 296
Creating itemsets from state: 296
State 68 already created
State 328:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 329:
K  - [iteration_statement -> FOR ( expression_statement ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 297State: 297, Saving reduction to rule190

Creating itemsets from state: 297

Processing state: 298State: 298, Saving reduction to rule176

Creating itemsets from state: 298

Processing state: 299
Creating itemsets from state: 299
State 330:
K  - [initializer -> { initializer_list , .}]
K  - [initializer_list -> initializer_list , .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 331:
K  - [initializer -> { initializer_list }.]

Processing state: 300State: 300, Saving reduction to rule119

Creating itemsets from state: 300

Processing state: 301State: 301, Saving reduction to rule121

Creating itemsets from state: 301
State 332:
K  - [struct_declarator -> declarator : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 302
Creating itemsets from state: 302
State 333:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 334:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;.]

Processing state: 303
Creating itemsets from state: 303
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 335:
K  - [struct_declarator -> : constant_expression.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 304State: 304, Saving reduction to rule104

Creating itemsets from state: 304

Processing state: 305State: 305, Saving reduction to rule113

Creating itemsets from state: 305

Processing state: 306State: 306, Saving reduction to rule109

Creating itemsets from state: 306

Processing state: 307State: 307, Saving reduction to rule125

Creating itemsets from state: 307

Processing state: 308State: 308, Saving reduction to rule130

Creating itemsets from state: 308

Processing state: 309State: 309, Saving reduction to rule128

Creating itemsets from state: 309

Processing state: 310State: 310, Saving reduction to rule20

Creating itemsets from state: 310

Processing state: 311State: 311, Saving reduction to rule28

Creating itemsets from state: 311

Processing state: 312
Creating itemsets from state: 312
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 336:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 313State: 313, Saving reduction to rule5

Creating itemsets from state: 313

Processing state: 314
Creating itemsets from state: 314
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 337:
K  - [argument_expression_list -> argument_expression_list , assignment_expression.]
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 315State: 315, Saving reduction to rule7

Creating itemsets from state: 315

Processing state: 316State: 316, Saving reduction to rule166

Creating itemsets from state: 316

Processing state: 317State: 317, Saving reduction to rule164

Creating itemsets from state: 317

Processing state: 318State: 318, Saving reduction to rule170

Creating itemsets from state: 318

Processing state: 319State: 319, Saving reduction to rule167

Creating itemsets from state: 319

Processing state: 320
Creating itemsets from state: 320
State 338:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ].]

Processing state: 321State: 321, Saving reduction to rule171

Creating itemsets from state: 321

Processing state: 322
Creating itemsets from state: 322
State 186 already created
State 339:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end.]

Processing state: 323State: 323, Saving reduction to rule185

Creating itemsets from state: 323

Processing state: 324
Creating itemsets from state: 324
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 340:
K  - [iteration_statement -> WHILE ( expression ) statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 325
Creating itemsets from state: 325
State 68 already created
State 341:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;]
K  - [expression -> expression ., assignment_expression]
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 326
Creating itemsets from state: 326
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 342:
K  - [selection_statement -> IF ( expression ) statement.]
K  - [selection_statement -> IF ( expression ) statement .ELSE]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 327
Creating itemsets from state: 327
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 343:
K  - [selection_statement -> SWITCH ( expression ) statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 328
Creating itemsets from state: 328
State 198 already created
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 329
Creating itemsets from state: 329
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 330
Creating itemsets from state: 330
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 346:
K  - [initializer_list -> initializer_list , initializer.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 231 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 347:
K  - [initializer -> { initializer_list , }.]
State 232 already created

Processing state: 331State: 331, Saving reduction to rule174

Creating itemsets from state: 331

Processing state: 332
Creating itemsets from state: 332
State 68 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 348:
K  - [struct_declarator -> declarator : constant_expression.]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created

Processing state: 333
Creating itemsets from state: 333
State 1 already created
State 2 already created
State 3 already created
State 9 already created
State 10 already created
State 349:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator.]
State 301 already created
State 303 already created

Processing state: 334State: 334, Saving reduction to rule114

Creating itemsets from state: 334

Processing state: 335State: 335, Saving reduction to rule122

Creating itemsets from state: 335

Processing state: 336State: 336, Saving reduction to rule58

Creating itemsets from state: 336

Processing state: 337State: 337, Saving reduction to rule14

Creating itemsets from state: 337

Processing state: 338State: 338, Saving reduction to rule168

Creating itemsets from state: 338

Processing state: 339State: 339, Saving reduction to rule172

Creating itemsets from state: 339

Processing state: 340State: 340, Saving reduction to rule202

Creating itemsets from state: 340

Processing state: 341
Creating itemsets from state: 341
State 198 already created
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;]

Processing state: 342State: 342, Saving reduction to rule199

Creating itemsets from state: 342
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE.]

Processing state: 343State: 343, Saving reduction to rule201

Creating itemsets from state: 343

Processing state: 344
Creating itemsets from state: 344
State 68 already created
State 107 already created
State 69 already created
State 70 already created
State 71 already created
State 72 already created
State 73 already created
State 74 already created
State 75 already created
State 76 already created
State 108 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 109 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 110 already created
State 90 already created
State 91 already created
State 111 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 112 already created
State 51 already created
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement.]
State 52 already created
State 130 already created
State 131 already created
State 132 already created
State 133 already created

Processing state: 345State: 345, Saving reduction to rule204

Creating itemsets from state: 345

Processing state: 346State: 346, Saving reduction to rule177

Creating itemsets from state: 346

Processing state: 347State: 347, Saving reduction to rule175

Creating itemsets from state: 347

Processing state: 348State: 348, Saving reduction to rule123

Creating itemsets from state: 348

Processing state: 349State: 349, Saving reduction to rule120

Creating itemsets from state: 349

Processing state: 350
Creating itemsets from state: 350
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;.]

Processing state: 351State: 351, Saving reduction to rule200

Creating itemsets from state: 351

Processing state: 352State: 352, Saving reduction to rule205

Creating itemsets from state: 352

Processing state: 353State: 353, Saving reduction to rule203

Creating itemsets from state: 353

LR(0) - State list:
State 0:
K  - [$start -> .translation_unit $eof]
NK - [translation_unit -> .external_declaration]
NK - [translation_unit -> .translation_unit external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 1:
K  - [pointer -> *.]
K  - [pointer -> * .type_qualifier_list]
K  - [pointer -> * .pointer]
K  - [pointer -> * .type_qualifier_list pointer]
NK - [type_qualifier_list -> .type_qualifier]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
State 2:
K  - [direct_declarator -> IDENTIFIER.]
State 3:
K  - [direct_declarator -> ( .declarator )]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 4:
K  - [declaration_specifiers -> storage_class_specifier.]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 5:
K  - [type_specifier -> enum_specifier.]
State 6:
K  - [type_specifier -> struct_or_union_specifier.]
State 7:
K  - [declaration_specifiers -> type_specifier.]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 8:
K  - [external_declaration -> declaration.]
State 9:
K  - [declarator -> pointer .direct_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 10:
K  - [declarator -> direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]
State 11:
K  - [declaration_specifiers -> type_qualifier.]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 12:
K  - [function_definition -> declarator .declaration_list compound_statement]
K  - [function_definition -> declarator .compound_statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 13:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers .declarator compound_statement]
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
State 14:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER]
NK - [struct_tag_opt -> .IDENTIFIER]
NK - [struct_tag_opt -> .]
State 15:
K  - [type_specifier -> UNSIGNED.]
State 16:
K  - [type_specifier -> SIGNED.]
State 17:
K  - [enum_specifier -> ENUM .{ enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER]
State 18:
K  - [type_qualifier -> CONST.]
State 19:
K  - [struct_or_union -> STRUCT.]
State 20:
K  - [struct_or_union -> UNION.]
State 21:
K  - [type_specifier -> TYPE_NAME.]
State 22:
K  - [type_specifier -> LONG.]
State 23:
K  - [storage_class_specifier -> STATIC.]
State 24:
K  - [storage_class_specifier -> REGISTER.]
State 25:
K  - [type_specifier -> VOID.]
State 26:
K  - [type_specifier -> SHORT.]
State 27:
K  - [type_specifier -> INT.]
State 28:
K  - [type_specifier -> CHAR.]
State 29:
K  - [type_specifier -> FLOAT.]
State 30:
K  - [type_specifier -> DOUBLE.]
State 31:
K  - [storage_class_specifier -> EXTERN.]
State 32:
K  - [storage_class_specifier -> AUTO.]
State 33:
K  - [storage_class_specifier -> TYPEDEF.]
State 34:
K  - [type_qualifier -> VOLATILE.]
State 35:
K  - [external_declaration -> function_definition.]
State 36:
K  - [$start -> translation_unit .$eof]
K  - [translation_unit -> translation_unit .external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 37:
K  - [translation_unit -> external_declaration.]
State 38:
K  - [pointer -> * pointer.]
State 39:
K  - [type_qualifier_list -> type_qualifier.]
State 40:
K  - [pointer -> * type_qualifier_list.]
K  - [pointer -> * type_qualifier_list .pointer]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
State 41:
K  - [direct_declarator -> ( declarator .)]
State 42:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers.]
State 43:
K  - [declaration_specifiers -> type_specifier declaration_specifiers.]
State 44:
K  - [declarator -> pointer direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]
State 45:
K  - [direct_declarator -> direct_declarator [ .constant_expression ]]
K  - [direct_declarator -> direct_declarator [ .]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 46:
K  - [direct_declarator -> direct_declarator ( .)]
K  - [parameter_list_start -> (.]
State 47:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [identifier_list -> .IDENTIFIER]
NK - [identifier_list -> .identifier_list , IDENTIFIER]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 48:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers.]
State 49:
K  - [declaration_list -> declaration.]
State 50:
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 51:
K  - [block_start -> {.]
State 52:
K  - [compound_statement -> block_start .block_end]
K  - [compound_statement -> block_start .statement_list block_end]
K  - [compound_statement -> block_start .declaration_list block_end]
K  - [compound_statement -> block_start .declaration_list statement_list block_end]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 53:
K  - [function_definition -> declarator compound_statement.]
State 54:
K  - [function_definition -> declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 55:
K  - [declaration -> declaration_specifiers init_declarator_list .;]
K  - [init_declarator_list -> init_declarator_list ., init_declarator]
State 56:
K  - [init_declarator_list -> init_declarator.]
State 57:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers declarator .compound_statement]
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 58:
K  - [declaration -> declaration_specifiers ;.]
State 59:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER.]
K  - [struct_tag_opt -> IDENTIFIER.]
State 60:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_definition_start -> .{]
State 61:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }]
K  - [enum_specifier -> ENUM IDENTIFIER.]
State 62:
K  - [enum_specifier -> ENUM { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 63:
K  - [$start -> translation_unit $eof.]
State 64:
K  - [translation_unit -> translation_unit external_declaration.]
State 65:
K  - [pointer -> * type_qualifier_list pointer.]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier.]
State 67:
K  - [direct_declarator -> ( declarator ).]
State 68:
K  - [postfix_expression -> primary_expression.]
State 69:
K  - [unary_operator -> !.]
State 70:
K  - [unary_operator -> ~.]
State 71:
K  - [unary_operator -> -.]
State 72:
K  - [unary_operator -> +.]
State 73:
K  - [unary_operator -> *.]
State 74:
K  - [unary_expression -> SIZEOF .unary_expression]
K  - [unary_expression -> SIZEOF .( type_name )]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 75:
K  - [unary_operator -> &.]
State 76:
K  - [unary_expression -> DEC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 77:
K  - [direct_declarator -> direct_declarator [ ].]
State 78:
K  - [primary_expression -> IDENTIFIER.]
State 79:
K  - [primary_expression -> STRING_LITERAL.]
State 80:
K  - [cast_expression -> ( .type_name ) cast_expression]
K  - [primary_expression -> ( .expression )]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81:
K  - [primary_expression -> CONSTANT.]
State 82:
K  - [unary_expression -> INC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 83:
K  - [conditional_expression -> logical_or_expression.]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression]
State 84:
K  - [constant_expression -> conditional_expression.]
State 85:
K  - [direct_declarator -> direct_declarator [ constant_expression .]]
State 86:
K  - [exclusive_or_expression -> and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 87:
K  - [inclusive_or_expression -> exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 88:
K  - [unary_expression -> unary_operator .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 89:
K  - [logical_or_expression -> logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 90:
K  - [logical_and_expression -> inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 91:
K  - [unary_expression -> postfix_expression.]
K  - [postfix_expression -> postfix_expression .[ expression ]]
K  - [postfix_expression -> postfix_expression .( )]
K  - [postfix_expression -> postfix_expression .( argument_expression_list )]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER]
K  - [postfix_expression -> postfix_expression .INC_OP]
K  - [postfix_expression -> postfix_expression .DEC_OP]
NK - [struct_member_accessor -> ..]
NK - [struct_member_accessor -> .PTR_OP]
State 92:
K  - [cast_expression -> unary_expression.]
State 93:
K  - [multiplicative_expression -> cast_expression.]
State 94:
K  - [relational_expression -> shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 95:
K  - [and_expression -> equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 96:
K  - [shift_expression -> additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 97:
K  - [equality_expression -> relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 98:
K  - [additive_expression -> multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 99:
K  - [direct_declarator -> direct_declarator ( ).]
State 100:
K  - [identifier_list -> IDENTIFIER.]
State 101:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 102:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end]
K  - [identifier_list -> identifier_list ., IDENTIFIER]
NK - [parameter_list_end -> .)]
State 103:
K  - [parameter_declaration -> declaration_specifiers .declarator]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator]
K  - [parameter_declaration -> declaration_specifiers.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 104:
K  - [parameter_list -> parameter_declaration.]
State 105:
K  - [parameter_type_list -> parameter_list.]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS]
K  - [parameter_list -> parameter_list ., parameter_declaration]
State 106:
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
State 107:
K  - [expression_statement -> expression .;]
K  - [expression -> expression ., assignment_expression]
State 108:
K  - [labeled_statement -> IDENTIFIER .: statement]
K  - [primary_expression -> IDENTIFIER.]
State 109:
K  - [assignment_expression -> conditional_expression.]
State 110:
K  - [expression -> assignment_expression.]
State 111:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression]
K  - [cast_expression -> unary_expression.]
NK - [assignment_operator -> .=]
NK - [assignment_operator -> .MUL_ASSIGN]
NK - [assignment_operator -> .DIV_ASSIGN]
NK - [assignment_operator -> .MOD_ASSIGN]
NK - [assignment_operator -> .ADD_ASSIGN]
NK - [assignment_operator -> .SUB_ASSIGN]
NK - [assignment_operator -> .LEFT_ASSIGN]
NK - [assignment_operator -> .RIGHT_ASSIGN]
NK - [assignment_operator -> .AND_ASSIGN]
NK - [assignment_operator -> .XOR_ASSIGN]
NK - [assignment_operator -> .OR_ASSIGN]
State 112:
K  - [expression_statement -> ;.]
State 113:
K  - [block_end -> }.]
State 114:
K  - [labeled_statement -> CASE .constant_expression : statement]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 115:
K  - [iteration_statement -> WHILE .( expression ) statement]
State 116:
K  - [jump_statement -> GOTO .IDENTIFIER ;]
State 117:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 118:
K  - [selection_statement -> IF .( expression ) statement]
K  - [selection_statement -> IF .( expression ) statement ELSE]
State 119:
K  - [labeled_statement -> DEFAULT .: statement]
State 120:
K  - [selection_statement -> SWITCH .( expression ) statement]
State 121:
K  - [jump_statement -> CONTINUE .;]
State 122:
K  - [jump_statement -> BREAK .;]
State 123:
K  - [jump_statement -> RETURN .;]
K  - [jump_statement -> RETURN .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement]
State 125:
K  - [statement -> expression_statement.]
State 126:
K  - [statement -> iteration_statement.]
State 127:
K  - [statement_list -> statement.]
State 128:
K  - [compound_statement -> block_start statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 129:
K  - [compound_statement -> block_start block_end.]
State 130:
K  - [statement -> compound_statement.]
State 131:
K  - [statement -> jump_statement.]
State 132:
K  - [statement -> selection_statement.]
State 133:
K  - [statement -> labeled_statement.]
State 134:
K  - [compound_statement -> block_start declaration_list .block_end]
K  - [compound_statement -> block_start declaration_list .statement_list block_end]
K  - [declaration_list -> declaration_list .declaration]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 135:
K  - [declaration_list -> declaration_list declaration.]
State 136:
K  - [function_definition -> declarator declaration_list compound_statement.]
State 137:
K  - [init_declarator_list -> init_declarator_list , .init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 138:
K  - [declaration -> declaration_specifiers init_declarator_list ;.]
State 139:
K  - [init_declarator -> declarator = .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 140:
K  - [function_definition -> declaration_specifiers declarator compound_statement.]
State 141:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 142:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end]
NK - [struct_declaration_list -> .struct_declaration]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 143:
K  - [struct_definition_start -> {.]
State 144:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 145:
K  - [enumerator -> IDENTIFIER.]
K  - [enumerator -> IDENTIFIER .= constant_expression]
State 146:
K  - [enum_specifier -> ENUM { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 147:
K  - [enumerator_list -> enumerator.]
State 148:
K  - [unary_expression -> SIZEOF ( .type_name )]
K  - [primary_expression -> ( .expression )]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 149:
K  - [unary_expression -> SIZEOF unary_expression.]
State 150:
K  - [primary_expression -> ( .expression )]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 151:
K  - [unary_expression -> DEC_OP unary_expression.]
State 152:
K  - [primary_expression -> ( expression .)]
K  - [expression -> expression ., assignment_expression]
State 153:
K  - [type_name -> specifier_qualifier_list.]
K  - [type_name -> specifier_qualifier_list .abstract_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 154:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_specifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 155:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_qualifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 156:
K  - [cast_expression -> ( type_name .) cast_expression]
State 157:
K  - [unary_expression -> INC_OP unary_expression.]
State 158:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 159:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 160:
K  - [direct_declarator -> direct_declarator [ constant_expression ].]
State 161:
K  - [and_expression -> and_expression & .equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 162:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 163:
K  - [unary_expression -> unary_operator cast_expression.]
State 164:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 165:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 166:
K  - [postfix_expression -> postfix_expression DEC_OP.]
State 167:
K  - [postfix_expression -> postfix_expression [ .expression ]]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 168:
K  - [struct_member_accessor -> ..]
State 169:
K  - [struct_member_accessor -> PTR_OP.]
State 170:
K  - [postfix_expression -> postfix_expression ( .)]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list )]
NK - [argument_expression_list -> .assignment_expression]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 171:
K  - [postfix_expression -> postfix_expression INC_OP.]
State 172:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER]
State 173:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 174:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 175:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 176:
K  - [equality_expression -> equality_expression NE_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 177:
K  - [additive_expression -> additive_expression - .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 178:
K  - [additive_expression -> additive_expression + .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 179:
K  - [relational_expression -> relational_expression < .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 180:
K  - [relational_expression -> relational_expression LE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 181:
K  - [relational_expression -> relational_expression GE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 182:
K  - [relational_expression -> relational_expression > .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 183:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 184:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 185:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 186:
K  - [parameter_list_end -> ).]
State 187:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end.]
State 188:
K  - [identifier_list -> identifier_list , .IDENTIFIER]
State 189:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end.]
State 190:
K  - [direct_abstract_declarator -> [ .]]
K  - [direct_abstract_declarator -> [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 191:
K  - [direct_declarator -> ( .declarator )]
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 192:
K  - [declarator -> pointer .direct_declarator]
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 193:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 194:
K  - [parameter_declaration -> declaration_specifiers declarator.]
State 195:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator.]
State 196:
K  - [abstract_declarator -> direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 197:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS]
K  - [parameter_list -> parameter_list , .parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 198:
K  - [expression -> expression , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 199:
K  - [expression_statement -> expression ;.]
State 200:
K  - [labeled_statement -> IDENTIFIER : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 201:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 202:
K  - [assignment_operator -> OR_ASSIGN.]
State 203:
K  - [assignment_operator -> MOD_ASSIGN.]
State 204:
K  - [assignment_operator -> MUL_ASSIGN.]
State 205:
K  - [assignment_operator -> SUB_ASSIGN.]
State 206:
K  - [assignment_operator -> LEFT_ASSIGN.]
State 207:
K  - [assignment_operator -> ADD_ASSIGN.]
State 208:
K  - [assignment_operator -> XOR_ASSIGN.]
State 209:
K  - [assignment_operator -> =.]
State 210:
K  - [assignment_operator -> RIGHT_ASSIGN.]
State 211:
K  - [assignment_operator -> AND_ASSIGN.]
State 212:
K  - [assignment_operator -> DIV_ASSIGN.]
State 213:
K  - [labeled_statement -> CASE constant_expression .: statement]
State 214:
K  - [iteration_statement -> WHILE ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 215:
K  - [jump_statement -> GOTO IDENTIFIER .;]
State 216:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;]
State 217:
K  - [selection_statement -> IF ( .expression ) statement]
K  - [selection_statement -> IF ( .expression ) statement ELSE]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 218:
K  - [labeled_statement -> DEFAULT : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 219:
K  - [selection_statement -> SWITCH ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 220:
K  - [jump_statement -> CONTINUE ;.]
State 221:
K  - [jump_statement -> BREAK ;.]
State 222:
K  - [jump_statement -> RETURN expression .;]
K  - [expression -> expression ., assignment_expression]
State 223:
K  - [jump_statement -> RETURN ;.]
State 224:
K  - [iteration_statement -> FOR ( .expression_statement ) statement]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 225:
K  - [statement_list -> statement_list statement.]
State 226:
K  - [compound_statement -> block_start statement_list block_end.]
State 227:
K  - [compound_statement -> block_start declaration_list statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 228:
K  - [compound_statement -> block_start declaration_list block_end.]
State 229:
K  - [init_declarator_list -> init_declarator_list , init_declarator.]
State 230:
K  - [init_declarator -> declarator = initializer.]
State 231:
K  - [initializer -> assignment_expression.]
State 232:
K  - [initializer -> { .initializer_list }]
K  - [initializer -> { .initializer_list , }]
NK - [initializer_list -> .initializer]
NK - [initializer_list -> .initializer_list , initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 233:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement.]
State 234:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;]
NK - [struct_declarator_list -> .struct_declarator]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 235:
K  - [struct_declaration_list -> struct_declaration.]
State 236:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration]
NK - [struct_definition_end -> .}]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 237:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 238:
K  - [enumerator -> IDENTIFIER = .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 239:
K  - [enumerator_list -> enumerator_list , .enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 240:
K  - [enum_specifier -> ENUM { enumerator_list }.]
State 241:
K  - [unary_expression -> SIZEOF ( type_name .)]
State 242:
K  - [primary_expression -> ( expression ).]
State 243:
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 244:
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 245:
K  - [type_name -> specifier_qualifier_list abstract_declarator.]
State 246:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list.]
State 247:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list.]
State 248:
K  - [cast_expression -> ( type_name ) .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 249:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression]
K  - [expression -> expression ., assignment_expression]
State 250:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 251:
K  - [and_expression -> and_expression & equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 252:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 253:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 254:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 255:
K  - [postfix_expression -> postfix_expression [ expression .]]
K  - [expression -> expression ., assignment_expression]
State 256:
K  - [postfix_expression -> postfix_expression ( ).]
State 257:
K  - [argument_expression_list -> assignment_expression.]
State 258:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .)]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression]
State 259:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER.]
State 260:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 261:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 262:
K  - [equality_expression -> equality_expression EQ_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 263:
K  - [equality_expression -> equality_expression NE_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 264:
K  - [additive_expression -> additive_expression - multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 265:
K  - [additive_expression -> additive_expression + multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 266:
K  - [relational_expression -> relational_expression < shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 267:
K  - [relational_expression -> relational_expression LE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 268:
K  - [relational_expression -> relational_expression GE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 269:
K  - [relational_expression -> relational_expression > shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 270:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression.]
State 271:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression.]
State 272:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression.]
State 273:
K  - [identifier_list -> identifier_list , IDENTIFIER.]
State 274:
K  - [direct_abstract_declarator -> [ ].]
State 275:
K  - [direct_abstract_declarator -> [ constant_expression .]]
State 276:
K  - [direct_abstract_declarator -> ( ).]
State 277:
K  - [direct_abstract_declarator -> ( abstract_declarator .)]
State 278:
K  - [abstract_declarator -> pointer direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 279:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 280:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .]]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 281:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .)]
K  - [parameter_list_start -> (.]
State 282:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 283:
K  - [parameter_type_list -> parameter_list , ELLIPSIS.]
State 284:
K  - [parameter_list -> parameter_list , parameter_declaration.]
State 285:
K  - [expression -> expression , assignment_expression.]
State 286:
K  - [labeled_statement -> IDENTIFIER : statement.]
State 287:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression.]
State 288:
K  - [labeled_statement -> CASE constant_expression : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 289:
K  - [iteration_statement -> WHILE ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 290:
K  - [jump_statement -> GOTO IDENTIFIER ;.]
State 291:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;]
State 292:
K  - [selection_statement -> IF ( expression .) statement]
K  - [selection_statement -> IF ( expression .) statement ELSE]
K  - [expression -> expression ., assignment_expression]
State 293:
K  - [labeled_statement -> DEFAULT : statement.]
State 294:
K  - [selection_statement -> SWITCH ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 295:
K  - [jump_statement -> RETURN expression ;.]
State 296:
K  - [iteration_statement -> FOR ( expression_statement .) statement]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 297:
K  - [compound_statement -> block_start declaration_list statement_list block_end.]
State 298:
K  - [initializer_list -> initializer.]
State 299:
K  - [initializer -> { initializer_list .}]
K  - [initializer -> { initializer_list ., }]
K  - [initializer_list -> initializer_list ., initializer]
State 300:
K  - [struct_declarator_list -> struct_declarator.]
State 301:
K  - [struct_declarator -> declarator.]
K  - [struct_declarator -> declarator .: constant_expression]
State 302:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator]
State 303:
K  - [struct_declarator -> : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 304:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end.]
State 305:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration.]
State 306:
K  - [struct_definition_end -> }.]
State 307:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }.]
State 308:
K  - [enumerator -> IDENTIFIER = constant_expression.]
State 309:
K  - [enumerator_list -> enumerator_list , enumerator.]
State 310:
K  - [unary_expression -> SIZEOF ( type_name ).]
State 311:
K  - [cast_expression -> ( type_name ) cast_expression.]
State 312:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 313:
K  - [postfix_expression -> postfix_expression [ expression ].]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 315:
K  - [postfix_expression -> postfix_expression ( argument_expression_list ).]
State 316:
K  - [direct_abstract_declarator -> [ constant_expression ].]
State 317:
K  - [direct_abstract_declarator -> ( abstract_declarator ).]
State 318:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end.]
State 319:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ].]
State 320:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .]]
State 321:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( ).]
State 322:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 323:
K  - [labeled_statement -> CASE constant_expression : statement.]
State 324:
K  - [iteration_statement -> WHILE ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 325:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 326:
K  - [selection_statement -> IF ( expression ) .statement]
K  - [selection_statement -> IF ( expression ) .statement ELSE]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 327:
K  - [selection_statement -> SWITCH ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 328:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 329:
K  - [iteration_statement -> FOR ( expression_statement ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 330:
K  - [initializer -> { initializer_list , .}]
K  - [initializer_list -> initializer_list , .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 331:
K  - [initializer -> { initializer_list }.]
State 332:
K  - [struct_declarator -> declarator : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 333:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 334:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;.]
State 335:
K  - [struct_declarator -> : constant_expression.]
State 336:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression.]
State 337:
K  - [argument_expression_list -> argument_expression_list , assignment_expression.]
State 338:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ].]
State 339:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end.]
State 340:
K  - [iteration_statement -> WHILE ( expression ) statement.]
State 341:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;]
K  - [expression -> expression ., assignment_expression]
State 342:
K  - [selection_statement -> IF ( expression ) statement.]
K  - [selection_statement -> IF ( expression ) statement .ELSE]
State 343:
K  - [selection_statement -> SWITCH ( expression ) statement.]
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement.]
State 346:
K  - [initializer_list -> initializer_list , initializer.]
State 347:
K  - [initializer -> { initializer_list , }.]
State 348:
K  - [struct_declarator -> declarator : constant_expression.]
State 349:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator.]
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;]
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE.]
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement.]
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;.]

Nullable sets:
nullable(primary_expression) = false
nullable(expression) = false
nullable(postfix_expression) = false
nullable(argument_expression_list) = false
nullable(struct_member_accessor) = false
nullable(assignment_expression) = false
nullable(unary_expression) = false
nullable(unary_operator) = false
nullable(cast_expression) = false
nullable(type_name) = false
nullable(multiplicative_expression) = false
nullable(additive_expression) = false
nullable(shift_expression) = false
nullable(relational_expression) = false
nullable(equality_expression) = false
nullable(and_expression) = false
nullable(exclusive_or_expression) = false
nullable(inclusive_or_expression) = false
nullable(logical_and_expression) = false
nullable(logical_or_expression) = false
nullable(conditional_expression) = false
nullable(assignment_operator) = false
nullable(constant_expression) = false
nullable(declaration) = false
nullable(declaration_specifiers) = false
nullable(init_declarator_list) = false
nullable(storage_class_specifier) = false
nullable(type_specifier) = false
nullable(type_qualifier) = false
nullable(init_declarator) = false
nullable(declarator) = false
nullable(initializer) = false
nullable(struct_or_union_specifier) = false
nullable(enum_specifier) = false
nullable(struct_or_union) = false
nullable(struct_tag_opt) = true
nullable(struct_definition_start) = false
nullable(struct_declaration_list) = false
nullable(struct_definition_end) = false
nullable(struct_declaration) = false
nullable(specifier_qualifier_list) = false
nullable(struct_declarator_list) = false
nullable(struct_declarator) = false
nullable(enumerator_list) = false
nullable(enumerator) = false
nullable(pointer) = false
nullable(direct_declarator) = false
nullable(parameter_list_start) = false
nullable(parameter_type_list) = false
nullable(parameter_list_end) = false
nullable(identifier_list) = false
nullable(type_qualifier_list) = false
nullable(parameter_list) = false
nullable(parameter_declaration) = false
nullable(abstract_declarator) = false
nullable(direct_abstract_declarator) = false
nullable(initializer_list) = false
nullable(statement) = false
nullable(labeled_statement) = false
nullable(compound_statement) = false
nullable(expression_statement) = false
nullable(selection_statement) = false
nullable(iteration_statement) = false
nullable(jump_statement) = false
nullable(block_start) = false
nullable(block_end) = false
nullable(statement_list) = false
nullable(declaration_list) = false
nullable(translation_unit) = false
nullable(external_declaration) = false
nullable(function_definition) = false
nullable($start) = false

FIRST sets:
FIRST($eof) = {$eof}
FIRST(primary_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(}
FIRST(IDENTIFIER) = {IDENTIFIER}
FIRST(CONSTANT) = {CONSTANT}
FIRST(STRING_LITERAL) = {STRING_LITERAL}
FIRST(() = {(}
FIRST(expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST()) = {)}
FIRST(postfix_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(}
FIRST([) = {[}
FIRST(]) = {]}
FIRST(argument_expression_list) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(struct_member_accessor) = {.,PTR_OP}
FIRST(INC_OP) = {INC_OP}
FIRST(DEC_OP) = {DEC_OP}
FIRST(.) = {.}
FIRST(PTR_OP) = {PTR_OP}
FIRST(assignment_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(,) = {,}
FIRST(unary_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(unary_operator) = {&,*,+,-,~,!}
FIRST(cast_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(SIZEOF) = {SIZEOF}
FIRST(type_name) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(&) = {&}
FIRST(*) = {*}
FIRST(+) = {+}
FIRST(-) = {-}
FIRST(~) = {~}
FIRST(!) = {!}
FIRST(multiplicative_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(/) = {/}
FIRST(%) = {%}
FIRST(additive_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(shift_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(LEFT_OP) = {LEFT_OP}
FIRST(RIGHT_OP) = {RIGHT_OP}
FIRST(relational_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(<) = {<}
FIRST(>) = {>}
FIRST(LE_OP) = {LE_OP}
FIRST(GE_OP) = {GE_OP}
FIRST(equality_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(EQ_OP) = {EQ_OP}
FIRST(NE_OP) = {NE_OP}
FIRST(and_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(exclusive_or_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(^) = {^}
FIRST(inclusive_or_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(|) = {|}
FIRST(logical_and_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(AND_OP) = {AND_OP}
FIRST(logical_or_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(OR_OP) = {OR_OP}
FIRST(conditional_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(?) = {?}
FIRST(:) = {:}
FIRST(assignment_operator) = {=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN}
FIRST(=) = {=}
FIRST(MUL_ASSIGN) = {MUL_ASSIGN}
FIRST(DIV_ASSIGN) = {DIV_ASSIGN}
FIRST(MOD_ASSIGN) = {MOD_ASSIGN}
FIRST(ADD_ASSIGN) = {ADD_ASSIGN}
FIRST(SUB_ASSIGN) = {SUB_ASSIGN}
FIRST(LEFT_ASSIGN) = {LEFT_ASSIGN}
FIRST(RIGHT_ASSIGN) = {RIGHT_ASSIGN}
FIRST(AND_ASSIGN) = {AND_ASSIGN}
FIRST(XOR_ASSIGN) = {XOR_ASSIGN}
FIRST(OR_ASSIGN) = {OR_ASSIGN}
FIRST(constant_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(declaration_specifiers) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(;) = {;}
FIRST(init_declarator_list) = {*,IDENTIFIER,(}
FIRST(storage_class_specifier) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER}
FIRST(type_specifier) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,ENUM,STRUCT,UNION}
FIRST(type_qualifier) = {CONST,VOLATILE}
FIRST(init_declarator) = {*,IDENTIFIER,(}
FIRST(declarator) = {*,IDENTIFIER,(}
FIRST(initializer) = {{,IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(TYPEDEF) = {TYPEDEF}
FIRST(EXTERN) = {EXTERN}
FIRST(STATIC) = {STATIC}
FIRST(AUTO) = {AUTO}
FIRST(REGISTER) = {REGISTER}
FIRST(VOID) = {VOID}
FIRST(CHAR) = {CHAR}
FIRST(SHORT) = {SHORT}
FIRST(INT) = {INT}
FIRST(LONG) = {LONG}
FIRST(FLOAT) = {FLOAT}
FIRST(DOUBLE) = {DOUBLE}
FIRST(SIGNED) = {SIGNED}
FIRST(UNSIGNED) = {UNSIGNED}
FIRST(struct_or_union_specifier) = {STRUCT,UNION}
FIRST(enum_specifier) = {ENUM}
FIRST(TYPE_NAME) = {TYPE_NAME}
FIRST(struct_or_union) = {STRUCT,UNION}
FIRST(struct_tag_opt) = {IDENTIFIER}
FIRST(struct_definition_start) = {{}
FIRST(struct_declaration_list) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(struct_definition_end) = {}}
FIRST({) = {{}
FIRST(}) = {}}
FIRST(STRUCT) = {STRUCT}
FIRST(UNION) = {UNION}
FIRST(struct_declaration) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(specifier_qualifier_list) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(struct_declarator_list) = {:,*,IDENTIFIER,(}
FIRST(struct_declarator) = {:,*,IDENTIFIER,(}
FIRST(ENUM) = {ENUM}
FIRST(enumerator_list) = {IDENTIFIER}
FIRST(enumerator) = {IDENTIFIER}
FIRST(CONST) = {CONST}
FIRST(VOLATILE) = {VOLATILE}
FIRST(pointer) = {*}
FIRST(direct_declarator) = {IDENTIFIER,(}
FIRST(parameter_list_start) = {(}
FIRST(parameter_type_list) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(parameter_list_end) = {)}
FIRST(identifier_list) = {IDENTIFIER}
FIRST(type_qualifier_list) = {CONST,VOLATILE}
FIRST(parameter_list) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(ELLIPSIS) = {ELLIPSIS}
FIRST(parameter_declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(abstract_declarator) = {*,(,[}
FIRST(direct_abstract_declarator) = {(,[}
FIRST(initializer_list) = {{,IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(statement) = {IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(labeled_statement) = {IDENTIFIER,CASE,DEFAULT}
FIRST(compound_statement) = {{}
FIRST(expression_statement) = {;,IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(selection_statement) = {IF,SWITCH}
FIRST(iteration_statement) = {WHILE,DO,FOR}
FIRST(jump_statement) = {GOTO,CONTINUE,BREAK,RETURN}
FIRST(CASE) = {CASE}
FIRST(DEFAULT) = {DEFAULT}
FIRST(block_start) = {{}
FIRST(block_end) = {}}
FIRST(statement_list) = {IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FIRST(declaration_list) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FIRST(IF) = {IF}
FIRST(ELSE) = {ELSE}
FIRST(SWITCH) = {SWITCH}
FIRST(WHILE) = {WHILE}
FIRST(DO) = {DO}
FIRST(FOR) = {FOR}
FIRST(GOTO) = {GOTO}
FIRST(CONTINUE) = {CONTINUE}
FIRST(BREAK) = {BREAK}
FIRST(RETURN) = {RETURN}
FIRST(translation_unit) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION}
FIRST(external_declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION}
FIRST(function_definition) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION}
FIRST($start) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION}

FOLLOW sets:
FOLLOW(primary_expression) = {[,(,.,PTR_OP,INC_OP,DEC_OP,=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(expression) = {),,,],:,;}
FOLLOW(postfix_expression) = {[,(,.,PTR_OP,INC_OP,DEC_OP,=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(argument_expression_list) = {),,}
FOLLOW(struct_member_accessor) = {IDENTIFIER}
FOLLOW(assignment_expression) = {),,,;,],:,}}
FOLLOW(unary_expression) = {=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(unary_operator) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(cast_expression) = {=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(type_name) = {)}
FOLLOW(multiplicative_expression) = {*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(additive_expression) = {+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(shift_expression) = {LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(relational_expression) = {<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(equality_expression) = {EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(and_expression) = {&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(exclusive_or_expression) = {^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(inclusive_or_expression) = {|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(logical_and_expression) = {AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(logical_or_expression) = {OR_OP,),,,?,;,],:,}}
FOLLOW(conditional_expression) = {),,,;,],:,}}
FOLLOW(assignment_operator) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(constant_expression) = {;,,,},],:}
FOLLOW(declaration) = {},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,$eof}
FOLLOW(declaration_specifiers) = {;,*,IDENTIFIER,(,[,),,}
FOLLOW(init_declarator_list) = {;,,}
FOLLOW(storage_class_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,[,),,}
FOLLOW(type_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,),[,:,,}
FOLLOW(type_qualifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,),[,:,,}
FOLLOW(init_declarator) = {;,,}
FOLLOW(declarator) = {;,,,=,:,),TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,{}
FOLLOW(initializer) = {;,,,}}
FOLLOW(struct_or_union_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,),[,:,,}
FOLLOW(enum_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,),[,:,,}
FOLLOW(struct_or_union) = {IDENTIFIER}
FOLLOW(struct_tag_opt) = {{}
FOLLOW(struct_definition_start) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FOLLOW(struct_declaration_list) = {},VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FOLLOW(struct_definition_end) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,),[,:,,}
FOLLOW(struct_declaration) = {},VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FOLLOW(specifier_qualifier_list) = {),*,(,[,:,IDENTIFIER}
FOLLOW(struct_declarator_list) = {;,,}
FOLLOW(struct_declarator) = {;,,}
FOLLOW(enumerator_list) = {},,}
FOLLOW(enumerator) = {},,}
FOLLOW(pointer) = {IDENTIFIER,(,),,,[}
FOLLOW(direct_declarator) = {;,,,=,[,(,:,),TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,{}
FOLLOW(parameter_list_start) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,IDENTIFIER}
FOLLOW(parameter_type_list) = {)}
FOLLOW(parameter_list_end) = {;,,,=,[,(,),:,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION,{}
FOLLOW(identifier_list) = {),,}
FOLLOW(type_qualifier_list) = {IDENTIFIER,(,*,CONST,VOLATILE,),,,[}
FOLLOW(parameter_list) = {),,}
FOLLOW(parameter_declaration) = {),,}
FOLLOW(abstract_declarator) = {),,}
FOLLOW(direct_abstract_declarator) = {),,,[,(}
FOLLOW(initializer_list) = {},,}
FOLLOW(statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(labeled_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(compound_statement) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION,ELSE,WHILE,},CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,INC_OP,DEC_OP,SIZEOF,&,+,-,~,!,$eof}
FOLLOW(expression_statement) = {),IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!,ELSE,WHILE,},CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{}
FOLLOW(selection_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(iteration_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(jump_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(block_start) = {},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FOLLOW(block_end) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION,ELSE,WHILE,},CASE,DEFAULT,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,INC_OP,DEC_OP,SIZEOF,&,+,-,~,!,$eof}
FOLLOW(statement_list) = {},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!}
FOLLOW(declaration_list) = {},IDENTIFIER,CASE,DEFAULT,;,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,{,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,SIZEOF,&,*,+,-,~,!,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,ENUM,STRUCT,UNION}
FOLLOW(translation_unit) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION,$eof}
FOLLOW(external_declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION,$eof}
FOLLOW(function_definition) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ENUM,STRUCT,UNION,$eof}
FOLLOW($start) = {$eof}


State 0:
K  - [$start -> .translation_unit $eof, $eof]
NK - [translation_unit -> .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [translation_unit -> .translation_unit external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 1:
K  - [pointer -> *., IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .pointer, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier_list -> .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 2:
K  - [direct_declarator -> IDENTIFIER., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 3:
K  - [direct_declarator -> ( .declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
State 4:
K  - [declaration_specifiers -> storage_class_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 5:
K  - [type_specifier -> enum_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 6:
K  - [type_specifier -> struct_or_union_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 7:
K  - [declaration_specifiers -> type_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 8:
K  - [external_declaration -> declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 9:
K  - [declarator -> pointer .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/;/=/,/:]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
State 10:
K  - [declarator -> direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/IDENTIFIER]
State 11:
K  - [declaration_specifiers -> type_qualifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 12:
K  - [function_definition -> declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [function_definition -> declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 13:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [function_definition -> declaration_specifiers .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration -> declaration_specifiers .;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/;/=/,]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/;/=/,]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
State 14:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [struct_tag_opt -> .IDENTIFIER, {]
NK - [struct_tag_opt -> ., {]
State 15:
K  - [type_specifier -> UNSIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 16:
K  - [type_specifier -> SIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 17:
K  - [enum_specifier -> ENUM .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 18:
K  - [type_qualifier -> CONST., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 19:
K  - [struct_or_union -> STRUCT., IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 20:
K  - [struct_or_union -> UNION., IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 21:
K  - [type_specifier -> TYPE_NAME., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 22:
K  - [type_specifier -> LONG., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 23:
K  - [storage_class_specifier -> STATIC., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 24:
K  - [storage_class_specifier -> REGISTER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 25:
K  - [type_specifier -> VOID., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 26:
K  - [type_specifier -> SHORT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 27:
K  - [type_specifier -> INT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 28:
K  - [type_specifier -> CHAR., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 29:
K  - [type_specifier -> FLOAT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 30:
K  - [type_specifier -> DOUBLE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 31:
K  - [storage_class_specifier -> EXTERN., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 32:
K  - [storage_class_specifier -> AUTO., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 33:
K  - [storage_class_specifier -> TYPEDEF., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 34:
K  - [type_qualifier -> VOLATILE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 35:
K  - [external_declaration -> function_definition., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 36:
K  - [$start -> translation_unit .$eof, $eof]
K  - [translation_unit -> translation_unit .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 37:
K  - [translation_unit -> external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 38:
K  - [pointer -> * pointer., IDENTIFIER/(/)/,/[]
State 39:
K  - [type_qualifier_list -> type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 40:
K  - [pointer -> * type_qualifier_list., IDENTIFIER/(/)/,/[]
K  - [pointer -> * type_qualifier_list .pointer, IDENTIFIER/(/)/,/[]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 41:
K  - [direct_declarator -> ( declarator .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/,/;/=/:]
State 42:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 43:
K  - [declaration_specifiers -> type_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 44:
K  - [declarator -> pointer direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/,/;/=/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/IDENTIFIER]
State 45:
K  - [direct_declarator -> direct_declarator [ .constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator [ .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 46:
K  - [direct_declarator -> direct_declarator ( .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/IDENTIFIER]
State 47:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [identifier_list -> .IDENTIFIER, )/,]
NK - [identifier_list -> .identifier_list , IDENTIFIER, )/,]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 48:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 49:
K  - [declaration_list -> declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 50:
K  - [declaration -> declaration_specifiers .;, {/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, {/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/=/,]
NK - [declarator -> .direct_declarator, ;/=/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/=/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/=/[/(/,]
State 51:
K  - [block_start -> {., }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 52:
K  - [compound_statement -> block_start .block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start .statement_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start .declaration_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start .declaration_list statement_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_end -> .}, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration_list -> .declaration, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration_list declaration, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 53:
K  - [function_definition -> declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 54:
K  - [function_definition -> declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 55:
K  - [declaration -> declaration_specifiers init_declarator_list .;, $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION/}/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/SIZEOF/&/+/-/~/!]
K  - [init_declarator_list -> init_declarator_list ., init_declarator, ;/,]
State 56:
K  - [init_declarator_list -> init_declarator., ;/,]
State 57:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [function_definition -> declaration_specifiers declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 58:
K  - [declaration -> declaration_specifiers ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION/}/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/SIZEOF/&/+/-/~/!]
State 59:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [struct_tag_opt -> IDENTIFIER., {]
State 60:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [struct_definition_start -> .{, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 61:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enum_specifier -> ENUM IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 62:
K  - [enum_specifier -> ENUM { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 63:
K  - [$start -> translation_unit $eof., $eof]
State 64:
K  - [translation_unit -> translation_unit external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 65:
K  - [pointer -> * type_qualifier_list pointer., IDENTIFIER/(/)/,/[]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 67:
K  - [direct_declarator -> ( declarator )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/,/;/=/:]
State 68:
K  - [postfix_expression -> primary_expression., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 69:
K  - [unary_operator -> !., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 70:
K  - [unary_operator -> ~., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 71:
K  - [unary_operator -> -., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 72:
K  - [unary_operator -> +., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 73:
K  - [unary_operator -> *., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 74:
K  - [unary_expression -> SIZEOF .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [unary_expression -> SIZEOF .( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 75:
K  - [unary_operator -> &., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 76:
K  - [unary_expression -> DEC_OP .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 77:
K  - [direct_declarator -> direct_declarator [ ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 78:
K  - [primary_expression -> IDENTIFIER., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 79:
K  - [primary_expression -> STRING_LITERAL., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 80:
K  - [cast_expression -> ( .type_name ) cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [primary_expression -> ( .expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 81:
K  - [primary_expression -> CONSTANT., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 82:
K  - [unary_expression -> INC_OP .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 83:
K  - [conditional_expression -> logical_or_expression., ]/;/)/:/,/}]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression, ]/;/)/:/,/}]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression, ]/?/OR_OP/;/)/:/,/}]
State 84:
K  - [constant_expression -> conditional_expression., ]/:/}/;/,]
State 85:
K  - [direct_declarator -> direct_declarator [ constant_expression .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 86:
K  - [exclusive_or_expression -> and_expression., ]/?/^/;/)/:/OR_OP/AND_OP/|/,/}]
K  - [and_expression -> and_expression .& equality_expression, ]/?/&/;/)/:/OR_OP/AND_OP/|/,/}/^]
State 87:
K  - [inclusive_or_expression -> exclusive_or_expression., ]/?/|/;/)/:/OR_OP/AND_OP/,/}]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ]/?/^/;/)/:/OR_OP/AND_OP/,/}/|]
State 88:
K  - [unary_expression -> unary_operator .cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 89:
K  - [logical_or_expression -> logical_and_expression., ]/?/OR_OP/;/)/:/,/}]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ]/?/AND_OP/;/)/:/,/}/OR_OP]
State 90:
K  - [logical_and_expression -> inclusive_or_expression., ]/?/AND_OP/;/)/:/OR_OP/,/}]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ]/?/|/;/)/:/OR_OP/,/}/AND_OP]
State 91:
K  - [unary_expression -> postfix_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [postfix_expression -> postfix_expression .[ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
NK - [struct_member_accessor -> .., IDENTIFIER]
NK - [struct_member_accessor -> .PTR_OP, IDENTIFIER]
State 92:
K  - [cast_expression -> unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 93:
K  - [multiplicative_expression -> cast_expression., ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/,/}]
State 94:
K  - [relational_expression -> shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}/</>/LE_OP/GE_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}/</>/LE_OP/GE_OP]
State 95:
K  - [and_expression -> equality_expression., ]/?/&/;/)/:/OR_OP/^/AND_OP/|/,/}]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/;/)/:/OR_OP/^/AND_OP/|/,/}/&]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ]/?/EQ_OP/NE_OP/;/)/:/OR_OP/^/AND_OP/|/,/}/&]
State 96:
K  - [shift_expression -> additive_expression., ]/?/LEFT_OP/RIGHT_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ]/?/+/-/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/LEFT_OP/RIGHT_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ]/?/+/-/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/LEFT_OP/RIGHT_OP]
State 97:
K  - [equality_expression -> relational_expression., ]/?/EQ_OP/NE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .< shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
State 98:
K  - [additive_expression -> multiplicative_expression., ]/?/+/-/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/+/-]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/+/-]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/+/-]
State 99:
K  - [direct_declarator -> direct_declarator ( )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 100:
K  - [identifier_list -> IDENTIFIER., )/,]
State 101:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 102:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [identifier_list -> identifier_list ., IDENTIFIER, )/,]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 103:
K  - [parameter_declaration -> declaration_specifiers .declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers., )/,]
NK - [declarator -> .pointer direct_declarator, )/,]
NK - [declarator -> .direct_declarator, )/,]
NK - [abstract_declarator -> .pointer, )/,]
NK - [abstract_declarator -> .direct_abstract_declarator, )/,]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )/,]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 104:
K  - [parameter_list -> parameter_declaration., )/,]
State 105:
K  - [parameter_type_list -> parameter_list., )]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS, )]
K  - [parameter_list -> parameter_list ., parameter_declaration, )/,]
State 106:
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
State 107:
K  - [expression_statement -> expression .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/)/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 108:
K  - [labeled_statement -> IDENTIFIER .: statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [primary_expression -> IDENTIFIER., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 109:
K  - [assignment_expression -> conditional_expression., ;/)/:/]/,/}]
State 110:
K  - [expression -> assignment_expression., ;/,/)/:/]]
State 111:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression, ;/)/:/]/,/}]
K  - [cast_expression -> unary_expression., ;/?/)/:/]/,/}/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [assignment_operator -> .=, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .MUL_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .DIV_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .MOD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .ADD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .SUB_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .LEFT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .RIGHT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .AND_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .XOR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .OR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 112:
K  - [expression_statement -> ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/)/ELSE]
State 113:
K  - [block_end -> }., $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 114:
K  - [labeled_statement -> CASE .constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [constant_expression -> .conditional_expression, :]
NK - [conditional_expression -> .logical_or_expression, :]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 115:
K  - [iteration_statement -> WHILE .( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 116:
K  - [jump_statement -> GOTO .IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 117:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, WHILE]
NK - [statement -> .compound_statement, WHILE]
NK - [statement -> .expression_statement, WHILE]
NK - [statement -> .selection_statement, WHILE]
NK - [statement -> .iteration_statement, WHILE]
NK - [statement -> .jump_statement, WHILE]
NK - [labeled_statement -> .IDENTIFIER : statement, WHILE]
NK - [labeled_statement -> .CASE constant_expression : statement, WHILE]
NK - [labeled_statement -> .DEFAULT : statement, WHILE]
NK - [compound_statement -> .block_start block_end, WHILE]
NK - [compound_statement -> .block_start statement_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, WHILE]
NK - [expression_statement -> .;, WHILE]
NK - [expression_statement -> .expression ;, WHILE]
NK - [selection_statement -> .IF ( expression ) statement, WHILE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, WHILE]
NK - [selection_statement -> .SWITCH ( expression ) statement, WHILE]
NK - [iteration_statement -> .WHILE ( expression ) statement, WHILE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, WHILE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, WHILE]
NK - [jump_statement -> .CONTINUE ;, WHILE]
NK - [jump_statement -> .BREAK ;, WHILE]
NK - [jump_statement -> .RETURN ;, WHILE]
NK - [jump_statement -> .RETURN expression ;, WHILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 118:
K  - [selection_statement -> IF .( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [selection_statement -> IF .( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 119:
K  - [labeled_statement -> DEFAULT .: statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 120:
K  - [selection_statement -> SWITCH .( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 121:
K  - [jump_statement -> CONTINUE .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 122:
K  - [jump_statement -> BREAK .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 123:
K  - [jump_statement -> RETURN .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [jump_statement -> RETURN .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 125:
K  - [statement -> expression_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 126:
K  - [statement -> iteration_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 127:
K  - [statement_list -> statement., }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 128:
K  - [compound_statement -> block_start statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 129:
K  - [compound_statement -> block_start block_end., $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 130:
K  - [statement -> compound_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 131:
K  - [statement -> jump_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 132:
K  - [statement -> selection_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 133:
K  - [statement -> labeled_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 134:
K  - [compound_statement -> block_start declaration_list .block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start declaration_list .statement_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [declaration_list -> declaration_list .declaration, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_end -> .}, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 135:
K  - [declaration_list -> declaration_list declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 136:
K  - [function_definition -> declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 137:
K  - [init_declarator_list -> init_declarator_list , .init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/=]
NK - [declarator -> .direct_declarator, ;/,/=]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/=/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/=/[/(]
State 138:
K  - [declaration -> declaration_specifiers init_declarator_list ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION/}/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/SIZEOF/&/+/-/~/!]
State 139:
K  - [init_declarator -> declarator = .initializer, ;/,]
NK - [initializer -> .assignment_expression, ;/,]
NK - [initializer -> .{ initializer_list }, ;/,]
NK - [initializer -> .{ initializer_list , }, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 140:
K  - [function_definition -> declaration_specifiers declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 141:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 142:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
NK - [struct_declaration_list -> .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_specifier, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier, :/*/IDENTIFIER/(]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
State 143:
K  - [struct_definition_start -> {., VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 144:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 145:
K  - [enumerator -> IDENTIFIER., }/,]
K  - [enumerator -> IDENTIFIER .= constant_expression, }/,]
State 146:
K  - [enum_specifier -> ENUM { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 147:
K  - [enumerator_list -> enumerator., }/,]
State 148:
K  - [unary_expression -> SIZEOF ( .type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [primary_expression -> ( .expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 149:
K  - [unary_expression -> SIZEOF unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 150:
K  - [primary_expression -> ( .expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 151:
K  - [unary_expression -> DEC_OP unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 152:
K  - [primary_expression -> ( expression .), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
K  - [expression -> expression ., assignment_expression, )/,]
State 153:
K  - [type_name -> specifier_qualifier_list., )]
K  - [type_name -> specifier_qualifier_list .abstract_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 154:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
K  - [specifier_qualifier_list -> type_specifier., )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
State 155:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
K  - [specifier_qualifier_list -> type_qualifier., )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
State 156:
K  - [cast_expression -> ( type_name .) cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 157:
K  - [unary_expression -> INC_OP unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 158:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression, ]/;/)/:/,/}]
NK - [expression -> .assignment_expression, :/,]
NK - [expression -> .expression , assignment_expression, :/,]
NK - [assignment_expression -> .conditional_expression, :/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, :/,]
NK - [conditional_expression -> .logical_or_expression, :/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 159:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression, ]/?/OR_OP/;/)/:/,/}]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/OR_OP/;/)/AND_OP/:/,/}]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/OR_OP/;/)/AND_OP/:/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/OR_OP/;/)/|/AND_OP/:/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/OR_OP/;/)/|/AND_OP/:/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/?/OR_OP/;/)/^/|/AND_OP/:/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/OR_OP/;/)/^/|/AND_OP/:/,/}]
NK - [and_expression -> .equality_expression, ]/?/OR_OP/;/)/&/^/|/AND_OP/:/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/OR_OP/;/)/&/^/|/AND_OP/:/,/}]
NK - [equality_expression -> .relational_expression, ]/?/OR_OP/;/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/OR_OP/;/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/OR_OP/;/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [shift_expression -> .additive_expression, ]/?/OR_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/OR_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/OR_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/OR_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/OR_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/OR_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [cast_expression -> .unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [primary_expression -> .( expression ), ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
State 160:
K  - [direct_declarator -> direct_declarator [ constant_expression ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 161:
K  - [and_expression -> and_expression & .equality_expression, ]/?/&/;/)/^/:/OR_OP/AND_OP/|/,/}]
NK - [equality_expression -> .relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/&/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/&/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/&/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/&/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/&/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/&/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
State 162:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression, ]/?/^/;/)/|/:/OR_OP/AND_OP/,/}]
NK - [and_expression -> .equality_expression, ]/?/^/;/)/&/|/:/OR_OP/AND_OP/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/^/;/)/&/|/:/OR_OP/AND_OP/,/}]
NK - [equality_expression -> .relational_expression, ]/?/^/;/)/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/^/;/)/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/^/;/)/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [shift_expression -> .additive_expression, ]/?/^/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/^/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/^/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/^/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/^/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/^/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
State 163:
K  - [unary_expression -> unary_operator cast_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 164:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression, ]/?/AND_OP/;/)/OR_OP/:/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/AND_OP/;/)/|/OR_OP/:/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/AND_OP/;/)/|/OR_OP/:/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/?/AND_OP/;/)/^/|/OR_OP/:/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/AND_OP/;/)/^/|/OR_OP/:/,/}]
NK - [and_expression -> .equality_expression, ]/?/AND_OP/;/)/&/^/|/OR_OP/:/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/AND_OP/;/)/&/^/|/OR_OP/:/,/}]
NK - [equality_expression -> .relational_expression, ]/?/AND_OP/;/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/AND_OP/;/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/AND_OP/;/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [shift_expression -> .additive_expression, ]/?/AND_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/AND_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/AND_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/AND_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/AND_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/AND_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [cast_expression -> .unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [primary_expression -> .( expression ), ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
State 165:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression, ]/?/|/;/)/AND_OP/:/OR_OP/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/?/|/;/)/^/AND_OP/:/OR_OP/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/|/;/)/^/AND_OP/:/OR_OP/,/}]
NK - [and_expression -> .equality_expression, ]/?/|/;/)/&/^/AND_OP/:/OR_OP/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/|/;/)/&/^/AND_OP/:/OR_OP/,/}]
NK - [equality_expression -> .relational_expression, ]/?/|/;/)/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/|/;/)/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/|/;/)/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [shift_expression -> .additive_expression, ]/?/|/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/|/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/|/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/|/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/|/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/|/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
State 166:
K  - [postfix_expression -> postfix_expression DEC_OP., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 167:
K  - [postfix_expression -> postfix_expression [ .expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
NK - [expression -> .assignment_expression, ]/,]
NK - [expression -> .expression , assignment_expression, ]/,]
NK - [assignment_expression -> .conditional_expression, ]/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 168:
K  - [struct_member_accessor -> .., IDENTIFIER]
State 169:
K  - [struct_member_accessor -> PTR_OP., IDENTIFIER]
State 170:
K  - [postfix_expression -> postfix_expression ( .), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
NK - [argument_expression_list -> .assignment_expression, )/,]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 171:
K  - [postfix_expression -> postfix_expression INC_OP., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 172:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 173:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 174:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 175:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression, ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 176:
K  - [equality_expression -> equality_expression NE_OP .relational_expression, ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 177:
K  - [additive_expression -> additive_expression - .multiplicative_expression, ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 178:
K  - [additive_expression -> additive_expression + .multiplicative_expression, ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 179:
K  - [relational_expression -> relational_expression < .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 180:
K  - [relational_expression -> relational_expression LE_OP .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 181:
K  - [relational_expression -> relational_expression GE_OP .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 182:
K  - [relational_expression -> relational_expression > .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 183:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 184:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 185:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 186:
K  - [parameter_list_end -> )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/,/;/=/:]
State 187:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 188:
K  - [identifier_list -> identifier_list , .IDENTIFIER, )/,]
State 189:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 190:
K  - [direct_abstract_declarator -> [ .], )/,/[/(]
K  - [direct_abstract_declarator -> [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 191:
K  - [direct_declarator -> ( .declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/[]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 192:
K  - [declarator -> pointer .direct_declarator, )/,]
K  - [abstract_declarator -> pointer., )/,]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )/,]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 193:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 194:
K  - [parameter_declaration -> declaration_specifiers declarator., )/,]
State 195:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator., )/,]
State 196:
K  - [abstract_declarator -> direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 197:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS, )]
K  - [parameter_list -> parameter_list , .parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 198:
K  - [expression -> expression , .assignment_expression, ;/,/)/:/]]
NK - [assignment_expression -> .conditional_expression, ;/,/)/:/]]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,/)/:/]]
NK - [conditional_expression -> .logical_or_expression, ;/,/)/:/]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,/)/:/]]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [logical_or_expression -> .logical_and_expression, ;/,/)/?/OR_OP/:/]]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/,/)/?/OR_OP/:/]]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/,/)/?/AND_OP/OR_OP/:/]]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/,/)/?/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/,/)/?/|/AND_OP/OR_OP/:/]]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/,/)/?/|/AND_OP/OR_OP/:/]]
NK - [exclusive_or_expression -> .and_expression, ;/,/)/?/^/|/AND_OP/OR_OP/:/]]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/,/)/?/^/|/AND_OP/OR_OP/:/]]
NK - [and_expression -> .equality_expression, ;/,/)/?/&/^/|/AND_OP/OR_OP/:/]]
NK - [and_expression -> .and_expression & equality_expression, ;/,/)/?/&/^/|/AND_OP/OR_OP/:/]]
NK - [equality_expression -> .relational_expression, ;/,/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/,/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/,/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression < shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression > shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [shift_expression -> .additive_expression, ;/,/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/,/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/,/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [additive_expression -> .multiplicative_expression, ;/,/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/,/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/,/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [cast_expression -> .unary_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [cast_expression -> .( type_name ) cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
State 199:
K  - [expression_statement -> expression ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/)/ELSE]
State 200:
K  - [labeled_statement -> IDENTIFIER : .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 201:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression, ;/)/:/]/,/}]
NK - [assignment_expression -> .conditional_expression, ;/)/:/]/,/}]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/)/:/]/,/}]
NK - [conditional_expression -> .logical_or_expression, ;/)/:/]/,/}]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/)/:/]/,/}]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [logical_or_expression -> .logical_and_expression, ;/)/?/OR_OP/:/]/,/}]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/)/?/OR_OP/:/]/,/}]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/)/?/AND_OP/OR_OP/:/]/,/}]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/)/?/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/:/]/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/:/]/,/}]
NK - [exclusive_or_expression -> .and_expression, ;/)/?/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/)/?/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [and_expression -> .equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [and_expression -> .and_expression & equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [equality_expression -> .relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [shift_expression -> .additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [additive_expression -> .multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [cast_expression -> .unary_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
State 202:
K  - [assignment_operator -> OR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 203:
K  - [assignment_operator -> MOD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 204:
K  - [assignment_operator -> MUL_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 205:
K  - [assignment_operator -> SUB_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 206:
K  - [assignment_operator -> LEFT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 207:
K  - [assignment_operator -> ADD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 208:
K  - [assignment_operator -> XOR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 209:
K  - [assignment_operator -> =., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 210:
K  - [assignment_operator -> RIGHT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 211:
K  - [assignment_operator -> AND_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 212:
K  - [assignment_operator -> DIV_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 213:
K  - [labeled_statement -> CASE constant_expression .: statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 214:
K  - [iteration_statement -> WHILE ( .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 215:
K  - [jump_statement -> GOTO IDENTIFIER .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 216:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 217:
K  - [selection_statement -> IF ( .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [selection_statement -> IF ( .expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 218:
K  - [labeled_statement -> DEFAULT : .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 219:
K  - [selection_statement -> SWITCH ( .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 220:
K  - [jump_statement -> CONTINUE ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 221:
K  - [jump_statement -> BREAK ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 222:
K  - [jump_statement -> RETURN expression .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 223:
K  - [jump_statement -> RETURN ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 224:
K  - [iteration_statement -> FOR ( .expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 225:
K  - [statement_list -> statement_list statement., }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 226:
K  - [compound_statement -> block_start statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 227:
K  - [compound_statement -> block_start declaration_list statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 228:
K  - [compound_statement -> block_start declaration_list block_end., $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 229:
K  - [init_declarator_list -> init_declarator_list , init_declarator., ;/,]
State 230:
K  - [init_declarator -> declarator = initializer., ;/,]
State 231:
K  - [initializer -> assignment_expression., ;/}/,]
State 232:
K  - [initializer -> { .initializer_list }, ;/}/,]
K  - [initializer -> { .initializer_list , }, ;/}/,]
NK - [initializer_list -> .initializer, }/,]
NK - [initializer_list -> .initializer_list , initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 233:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 234:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_declarator_list -> .struct_declarator, ;/,]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/:/,]
NK - [declarator -> .direct_declarator, ;/:/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/:/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/:/[/(/,]
State 235:
K  - [struct_declaration_list -> struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 236:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_definition_end -> .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_specifier, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier, :/*/IDENTIFIER/(]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
State 237:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 238:
K  - [enumerator -> IDENTIFIER = .constant_expression, }/,]
NK - [constant_expression -> .conditional_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [logical_or_expression -> .logical_and_expression, }/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 239:
K  - [enumerator_list -> enumerator_list , .enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 240:
K  - [enum_specifier -> ENUM { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 241:
K  - [unary_expression -> SIZEOF ( type_name .), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 242:
K  - [primary_expression -> ( expression )., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 243:
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/[/(]
K  - [direct_abstract_declarator -> ( .), )/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 244:
K  - [abstract_declarator -> pointer., )]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 245:
K  - [type_name -> specifier_qualifier_list abstract_declarator., )]
State 246:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list., )/*/(/[/:/IDENTIFIER]
State 247:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list., )/*/(/[/:/IDENTIFIER]
State 248:
K  - [cast_expression -> ( type_name ) .cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 249:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression, ]/;/)/:/,/}]
K  - [expression -> expression ., assignment_expression, :/,]
State 250:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression., ]/?/OR_OP/;/)/:/,/}]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ]/?/OR_OP/;/)/AND_OP/:/,/}]
State 251:
K  - [and_expression -> and_expression & equality_expression., ]/?/&/;/)/^/:/OR_OP/AND_OP/|/,/}]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
State 252:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression., ]/?/^/;/)/|/:/OR_OP/AND_OP/,/}]
K  - [and_expression -> and_expression .& equality_expression, ]/?/^/;/)/&/|/:/OR_OP/AND_OP/,/}]
State 253:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression., ]/?/AND_OP/;/)/OR_OP/:/,/}]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ]/?/AND_OP/;/)/|/OR_OP/:/,/}]
State 254:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression., ]/?/|/;/)/AND_OP/:/OR_OP/,/}]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ]/?/|/;/)/^/AND_OP/:/OR_OP/,/}]
State 255:
K  - [postfix_expression -> postfix_expression [ expression .], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [expression -> expression ., assignment_expression, ]/,]
State 256:
K  - [postfix_expression -> postfix_expression ( )., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 257:
K  - [argument_expression_list -> assignment_expression., )/,]
State 258:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression, )/,]
State 259:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 260:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression., ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 261:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression., ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 262:
K  - [equality_expression -> equality_expression EQ_OP relational_expression., ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .< shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .> shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 263:
K  - [equality_expression -> equality_expression NE_OP relational_expression., ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .< shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .> shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 264:
K  - [additive_expression -> additive_expression - multiplicative_expression., ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 265:
K  - [additive_expression -> additive_expression + multiplicative_expression., ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 266:
K  - [relational_expression -> relational_expression < shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 267:
K  - [relational_expression -> relational_expression LE_OP shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 268:
K  - [relational_expression -> relational_expression GE_OP shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 269:
K  - [relational_expression -> relational_expression > shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 270:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression., ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 271:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression., ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 272:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression., ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 273:
K  - [identifier_list -> identifier_list , IDENTIFIER., )/,]
State 274:
K  - [direct_abstract_declarator -> [ ]., )/,/[/(]
State 275:
K  - [direct_abstract_declarator -> [ constant_expression .], )/,/[/(]
State 276:
K  - [direct_abstract_declarator -> ( )., )/,/[/(]
State 277:
K  - [direct_abstract_declarator -> ( abstract_declarator .), )/,/[/(]
State 278:
K  - [abstract_declarator -> pointer direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 279:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 280:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 281:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 282:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 283:
K  - [parameter_type_list -> parameter_list , ELLIPSIS., )]
State 284:
K  - [parameter_list -> parameter_list , parameter_declaration., )/,]
State 285:
K  - [expression -> expression , assignment_expression., ;/,/)/:/]]
State 286:
K  - [labeled_statement -> IDENTIFIER : statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 287:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression., ;/)/:/]/,/}]
State 288:
K  - [labeled_statement -> CASE constant_expression : .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 289:
K  - [iteration_statement -> WHILE ( expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 290:
K  - [jump_statement -> GOTO IDENTIFIER ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 291:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 292:
K  - [selection_statement -> IF ( expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [selection_statement -> IF ( expression .) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 293:
K  - [labeled_statement -> DEFAULT : statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 294:
K  - [selection_statement -> SWITCH ( expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 295:
K  - [jump_statement -> RETURN expression ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 296:
K  - [iteration_statement -> FOR ( expression_statement .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 297:
K  - [compound_statement -> block_start declaration_list statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 298:
K  - [initializer_list -> initializer., }/,]
State 299:
K  - [initializer -> { initializer_list .}, ;/}/,]
K  - [initializer -> { initializer_list ., }, ;/}/,]
K  - [initializer_list -> initializer_list ., initializer, }/,]
State 300:
K  - [struct_declarator_list -> struct_declarator., ;/,]
State 301:
K  - [struct_declarator -> declarator., ;/,]
K  - [struct_declarator -> declarator .: constant_expression, ;/,]
State 302:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator, ;/,]
State 303:
K  - [struct_declarator -> : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 304:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
State 305:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 306:
K  - [struct_definition_end -> }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
State 307:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 308:
K  - [enumerator -> IDENTIFIER = constant_expression., }/,]
State 309:
K  - [enumerator_list -> enumerator_list , enumerator., }/,]
State 310:
K  - [unary_expression -> SIZEOF ( type_name )., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 311:
K  - [cast_expression -> ( type_name ) cast_expression., ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 312:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression, ]/;/)/:/,/}]
NK - [conditional_expression -> .logical_or_expression, ]/;/)/:/,/}]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]/;/)/:/,/}]
NK - [logical_or_expression -> .logical_and_expression, ]/;/)/:/?/OR_OP/,/}]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/;/)/:/?/OR_OP/,/}]
NK - [logical_and_expression -> .inclusive_or_expression, ]/;/)/:/?/AND_OP/OR_OP/,/}]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/;/)/:/?/AND_OP/OR_OP/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/;/)/:/?/|/AND_OP/OR_OP/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/;/)/:/?/|/AND_OP/OR_OP/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/;/)/:/?/^/|/AND_OP/OR_OP/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/;/)/:/?/^/|/AND_OP/OR_OP/,/}]
NK - [and_expression -> .equality_expression, ]/;/)/:/?/&/^/|/AND_OP/OR_OP/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/;/)/:/?/&/^/|/AND_OP/OR_OP/,/}]
NK - [equality_expression -> .relational_expression, ]/;/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/;/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/;/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [shift_expression -> .additive_expression, ]/;/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/;/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/;/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/;/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/;/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/;/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [primary_expression -> .( expression ), ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
State 313:
K  - [postfix_expression -> postfix_expression [ expression ]., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, )/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 315:
K  - [postfix_expression -> postfix_expression ( argument_expression_list )., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 316:
K  - [direct_abstract_declarator -> [ constant_expression ]., )/,/[/(]
State 317:
K  - [direct_abstract_declarator -> ( abstract_declarator )., )/,/[/(]
State 318:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 319:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ]., )/,/[/(]
State 320:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .], )/,/[/(]
State 321:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( )., )/,/[/(]
State 322:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 323:
K  - [labeled_statement -> CASE constant_expression : statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 324:
K  - [iteration_statement -> WHILE ( expression ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 325:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 326:
K  - [selection_statement -> IF ( expression ) .statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
K  - [selection_statement -> IF ( expression ) .statement ELSE, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .labeled_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 327:
K  - [selection_statement -> SWITCH ( expression ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 328:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 329:
K  - [iteration_statement -> FOR ( expression_statement ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 330:
K  - [initializer -> { initializer_list , .}, ;/}/,]
K  - [initializer_list -> initializer_list , .initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 331:
K  - [initializer -> { initializer_list }., ;/}/,]
State 332:
K  - [struct_declarator -> declarator : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 333:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/:]
NK - [declarator -> .direct_declarator, ;/,/:]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/:/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/:/[/(]
State 334:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 335:
K  - [struct_declarator -> : constant_expression., ;/,]
State 336:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression., ]/;/)/:/,/}]
State 337:
K  - [argument_expression_list -> argument_expression_list , assignment_expression., )/,]
State 338:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]., )/,/[/(]
State 339:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 340:
K  - [iteration_statement -> WHILE ( expression ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 341:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 342:
K  - [selection_statement -> IF ( expression ) statement., }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
K  - [selection_statement -> IF ( expression ) statement .ELSE, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 343:
K  - [selection_statement -> SWITCH ( expression ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 346:
K  - [initializer_list -> initializer_list , initializer., }/,]
State 347:
K  - [initializer -> { initializer_list , }., ;/}/,]
State 348:
K  - [struct_declarator -> declarator : constant_expression., ;/,]
State 349:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator., ;/,]
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE., }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
LALR(1) - State list:
State 0:
K  - [$start -> .translation_unit $eof, $eof]
NK - [translation_unit -> .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [translation_unit -> .translation_unit external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 1:
K  - [pointer -> *., IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .pointer, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier_list -> .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 2:
K  - [direct_declarator -> IDENTIFIER., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 3:
K  - [direct_declarator -> ( .declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
State 4:
K  - [declaration_specifiers -> storage_class_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 5:
K  - [type_specifier -> enum_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 6:
K  - [type_specifier -> struct_or_union_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 7:
K  - [declaration_specifiers -> type_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 8:
K  - [external_declaration -> declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 9:
K  - [declarator -> pointer .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/;/=/,/:]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/;/=/,/:]
State 10:
K  - [declarator -> direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/IDENTIFIER]
State 11:
K  - [declaration_specifiers -> type_qualifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 12:
K  - [function_definition -> declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [function_definition -> declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 13:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [function_definition -> declaration_specifiers .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration -> declaration_specifiers .;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/;/=/,]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/;/=/,]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/;/=/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
State 14:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [struct_tag_opt -> .IDENTIFIER, {]
NK - [struct_tag_opt -> ., {]
State 15:
K  - [type_specifier -> UNSIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 16:
K  - [type_specifier -> SIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 17:
K  - [enum_specifier -> ENUM .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 18:
K  - [type_qualifier -> CONST., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 19:
K  - [struct_or_union -> STRUCT., IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 20:
K  - [struct_or_union -> UNION., IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 21:
K  - [type_specifier -> TYPE_NAME., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 22:
K  - [type_specifier -> LONG., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 23:
K  - [storage_class_specifier -> STATIC., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 24:
K  - [storage_class_specifier -> REGISTER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 25:
K  - [type_specifier -> VOID., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 26:
K  - [type_specifier -> SHORT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 27:
K  - [type_specifier -> INT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 28:
K  - [type_specifier -> CHAR., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 29:
K  - [type_specifier -> FLOAT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 30:
K  - [type_specifier -> DOUBLE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 31:
K  - [storage_class_specifier -> EXTERN., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 32:
K  - [storage_class_specifier -> AUTO., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 33:
K  - [storage_class_specifier -> TYPEDEF., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,]
State 34:
K  - [type_qualifier -> VOLATILE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 35:
K  - [external_declaration -> function_definition., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 36:
K  - [$start -> translation_unit .$eof, $eof]
K  - [translation_unit -> translation_unit .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 37:
K  - [translation_unit -> external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 38:
K  - [pointer -> * pointer., IDENTIFIER/(/)/,/[]
State 39:
K  - [type_qualifier_list -> type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 40:
K  - [pointer -> * type_qualifier_list., IDENTIFIER/(/)/,/[]
K  - [pointer -> * type_qualifier_list .pointer, IDENTIFIER/(/)/,/[]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 41:
K  - [direct_declarator -> ( declarator .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/,/;/=/:]
State 42:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 43:
K  - [declaration_specifiers -> type_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 44:
K  - [declarator -> pointer direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/,/;/=/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/)/[/(/,/;/=/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/IDENTIFIER]
State 45:
K  - [direct_declarator -> direct_declarator [ .constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator [ .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 46:
K  - [direct_declarator -> direct_declarator ( .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/IDENTIFIER]
State 47:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [identifier_list -> .IDENTIFIER, )/,]
NK - [identifier_list -> .identifier_list , IDENTIFIER, )/,]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 48:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 49:
K  - [declaration_list -> declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 50:
K  - [declaration -> declaration_specifiers .;, {/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, {/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/=/,]
NK - [declarator -> .direct_declarator, ;/=/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/=/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/=/[/(/,]
State 51:
K  - [block_start -> {., }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 52:
K  - [compound_statement -> block_start .block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start .statement_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start .declaration_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start .declaration_list statement_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_end -> .}, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration_list -> .declaration, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration_list declaration, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 53:
K  - [function_definition -> declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 54:
K  - [function_definition -> declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 55:
K  - [declaration -> declaration_specifiers init_declarator_list .;, $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION/}/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/SIZEOF/&/+/-/~/!]
K  - [init_declarator_list -> init_declarator_list ., init_declarator, ;/,]
State 56:
K  - [init_declarator_list -> init_declarator., ;/,]
State 57:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [function_definition -> declaration_specifiers declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 58:
K  - [declaration -> declaration_specifiers ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION/}/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/SIZEOF/&/+/-/~/!]
State 59:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [struct_tag_opt -> IDENTIFIER., {]
State 60:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [struct_definition_start -> .{, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 61:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enum_specifier -> ENUM IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 62:
K  - [enum_specifier -> ENUM { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 63:
K  - [$start -> translation_unit $eof., $eof]
State 64:
K  - [translation_unit -> translation_unit external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 65:
K  - [pointer -> * type_qualifier_list pointer., IDENTIFIER/(/)/,/[]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 67:
K  - [direct_declarator -> ( declarator )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/,/;/=/:]
State 68:
K  - [postfix_expression -> primary_expression., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 69:
K  - [unary_operator -> !., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 70:
K  - [unary_operator -> ~., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 71:
K  - [unary_operator -> -., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 72:
K  - [unary_operator -> +., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 73:
K  - [unary_operator -> *., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 74:
K  - [unary_expression -> SIZEOF .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [unary_expression -> SIZEOF .( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 75:
K  - [unary_operator -> &., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 76:
K  - [unary_expression -> DEC_OP .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 77:
K  - [direct_declarator -> direct_declarator [ ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 78:
K  - [primary_expression -> IDENTIFIER., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 79:
K  - [primary_expression -> STRING_LITERAL., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 80:
K  - [cast_expression -> ( .type_name ) cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [primary_expression -> ( .expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 81:
K  - [primary_expression -> CONSTANT., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 82:
K  - [unary_expression -> INC_OP .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 83:
K  - [conditional_expression -> logical_or_expression., ]/;/)/:/,/}]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression, ]/;/)/:/,/}]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression, ]/?/OR_OP/;/)/:/,/}]
State 84:
K  - [constant_expression -> conditional_expression., ]/:/}/;/,]
State 85:
K  - [direct_declarator -> direct_declarator [ constant_expression .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 86:
K  - [exclusive_or_expression -> and_expression., ]/?/^/;/)/:/OR_OP/AND_OP/|/,/}]
K  - [and_expression -> and_expression .& equality_expression, ]/?/&/;/)/:/OR_OP/AND_OP/|/,/}/^]
State 87:
K  - [inclusive_or_expression -> exclusive_or_expression., ]/?/|/;/)/:/OR_OP/AND_OP/,/}]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ]/?/^/;/)/:/OR_OP/AND_OP/,/}/|]
State 88:
K  - [unary_expression -> unary_operator .cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 89:
K  - [logical_or_expression -> logical_and_expression., ]/?/OR_OP/;/)/:/,/}]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ]/?/AND_OP/;/)/:/,/}/OR_OP]
State 90:
K  - [logical_and_expression -> inclusive_or_expression., ]/?/AND_OP/;/)/:/OR_OP/,/}]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ]/?/|/;/)/:/OR_OP/,/}/AND_OP]
State 91:
K  - [unary_expression -> postfix_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [postfix_expression -> postfix_expression .[ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression .DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
NK - [struct_member_accessor -> .., IDENTIFIER]
NK - [struct_member_accessor -> .PTR_OP, IDENTIFIER]
State 92:
K  - [cast_expression -> unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 93:
K  - [multiplicative_expression -> cast_expression., ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/,/}]
State 94:
K  - [relational_expression -> shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}/</>/LE_OP/GE_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}/</>/LE_OP/GE_OP]
State 95:
K  - [and_expression -> equality_expression., ]/?/&/;/)/:/OR_OP/^/AND_OP/|/,/}]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/;/)/:/OR_OP/^/AND_OP/|/,/}/&]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ]/?/EQ_OP/NE_OP/;/)/:/OR_OP/^/AND_OP/|/,/}/&]
State 96:
K  - [shift_expression -> additive_expression., ]/?/LEFT_OP/RIGHT_OP/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ]/?/+/-/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/LEFT_OP/RIGHT_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ]/?/+/-/;/)/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/LEFT_OP/RIGHT_OP]
State 97:
K  - [equality_expression -> relational_expression., ]/?/EQ_OP/NE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .< shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/:/OR_OP/&/^/AND_OP/|/,/}/EQ_OP/NE_OP]
State 98:
K  - [additive_expression -> multiplicative_expression., ]/?/+/-/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/+/-]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/+/-]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ]/?/*///%/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}/+/-]
State 99:
K  - [direct_declarator -> direct_declarator ( )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 100:
K  - [identifier_list -> IDENTIFIER., )/,]
State 101:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 102:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
K  - [identifier_list -> identifier_list ., IDENTIFIER, )/,]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 103:
K  - [parameter_declaration -> declaration_specifiers .declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers., )/,]
NK - [declarator -> .pointer direct_declarator, )/,]
NK - [declarator -> .direct_declarator, )/,]
NK - [abstract_declarator -> .pointer, )/,]
NK - [abstract_declarator -> .direct_abstract_declarator, )/,]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )/,]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 104:
K  - [parameter_list -> parameter_declaration., )/,]
State 105:
K  - [parameter_type_list -> parameter_list., )]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS, )]
K  - [parameter_list -> parameter_list ., parameter_declaration, )/,]
State 106:
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
State 107:
K  - [expression_statement -> expression .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/)/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 108:
K  - [labeled_statement -> IDENTIFIER .: statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [primary_expression -> IDENTIFIER., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 109:
K  - [assignment_expression -> conditional_expression., ;/)/:/]/,/}]
State 110:
K  - [expression -> assignment_expression., ;/,/)/:/]]
State 111:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression, ;/)/:/]/,/}]
K  - [cast_expression -> unary_expression., ;/?/)/:/]/,/}/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [assignment_operator -> .=, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .MUL_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .DIV_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .MOD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .ADD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .SUB_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .LEFT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .RIGHT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .AND_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .XOR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [assignment_operator -> .OR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 112:
K  - [expression_statement -> ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/)/ELSE]
State 113:
K  - [block_end -> }., $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 114:
K  - [labeled_statement -> CASE .constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [constant_expression -> .conditional_expression, :]
NK - [conditional_expression -> .logical_or_expression, :]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 115:
K  - [iteration_statement -> WHILE .( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 116:
K  - [jump_statement -> GOTO .IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 117:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, WHILE]
NK - [statement -> .compound_statement, WHILE]
NK - [statement -> .expression_statement, WHILE]
NK - [statement -> .selection_statement, WHILE]
NK - [statement -> .iteration_statement, WHILE]
NK - [statement -> .jump_statement, WHILE]
NK - [labeled_statement -> .IDENTIFIER : statement, WHILE]
NK - [labeled_statement -> .CASE constant_expression : statement, WHILE]
NK - [labeled_statement -> .DEFAULT : statement, WHILE]
NK - [compound_statement -> .block_start block_end, WHILE]
NK - [compound_statement -> .block_start statement_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, WHILE]
NK - [expression_statement -> .;, WHILE]
NK - [expression_statement -> .expression ;, WHILE]
NK - [selection_statement -> .IF ( expression ) statement, WHILE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, WHILE]
NK - [selection_statement -> .SWITCH ( expression ) statement, WHILE]
NK - [iteration_statement -> .WHILE ( expression ) statement, WHILE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, WHILE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, WHILE]
NK - [jump_statement -> .CONTINUE ;, WHILE]
NK - [jump_statement -> .BREAK ;, WHILE]
NK - [jump_statement -> .RETURN ;, WHILE]
NK - [jump_statement -> .RETURN expression ;, WHILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 118:
K  - [selection_statement -> IF .( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [selection_statement -> IF .( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 119:
K  - [labeled_statement -> DEFAULT .: statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 120:
K  - [selection_statement -> SWITCH .( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 121:
K  - [jump_statement -> CONTINUE .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 122:
K  - [jump_statement -> BREAK .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 123:
K  - [jump_statement -> RETURN .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [jump_statement -> RETURN .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 125:
K  - [statement -> expression_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 126:
K  - [statement -> iteration_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 127:
K  - [statement_list -> statement., }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 128:
K  - [compound_statement -> block_start statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 129:
K  - [compound_statement -> block_start block_end., $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 130:
K  - [statement -> compound_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 131:
K  - [statement -> jump_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 132:
K  - [statement -> selection_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 133:
K  - [statement -> labeled_statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 134:
K  - [compound_statement -> block_start declaration_list .block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [compound_statement -> block_start declaration_list .statement_list block_end, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [declaration_list -> declaration_list .declaration, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_end -> .}, $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 135:
K  - [declaration_list -> declaration_list declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 136:
K  - [function_definition -> declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 137:
K  - [init_declarator_list -> init_declarator_list , .init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/=]
NK - [declarator -> .direct_declarator, ;/,/=]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/=/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/=/[/(]
State 138:
K  - [declaration -> declaration_specifiers init_declarator_list ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION/}/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/SIZEOF/&/+/-/~/!]
State 139:
K  - [init_declarator -> declarator = .initializer, ;/,]
NK - [initializer -> .assignment_expression, ;/,]
NK - [initializer -> .{ initializer_list }, ;/,]
NK - [initializer -> .{ initializer_list , }, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 140:
K  - [function_definition -> declaration_specifiers declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 141:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/;/*/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 142:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
NK - [struct_declaration_list -> .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_specifier, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier, :/*/IDENTIFIER/(]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
State 143:
K  - [struct_definition_start -> {., VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 144:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 145:
K  - [enumerator -> IDENTIFIER., }/,]
K  - [enumerator -> IDENTIFIER .= constant_expression, }/,]
State 146:
K  - [enum_specifier -> ENUM { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 147:
K  - [enumerator_list -> enumerator., }/,]
State 148:
K  - [unary_expression -> SIZEOF ( .type_name ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
K  - [primary_expression -> ( .expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/[/(/./PTR_OP/INC_OP/DEC_OP/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 149:
K  - [unary_expression -> SIZEOF unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 150:
K  - [primary_expression -> ( .expression ), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 151:
K  - [unary_expression -> DEC_OP unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 152:
K  - [primary_expression -> ( expression .), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
K  - [expression -> expression ., assignment_expression, )/,]
State 153:
K  - [type_name -> specifier_qualifier_list., )]
K  - [type_name -> specifier_qualifier_list .abstract_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 154:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
K  - [specifier_qualifier_list -> type_specifier., )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
State 155:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
K  - [specifier_qualifier_list -> type_qualifier., )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/:/IDENTIFIER]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:/IDENTIFIER]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/)/*/(/[/:]
State 156:
K  - [cast_expression -> ( type_name .) cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 157:
K  - [unary_expression -> INC_OP unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 158:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression, ]/;/)/:/,/}]
NK - [expression -> .assignment_expression, :/,]
NK - [expression -> .expression , assignment_expression, :/,]
NK - [assignment_expression -> .conditional_expression, :/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, :/,]
NK - [conditional_expression -> .logical_or_expression, :/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 159:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression, ]/?/OR_OP/;/)/:/,/}]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/OR_OP/;/)/AND_OP/:/,/}]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/OR_OP/;/)/AND_OP/:/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/OR_OP/;/)/|/AND_OP/:/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/OR_OP/;/)/|/AND_OP/:/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/?/OR_OP/;/)/^/|/AND_OP/:/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/OR_OP/;/)/^/|/AND_OP/:/,/}]
NK - [and_expression -> .equality_expression, ]/?/OR_OP/;/)/&/^/|/AND_OP/:/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/OR_OP/;/)/&/^/|/AND_OP/:/,/}]
NK - [equality_expression -> .relational_expression, ]/?/OR_OP/;/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/OR_OP/;/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/OR_OP/;/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/OR_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [shift_expression -> .additive_expression, ]/?/OR_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/OR_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/OR_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/OR_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/OR_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/OR_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [cast_expression -> .unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/OR_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
NK - [primary_expression -> .( expression ), ]/?/OR_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/,/}]
State 160:
K  - [direct_declarator -> direct_declarator [ constant_expression ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 161:
K  - [and_expression -> and_expression & .equality_expression, ]/?/&/;/)/^/:/OR_OP/AND_OP/|/,/}]
NK - [equality_expression -> .relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/&/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/&/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/&/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/&/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/&/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/&/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/&/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/&/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/&/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
State 162:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression, ]/?/^/;/)/|/:/OR_OP/AND_OP/,/}]
NK - [and_expression -> .equality_expression, ]/?/^/;/)/&/|/:/OR_OP/AND_OP/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/^/;/)/&/|/:/OR_OP/AND_OP/,/}]
NK - [equality_expression -> .relational_expression, ]/?/^/;/)/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/^/;/)/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/^/;/)/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/^/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [shift_expression -> .additive_expression, ]/?/^/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/^/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/^/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/^/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/^/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/^/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/^/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/^/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/OR_OP/AND_OP/,/}]
State 163:
K  - [unary_expression -> unary_operator cast_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 164:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression, ]/?/AND_OP/;/)/OR_OP/:/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/AND_OP/;/)/|/OR_OP/:/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/AND_OP/;/)/|/OR_OP/:/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/?/AND_OP/;/)/^/|/OR_OP/:/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/AND_OP/;/)/^/|/OR_OP/:/,/}]
NK - [and_expression -> .equality_expression, ]/?/AND_OP/;/)/&/^/|/OR_OP/:/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/AND_OP/;/)/&/^/|/OR_OP/:/,/}]
NK - [equality_expression -> .relational_expression, ]/?/AND_OP/;/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/AND_OP/;/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/AND_OP/;/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/AND_OP/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [shift_expression -> .additive_expression, ]/?/AND_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/AND_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/AND_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/AND_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/AND_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/AND_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [cast_expression -> .unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/AND_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
NK - [primary_expression -> .( expression ), ]/?/AND_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/,/}]
State 165:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression, ]/?/|/;/)/AND_OP/:/OR_OP/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/?/|/;/)/^/AND_OP/:/OR_OP/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/|/;/)/^/AND_OP/:/OR_OP/,/}]
NK - [and_expression -> .equality_expression, ]/?/|/;/)/&/^/AND_OP/:/OR_OP/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/?/|/;/)/&/^/AND_OP/:/OR_OP/,/}]
NK - [equality_expression -> .relational_expression, ]/?/|/;/)/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/|/;/)/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/|/;/)/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/|/;/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [shift_expression -> .additive_expression, ]/?/|/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/|/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/|/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/|/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/|/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/|/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/|/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/|/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/:/OR_OP/,/}]
State 166:
K  - [postfix_expression -> postfix_expression DEC_OP., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 167:
K  - [postfix_expression -> postfix_expression [ .expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
NK - [expression -> .assignment_expression, ]/,]
NK - [expression -> .expression , assignment_expression, ]/,]
NK - [assignment_expression -> .conditional_expression, ]/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 168:
K  - [struct_member_accessor -> .., IDENTIFIER]
State 169:
K  - [struct_member_accessor -> PTR_OP., IDENTIFIER]
State 170:
K  - [postfix_expression -> postfix_expression ( .), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
NK - [argument_expression_list -> .assignment_expression, )/,]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 171:
K  - [postfix_expression -> postfix_expression INC_OP., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 172:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 173:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 174:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/LEFT_OP/RIGHT_OP/;/)/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/LEFT_OP/RIGHT_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 175:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression, ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 176:
K  - [equality_expression -> equality_expression NE_OP .relational_expression, ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/EQ_OP/NE_OP/;/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/EQ_OP/NE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/EQ_OP/NE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/EQ_OP/NE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 177:
K  - [additive_expression -> additive_expression - .multiplicative_expression, ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 178:
K  - [additive_expression -> additive_expression + .multiplicative_expression, ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/+/-/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 179:
K  - [relational_expression -> relational_expression < .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 180:
K  - [relational_expression -> relational_expression LE_OP .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 181:
K  - [relational_expression -> relational_expression GE_OP .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 182:
K  - [relational_expression -> relational_expression > .shift_expression, ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/</>/LE_OP/GE_OP/;/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/</>/LE_OP/GE_OP/;/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
NK - [primary_expression -> .( expression ), ]/?/</>/LE_OP/GE_OP/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 183:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 184:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 185:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
NK - [primary_expression -> .( expression ), ]/?/*///%/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 186:
K  - [parameter_list_end -> )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/,/;/=/:]
State 187:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 188:
K  - [identifier_list -> identifier_list , .IDENTIFIER, )/,]
State 189:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/{/[/(/)/;/=/,/:]
State 190:
K  - [direct_abstract_declarator -> [ .], )/,/[/(]
K  - [direct_abstract_declarator -> [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 191:
K  - [direct_declarator -> ( .declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/[]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 192:
K  - [declarator -> pointer .direct_declarator, )/,]
K  - [abstract_declarator -> pointer., )/,]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )/,]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 193:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 194:
K  - [parameter_declaration -> declaration_specifiers declarator., )/,]
State 195:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator., )/,]
State 196:
K  - [abstract_declarator -> direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 197:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS, )]
K  - [parameter_list -> parameter_list , .parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 198:
K  - [expression -> expression , .assignment_expression, ;/,/)/:/]]
NK - [assignment_expression -> .conditional_expression, ;/,/)/:/]]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,/)/:/]]
NK - [conditional_expression -> .logical_or_expression, ;/,/)/:/]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,/)/:/]]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [logical_or_expression -> .logical_and_expression, ;/,/)/?/OR_OP/:/]]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/,/)/?/OR_OP/:/]]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/,/)/?/AND_OP/OR_OP/:/]]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/,/)/?/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/,/)/?/|/AND_OP/OR_OP/:/]]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/,/)/?/|/AND_OP/OR_OP/:/]]
NK - [exclusive_or_expression -> .and_expression, ;/,/)/?/^/|/AND_OP/OR_OP/:/]]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/,/)/?/^/|/AND_OP/OR_OP/:/]]
NK - [and_expression -> .equality_expression, ;/,/)/?/&/^/|/AND_OP/OR_OP/:/]]
NK - [and_expression -> .and_expression & equality_expression, ;/,/)/?/&/^/|/AND_OP/OR_OP/:/]]
NK - [equality_expression -> .relational_expression, ;/,/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/,/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/,/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression < shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression > shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/,/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [shift_expression -> .additive_expression, ;/,/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/,/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/,/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [additive_expression -> .multiplicative_expression, ;/,/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/,/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/,/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [cast_expression -> .unary_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
NK - [cast_expression -> .( type_name ) cast_expression, ;/,/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]]
State 199:
K  - [expression_statement -> expression ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/)/ELSE]
State 200:
K  - [labeled_statement -> IDENTIFIER : .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 201:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression, ;/)/:/]/,/}]
NK - [assignment_expression -> .conditional_expression, ;/)/:/]/,/}]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/)/:/]/,/}]
NK - [conditional_expression -> .logical_or_expression, ;/)/:/]/,/}]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/)/:/]/,/}]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [logical_or_expression -> .logical_and_expression, ;/)/?/OR_OP/:/]/,/}]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/)/?/OR_OP/:/]/,/}]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/)/?/AND_OP/OR_OP/:/]/,/}]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/)/?/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/:/]/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/:/]/,/}]
NK - [exclusive_or_expression -> .and_expression, ;/)/?/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/)/?/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [and_expression -> .equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [and_expression -> .and_expression & equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [equality_expression -> .relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [shift_expression -> .additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [additive_expression -> .multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [cast_expression -> .unary_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/:/]/,/}]
State 202:
K  - [assignment_operator -> OR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 203:
K  - [assignment_operator -> MOD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 204:
K  - [assignment_operator -> MUL_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 205:
K  - [assignment_operator -> SUB_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 206:
K  - [assignment_operator -> LEFT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 207:
K  - [assignment_operator -> ADD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 208:
K  - [assignment_operator -> XOR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 209:
K  - [assignment_operator -> =., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 210:
K  - [assignment_operator -> RIGHT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 211:
K  - [assignment_operator -> AND_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 212:
K  - [assignment_operator -> DIV_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 213:
K  - [labeled_statement -> CASE constant_expression .: statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 214:
K  - [iteration_statement -> WHILE ( .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 215:
K  - [jump_statement -> GOTO IDENTIFIER .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 216:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 217:
K  - [selection_statement -> IF ( .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [selection_statement -> IF ( .expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 218:
K  - [labeled_statement -> DEFAULT : .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 219:
K  - [selection_statement -> SWITCH ( .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 220:
K  - [jump_statement -> CONTINUE ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 221:
K  - [jump_statement -> BREAK ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 222:
K  - [jump_statement -> RETURN expression .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 223:
K  - [jump_statement -> RETURN ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 224:
K  - [iteration_statement -> FOR ( .expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 225:
K  - [statement_list -> statement_list statement., }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 226:
K  - [compound_statement -> block_start statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 227:
K  - [compound_statement -> block_start declaration_list statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 228:
K  - [compound_statement -> block_start declaration_list block_end., $eof/}/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 229:
K  - [init_declarator_list -> init_declarator_list , init_declarator., ;/,]
State 230:
K  - [init_declarator -> declarator = initializer., ;/,]
State 231:
K  - [initializer -> assignment_expression., ;/}/,]
State 232:
K  - [initializer -> { .initializer_list }, ;/}/,]
K  - [initializer -> { .initializer_list , }, ;/}/,]
NK - [initializer_list -> .initializer, }/,]
NK - [initializer_list -> .initializer_list , initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 233:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/ENUM/STRUCT/UNION]
State 234:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_declarator_list -> .struct_declarator, ;/,]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/:/,]
NK - [declarator -> .direct_declarator, ;/:/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/:/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/:/[/(/,]
State 235:
K  - [struct_declaration_list -> struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 236:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_definition_end -> .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_specifier, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, :/*/IDENTIFIER/(]
NK - [specifier_qualifier_list -> .type_qualifier, :/*/IDENTIFIER/(]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/IDENTIFIER/(]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
NK - [struct_or_union -> .UNION, IDENTIFIER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/*/(]
State 237:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 238:
K  - [enumerator -> IDENTIFIER = .constant_expression, }/,]
NK - [constant_expression -> .conditional_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [logical_or_expression -> .logical_and_expression, }/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 239:
K  - [enumerator_list -> enumerator_list , .enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 240:
K  - [enum_specifier -> ENUM { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 241:
K  - [unary_expression -> SIZEOF ( type_name .), ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 242:
K  - [primary_expression -> ( expression )., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 243:
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/[/(]
K  - [direct_abstract_declarator -> ( .), )/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 244:
K  - [abstract_declarator -> pointer., )]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 245:
K  - [type_name -> specifier_qualifier_list abstract_declarator., )]
State 246:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list., )/*/(/[/:/IDENTIFIER]
State 247:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list., )/*/(/[/:/IDENTIFIER]
State 248:
K  - [cast_expression -> ( type_name ) .cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .postfix_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .primary_expression, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .CONSTANT, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
NK - [primary_expression -> .( expression ), ]/?/;/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 249:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression, ]/;/)/:/,/}]
K  - [expression -> expression ., assignment_expression, :/,]
State 250:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression., ]/?/OR_OP/;/)/:/,/}]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ]/?/OR_OP/;/)/AND_OP/:/,/}]
State 251:
K  - [and_expression -> and_expression & equality_expression., ]/?/&/;/)/^/:/OR_OP/AND_OP/|/,/}]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ]/?/&/;/)/EQ_OP/NE_OP/^/:/OR_OP/AND_OP/|/,/}]
State 252:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression., ]/?/^/;/)/|/:/OR_OP/AND_OP/,/}]
K  - [and_expression -> and_expression .& equality_expression, ]/?/^/;/)/&/|/:/OR_OP/AND_OP/,/}]
State 253:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression., ]/?/AND_OP/;/)/OR_OP/:/,/}]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ]/?/AND_OP/;/)/|/OR_OP/:/,/}]
State 254:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression., ]/?/|/;/)/AND_OP/:/OR_OP/,/}]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ]/?/|/;/)/^/AND_OP/:/OR_OP/,/}]
State 255:
K  - [postfix_expression -> postfix_expression [ expression .], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [expression -> expression ., assignment_expression, ]/,]
State 256:
K  - [postfix_expression -> postfix_expression ( )., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 257:
K  - [argument_expression_list -> assignment_expression., )/,]
State 258:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression, )/,]
State 259:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 260:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression., ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 261:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression., ]/?/LEFT_OP/RIGHT_OP/;/)/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ]/?/LEFT_OP/RIGHT_OP/;/)/+/-/</>/LE_OP/GE_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/,/}]
State 262:
K  - [equality_expression -> equality_expression EQ_OP relational_expression., ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .< shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .> shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 263:
K  - [equality_expression -> equality_expression NE_OP relational_expression., ]/?/EQ_OP/NE_OP/;/)/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .< shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .> shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ]/?/EQ_OP/NE_OP/;/)/</>/LE_OP/GE_OP/&/:/OR_OP/^/AND_OP/|/,/}]
State 264:
K  - [additive_expression -> additive_expression - multiplicative_expression., ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 265:
K  - [additive_expression -> additive_expression + multiplicative_expression., ]/?/+/-/;/)/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ]/?/+/-/;/)/*///%/LEFT_OP/RIGHT_OP/:/OR_OP/&/^/AND_OP/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 266:
K  - [relational_expression -> relational_expression < shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 267:
K  - [relational_expression -> relational_expression LE_OP shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 268:
K  - [relational_expression -> relational_expression GE_OP shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 269:
K  - [relational_expression -> relational_expression > shift_expression., ]/?/</>/LE_OP/GE_OP/;/)/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ]/?/</>/LE_OP/GE_OP/;/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/OR_OP/&/^/AND_OP/|/,/}]
State 270:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression., ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 271:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression., ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 272:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression., ]/?/*///%/;/)/+/-/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/</>/LE_OP/GE_OP/,/}]
State 273:
K  - [identifier_list -> identifier_list , IDENTIFIER., )/,]
State 274:
K  - [direct_abstract_declarator -> [ ]., )/,/[/(]
State 275:
K  - [direct_abstract_declarator -> [ constant_expression .], )/,/[/(]
State 276:
K  - [direct_abstract_declarator -> ( )., )/,/[/(]
State 277:
K  - [direct_abstract_declarator -> ( abstract_declarator .), )/,/[/(]
State 278:
K  - [abstract_declarator -> pointer direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 279:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 280:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 281:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 282:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .STRUCT, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [struct_or_union -> .UNION, IDENTIFIER/*/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 283:
K  - [parameter_type_list -> parameter_list , ELLIPSIS., )]
State 284:
K  - [parameter_list -> parameter_list , parameter_declaration., )/,]
State 285:
K  - [expression -> expression , assignment_expression., ;/,/)/:/]]
State 286:
K  - [labeled_statement -> IDENTIFIER : statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 287:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression., ;/)/:/]/,/}]
State 288:
K  - [labeled_statement -> CASE constant_expression : .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 289:
K  - [iteration_statement -> WHILE ( expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 290:
K  - [jump_statement -> GOTO IDENTIFIER ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 291:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 292:
K  - [selection_statement -> IF ( expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [selection_statement -> IF ( expression .) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 293:
K  - [labeled_statement -> DEFAULT : statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 294:
K  - [selection_statement -> SWITCH ( expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 295:
K  - [jump_statement -> RETURN expression ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 296:
K  - [iteration_statement -> FOR ( expression_statement .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 297:
K  - [compound_statement -> block_start declaration_list statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 298:
K  - [initializer_list -> initializer., }/,]
State 299:
K  - [initializer -> { initializer_list .}, ;/}/,]
K  - [initializer -> { initializer_list ., }, ;/}/,]
K  - [initializer_list -> initializer_list ., initializer, }/,]
State 300:
K  - [struct_declarator_list -> struct_declarator., ;/,]
State 301:
K  - [struct_declarator -> declarator., ;/,]
K  - [struct_declarator -> declarator .: constant_expression, ;/,]
State 302:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator, ;/,]
State 303:
K  - [struct_declarator -> : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 304:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
State 305:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 306:
K  - [struct_definition_end -> }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/:/[/)/,]
State 307:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION/[/)/,/:]
State 308:
K  - [enumerator -> IDENTIFIER = constant_expression., }/,]
State 309:
K  - [enumerator_list -> enumerator_list , enumerator., }/,]
State 310:
K  - [unary_expression -> SIZEOF ( type_name )., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 311:
K  - [cast_expression -> ( type_name ) cast_expression., ]/?/;/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/,/}]
State 312:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression, ]/;/)/:/,/}]
NK - [conditional_expression -> .logical_or_expression, ]/;/)/:/,/}]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]/;/)/:/,/}]
NK - [logical_or_expression -> .logical_and_expression, ]/;/)/:/?/OR_OP/,/}]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/;/)/:/?/OR_OP/,/}]
NK - [logical_and_expression -> .inclusive_or_expression, ]/;/)/:/?/AND_OP/OR_OP/,/}]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/;/)/:/?/AND_OP/OR_OP/,/}]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/;/)/:/?/|/AND_OP/OR_OP/,/}]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/;/)/:/?/|/AND_OP/OR_OP/,/}]
NK - [exclusive_or_expression -> .and_expression, ]/;/)/:/?/^/|/AND_OP/OR_OP/,/}]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/;/)/:/?/^/|/AND_OP/OR_OP/,/}]
NK - [and_expression -> .equality_expression, ]/;/)/:/?/&/^/|/AND_OP/OR_OP/,/}]
NK - [and_expression -> .and_expression & equality_expression, ]/;/)/:/?/&/^/|/AND_OP/OR_OP/,/}]
NK - [equality_expression -> .relational_expression, ]/;/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/;/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/;/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression < shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression > shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/;/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [shift_expression -> .additive_expression, ]/;/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/;/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/;/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [additive_expression -> .multiplicative_expression, ]/;/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/;/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/;/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [cast_expression -> .unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [cast_expression -> .( type_name ) cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .postfix_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .INC_OP unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .DEC_OP unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .unary_operator cast_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF unary_expression, ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/;/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .primary_expression, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( ), ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [primary_expression -> .CONSTANT, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [primary_expression -> .STRING_LITERAL, ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
NK - [primary_expression -> .( expression ), ]/;/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,/}]
State 313:
K  - [postfix_expression -> postfix_expression [ expression ]., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, )/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 315:
K  - [postfix_expression -> postfix_expression ( argument_expression_list )., ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/OR_OP/&/^/AND_OP/|/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/+/-/</>/LE_OP/GE_OP/*///%/}/,]
State 316:
K  - [direct_abstract_declarator -> [ constant_expression ]., )/,/[/(]
State 317:
K  - [direct_abstract_declarator -> ( abstract_declarator )., )/,/[/(]
State 318:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 319:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ]., )/,/[/(]
State 320:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .], )/,/[/(]
State 321:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( )., )/,/[/(]
State 322:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 323:
K  - [labeled_statement -> CASE constant_expression : statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 324:
K  - [iteration_statement -> WHILE ( expression ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 325:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 326:
K  - [selection_statement -> IF ( expression ) .statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
K  - [selection_statement -> IF ( expression ) .statement ELSE, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .labeled_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .compound_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .expression_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .selection_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .iteration_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [statement -> .jump_statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [expression_statement -> .expression ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .BREAK ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 327:
K  - [selection_statement -> SWITCH ( expression ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 328:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 329:
K  - [iteration_statement -> FOR ( expression_statement ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 330:
K  - [initializer -> { initializer_list , .}, ;/}/,]
K  - [initializer_list -> initializer_list , .initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 331:
K  - [initializer -> { initializer_list }., ;/}/,]
State 332:
K  - [struct_declarator -> declarator : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 333:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/:]
NK - [declarator -> .direct_declarator, ;/,/:]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/:/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/:/[/(]
State 334:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
State 335:
K  - [struct_declarator -> : constant_expression., ;/,]
State 336:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression., ]/;/)/:/,/}]
State 337:
K  - [argument_expression_list -> argument_expression_list , assignment_expression., )/,]
State 338:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]., )/,/[/(]
State 339:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 340:
K  - [iteration_statement -> WHILE ( expression ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 341:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 342:
K  - [selection_statement -> IF ( expression ) statement., }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
K  - [selection_statement -> IF ( expression ) statement .ELSE, }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 343:
K  - [selection_statement -> SWITCH ( expression ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .labeled_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .compound_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .expression_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .selection_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .iteration_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [statement -> .jump_statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [expression_statement -> .expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .BREAK ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/TYPE_NAME/CONST/VOLATILE/ENUM/STRUCT/UNION]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 346:
K  - [initializer_list -> initializer_list , initializer., }/,]
State 347:
K  - [initializer -> { initializer_list , }., ;/}/,]
State 348:
K  - [struct_declarator -> declarator : constant_expression., ;/,]
State 349:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator., ;/,]
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;, }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE., }/WHILE/ELSE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!]
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;., }/WHILE/IDENTIFIER/CASE/DEFAULT/;/IF/SWITCH/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/{/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/SIZEOF/&/*/+/-/~/!/ELSE]

