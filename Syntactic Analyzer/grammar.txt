Dumping Grammar:
Grammar Symbols:
0. $eof - Terminal
1. primary_expression - Nonterminal
2. IDENTIFIER - Terminal
3. CONSTANT - Terminal
4. STRING_LITERAL - Terminal
5. ( - Terminal
6. expression - Nonterminal
7. ) - Terminal
8. postfix_expression - Nonterminal
9. [ - Terminal
10. ] - Terminal
11. argument_expression_list - Nonterminal
12. struct_member_accessor - Nonterminal
13. INC_OP - Terminal
14. DEC_OP - Terminal
15. . - Terminal
16. PTR_OP - Terminal
17. assignment_expression - Nonterminal
18. , - Terminal
19. unary_expression - Nonterminal
20. unary_operator - Nonterminal
21. cast_expression - Nonterminal
22. SIZEOF - Terminal
23. type_name - Nonterminal
24. & - Terminal
25. * - Terminal
26. + - Terminal
27. - - Terminal
28. ~ - Terminal
29. ! - Terminal
30. multiplicative_expression - Nonterminal
31. / - Terminal
32. % - Terminal
33. additive_expression - Nonterminal
34. shift_expression - Nonterminal
35. LEFT_OP - Terminal
36. RIGHT_OP - Terminal
37. relational_expression - Nonterminal
38. < - Terminal
39. > - Terminal
40. LE_OP - Terminal
41. GE_OP - Terminal
42. equality_expression - Nonterminal
43. EQ_OP - Terminal
44. NE_OP - Terminal
45. and_expression - Nonterminal
46. exclusive_or_expression - Nonterminal
47. ^ - Terminal
48. inclusive_or_expression - Nonterminal
49. | - Terminal
50. logical_and_expression - Nonterminal
51. AND_OP - Terminal
52. logical_or_expression - Nonterminal
53. OR_OP - Terminal
54. conditional_expression - Nonterminal
55. ? - Terminal
56. : - Terminal
57. assignment_operator - Nonterminal
58. = - Terminal
59. MUL_ASSIGN - Terminal
60. DIV_ASSIGN - Terminal
61. MOD_ASSIGN - Terminal
62. ADD_ASSIGN - Terminal
63. SUB_ASSIGN - Terminal
64. LEFT_ASSIGN - Terminal
65. RIGHT_ASSIGN - Terminal
66. AND_ASSIGN - Terminal
67. XOR_ASSIGN - Terminal
68. OR_ASSIGN - Terminal
69. constant_expression - Nonterminal
70. declaration - Nonterminal
71. declaration_specifiers - Nonterminal
72. ; - Terminal
73. init_declarator_list - Nonterminal
74. storage_class_specifier - Nonterminal
75. type_specifier - Nonterminal
76. type_qualifier - Nonterminal
77. init_declarator - Nonterminal
78. declarator - Nonterminal
79. initializer - Nonterminal
80. TYPEDEF - Terminal
81. EXTERN - Terminal
82. STATIC - Terminal
83. AUTO - Terminal
84. REGISTER - Terminal
85. VOID - Terminal
86. CHAR - Terminal
87. SHORT - Terminal
88. INT - Terminal
89. LONG - Terminal
90. FLOAT - Terminal
91. DOUBLE - Terminal
92. SIGNED - Terminal
93. UNSIGNED - Terminal
94. struct_or_union_specifier - Nonterminal
95. enum_specifier - Nonterminal
96. TYPE_NAME - Terminal
97. struct_or_union - Nonterminal
98. struct_tag_opt - Nonterminal
99. struct_definition_start - Nonterminal
100. struct_declaration_list - Nonterminal
101. struct_definition_end - Nonterminal
102. { - Terminal
103. } - Terminal
104. STRUCT - Terminal
105. UNION - Terminal
106. struct_declaration - Nonterminal
107. specifier_qualifier_list - Nonterminal
108. struct_declarator_list - Nonterminal
109. struct_declarator - Nonterminal
110. ENUM - Terminal
111. enumerator_list - Nonterminal
112. enumerator - Nonterminal
113. CONST - Terminal
114. VOLATILE - Terminal
115. pointer - Nonterminal
116. direct_declarator - Nonterminal
117. parameter_list_start - Nonterminal
118. parameter_type_list - Nonterminal
119. parameter_list_end - Nonterminal
120. identifier_list - Nonterminal
121. type_qualifier_list - Nonterminal
122. parameter_list - Nonterminal
123. ELLIPSIS - Terminal
124. parameter_declaration - Nonterminal
125. abstract_declarator - Nonterminal
126. direct_abstract_declarator - Nonterminal
127. initializer_list - Nonterminal
128. statement - Nonterminal
129. labeled_statement - Nonterminal
130. compound_statement - Nonterminal
131. expression_statement - Nonterminal
132. selection_statement - Nonterminal
133. iteration_statement - Nonterminal
134. jump_statement - Nonterminal
135. CASE - Terminal
136. DEFAULT - Terminal
137. block_start - Nonterminal
138. block_end - Nonterminal
139. statement_list - Nonterminal
140. declaration_list - Nonterminal
141. IF - Terminal
142. ELSE - Terminal
143. SWITCH - Terminal
144. WHILE - Terminal
145. DO - Terminal
146. FOR - Terminal
147. GOTO - Terminal
148. CONTINUE - Terminal
149. BREAK - Terminal
150. RETURN - Terminal
151. translation_unit - Nonterminal
152. external_declaration - Nonterminal
153. function_definition - Nonterminal
154. $start - Nonterminal

Grammar Productions rules:
0. primary_expression -> IDENTIFIER 
1. primary_expression -> CONSTANT 
2. primary_expression -> STRING_LITERAL 
3. primary_expression -> ( expression ) 
4. postfix_expression -> primary_expression 
5. postfix_expression -> postfix_expression [ expression ] 
6. postfix_expression -> postfix_expression ( ) 
7. postfix_expression -> postfix_expression ( argument_expression_list ) 
8. postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER 
9. postfix_expression -> postfix_expression INC_OP 
10. postfix_expression -> postfix_expression DEC_OP 
11. struct_member_accessor -> . 
12. struct_member_accessor -> PTR_OP 
13. argument_expression_list -> assignment_expression 
14. argument_expression_list -> argument_expression_list , assignment_expression 
15. unary_expression -> postfix_expression 
16. unary_expression -> INC_OP unary_expression 
17. unary_expression -> DEC_OP unary_expression 
18. unary_expression -> unary_operator cast_expression 
19. unary_expression -> SIZEOF unary_expression 
20. unary_expression -> SIZEOF ( type_name ) 
21. unary_operator -> & 
22. unary_operator -> * 
23. unary_operator -> + 
24. unary_operator -> - 
25. unary_operator -> ~ 
26. unary_operator -> ! 
27. cast_expression -> unary_expression 
28. cast_expression -> ( type_name ) cast_expression 
29. multiplicative_expression -> cast_expression 
30. multiplicative_expression -> multiplicative_expression * cast_expression 
31. multiplicative_expression -> multiplicative_expression / cast_expression 
32. multiplicative_expression -> multiplicative_expression % cast_expression 
33. additive_expression -> multiplicative_expression 
34. additive_expression -> additive_expression + multiplicative_expression 
35. additive_expression -> additive_expression - multiplicative_expression 
36. shift_expression -> additive_expression 
37. shift_expression -> shift_expression LEFT_OP additive_expression 
38. shift_expression -> shift_expression RIGHT_OP additive_expression 
39. relational_expression -> shift_expression 
40. relational_expression -> relational_expression < shift_expression 
41. relational_expression -> relational_expression > shift_expression 
42. relational_expression -> relational_expression LE_OP shift_expression 
43. relational_expression -> relational_expression GE_OP shift_expression 
44. equality_expression -> relational_expression 
45. equality_expression -> equality_expression EQ_OP relational_expression 
46. equality_expression -> equality_expression NE_OP relational_expression 
47. and_expression -> equality_expression 
48. and_expression -> and_expression & equality_expression 
49. exclusive_or_expression -> and_expression 
50. exclusive_or_expression -> exclusive_or_expression ^ and_expression 
51. inclusive_or_expression -> exclusive_or_expression 
52. inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression 
53. logical_and_expression -> inclusive_or_expression 
54. logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression 
55. logical_or_expression -> logical_and_expression 
56. logical_or_expression -> logical_or_expression OR_OP logical_and_expression 
57. conditional_expression -> logical_or_expression 
58. conditional_expression -> logical_or_expression ? expression : conditional_expression 
59. assignment_expression -> conditional_expression 
60. assignment_expression -> unary_expression assignment_operator assignment_expression 
61. assignment_operator -> = 
62. assignment_operator -> MUL_ASSIGN 
63. assignment_operator -> DIV_ASSIGN 
64. assignment_operator -> MOD_ASSIGN 
65. assignment_operator -> ADD_ASSIGN 
66. assignment_operator -> SUB_ASSIGN 
67. assignment_operator -> LEFT_ASSIGN 
68. assignment_operator -> RIGHT_ASSIGN 
69. assignment_operator -> AND_ASSIGN 
70. assignment_operator -> XOR_ASSIGN 
71. assignment_operator -> OR_ASSIGN 
72. expression -> assignment_expression 
73. expression -> expression , assignment_expression 
74. constant_expression -> conditional_expression 
75. declaration -> declaration_specifiers ; 
76. declaration -> declaration_specifiers init_declarator_list ; 
77. declaration_specifiers -> storage_class_specifier 
78. declaration_specifiers -> storage_class_specifier declaration_specifiers 
79. declaration_specifiers -> type_specifier 
80. declaration_specifiers -> type_specifier declaration_specifiers 
81. declaration_specifiers -> type_qualifier 
82. declaration_specifiers -> type_qualifier declaration_specifiers 
83. init_declarator_list -> init_declarator 
84. init_declarator_list -> init_declarator_list , init_declarator 
85. init_declarator -> declarator 
86. init_declarator -> declarator = initializer 
87. storage_class_specifier -> TYPEDEF 
88. storage_class_specifier -> EXTERN 
89. storage_class_specifier -> STATIC 
90. storage_class_specifier -> AUTO 
91. storage_class_specifier -> REGISTER 
92. type_specifier -> VOID 
93. type_specifier -> CHAR 
94. type_specifier -> SHORT 
95. type_specifier -> INT 
96. type_specifier -> LONG 
97. type_specifier -> FLOAT 
98. type_specifier -> DOUBLE 
99. type_specifier -> SIGNED 
100. type_specifier -> UNSIGNED 
101. type_specifier -> struct_or_union_specifier 
102. type_specifier -> enum_specifier 
103. type_specifier -> TYPE_NAME 
104. struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end 
105. struct_or_union_specifier -> struct_or_union IDENTIFIER 
106. struct_tag_opt -> IDENTIFIER 
107. struct_tag_opt -> 
108. struct_definition_start -> { 
109. struct_definition_end -> } 
110. struct_or_union -> STRUCT 
111. struct_or_union -> UNION 
112. struct_declaration_list -> struct_declaration 
113. struct_declaration_list -> struct_declaration_list struct_declaration 
114. struct_declaration -> specifier_qualifier_list struct_declarator_list ; 
115. specifier_qualifier_list -> type_specifier specifier_qualifier_list 
116. specifier_qualifier_list -> type_specifier 
117. specifier_qualifier_list -> type_qualifier specifier_qualifier_list 
118. specifier_qualifier_list -> type_qualifier 
119. struct_declarator_list -> struct_declarator 
120. struct_declarator_list -> struct_declarator_list , struct_declarator 
121. struct_declarator -> declarator 
122. struct_declarator -> : constant_expression 
123. struct_declarator -> declarator : constant_expression 
124. enum_specifier -> ENUM { enumerator_list } 
125. enum_specifier -> ENUM IDENTIFIER { enumerator_list } 
126. enum_specifier -> ENUM IDENTIFIER 
127. enumerator_list -> enumerator 
128. enumerator_list -> enumerator_list , enumerator 
129. enumerator -> IDENTIFIER 
130. enumerator -> IDENTIFIER = constant_expression 
131. type_qualifier -> CONST 
132. type_qualifier -> VOLATILE 
133. declarator -> pointer direct_declarator 
134. declarator -> direct_declarator 
135. direct_declarator -> IDENTIFIER 
136. direct_declarator -> ( declarator ) 
137. direct_declarator -> direct_declarator [ constant_expression ] 
138. direct_declarator -> direct_declarator [ ] 
139. direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end 
140. direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end 
141. direct_declarator -> direct_declarator ( ) 
142. parameter_list_start -> ( 
143. parameter_list_end -> ) 
144. pointer -> * 
145. pointer -> * type_qualifier_list 
146. pointer -> * pointer 
147. pointer -> * type_qualifier_list pointer 
148. type_qualifier_list -> type_qualifier 
149. type_qualifier_list -> type_qualifier_list type_qualifier 
150. parameter_type_list -> parameter_list 
151. parameter_type_list -> parameter_list , ELLIPSIS 
152. parameter_list -> parameter_declaration 
153. parameter_list -> parameter_list , parameter_declaration 
154. parameter_declaration -> declaration_specifiers declarator 
155. parameter_declaration -> declaration_specifiers abstract_declarator 
156. parameter_declaration -> declaration_specifiers 
157. identifier_list -> IDENTIFIER 
158. identifier_list -> identifier_list , IDENTIFIER 
159. type_name -> specifier_qualifier_list 
160. type_name -> specifier_qualifier_list abstract_declarator 
161. abstract_declarator -> pointer 
162. abstract_declarator -> direct_abstract_declarator 
163. abstract_declarator -> pointer direct_abstract_declarator 
164. direct_abstract_declarator -> ( abstract_declarator ) 
165. direct_abstract_declarator -> [ ] 
166. direct_abstract_declarator -> [ constant_expression ] 
167. direct_abstract_declarator -> direct_abstract_declarator [ ] 
168. direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] 
169. direct_abstract_declarator -> ( ) 
170. direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end 
171. direct_abstract_declarator -> direct_abstract_declarator ( ) 
172. direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end 
173. initializer -> assignment_expression 
174. initializer -> { initializer_list } 
175. initializer -> { initializer_list , } 
176. initializer_list -> initializer 
177. initializer_list -> initializer_list , initializer 
178. statement -> labeled_statement 
179. statement -> compound_statement 
180. statement -> expression_statement 
181. statement -> selection_statement 
182. statement -> iteration_statement 
183. statement -> jump_statement 
184. labeled_statement -> IDENTIFIER : statement 
185. labeled_statement -> CASE constant_expression : statement 
186. labeled_statement -> DEFAULT : statement 
187. compound_statement -> block_start block_end 
188. compound_statement -> block_start statement_list block_end 
189. compound_statement -> block_start declaration_list block_end 
190. compound_statement -> block_start declaration_list statement_list block_end 
191. block_start -> { 
192. block_end -> } 
193. declaration_list -> declaration 
194. declaration_list -> declaration_list declaration 
195. statement_list -> statement 
196. statement_list -> statement_list statement 
197. expression_statement -> ; 
198. expression_statement -> expression ; 
199. selection_statement -> IF ( expression ) statement 
200. selection_statement -> IF ( expression ) statement ELSE 
201. selection_statement -> SWITCH ( expression ) statement 
202. iteration_statement -> WHILE ( expression ) statement 
203. iteration_statement -> DO statement WHILE ( expression ) ; 
204. iteration_statement -> FOR ( expression_statement ) statement 
205. iteration_statement -> FOR ( expression_statement expression ) statement 
206. jump_statement -> GOTO IDENTIFIER ; 
207. jump_statement -> CONTINUE ; 
208. jump_statement -> BREAK ; 
209. jump_statement -> RETURN ; 
210. jump_statement -> RETURN expression ; 
211. translation_unit -> external_declaration 
212. translation_unit -> translation_unit external_declaration 
213. external_declaration -> function_definition 
214. external_declaration -> declaration 
215. function_definition -> declaration_specifiers declarator declaration_list compound_statement 
216. function_definition -> declaration_specifiers declarator compound_statement 
217. function_definition -> declarator declaration_list compound_statement 
218. function_definition -> declarator compound_statement 
219. $start -> translation_unit $eof 

Generating states...
State 0:
K  - [$start -> .translation_unit $eof]
NK - [translation_unit -> .external_declaration]
NK - [translation_unit -> .translation_unit external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
Processing state: 0
Creating itemsets from state: 0
State 1:
K  - [direct_declarator -> IDENTIFIER.]
State 2:
K  - [direct_declarator -> ( .declarator )]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 3:
K  - [pointer -> *.]
K  - [pointer -> * .type_qualifier_list]
K  - [pointer -> * .pointer]
K  - [pointer -> * .type_qualifier_list pointer]
NK - [type_qualifier_list -> .type_qualifier]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
State 4:
K  - [external_declaration -> declaration.]
State 5:
K  - [declaration_specifiers -> type_specifier.]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 6:
K  - [declaration_specifiers -> type_qualifier.]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 7:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers .declarator compound_statement]
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
State 8:
K  - [function_definition -> declarator .declaration_list compound_statement]
K  - [function_definition -> declarator .compound_statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 9:
K  - [declaration_specifiers -> storage_class_specifier.]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 10:
K  - [storage_class_specifier -> STATIC.]
State 11:
K  - [storage_class_specifier -> REGISTER.]
State 12:
K  - [type_specifier -> VOID.]
State 13:
K  - [storage_class_specifier -> EXTERN.]
State 14:
K  - [type_specifier -> SHORT.]
State 15:
K  - [storage_class_specifier -> TYPEDEF.]
State 16:
K  - [storage_class_specifier -> AUTO.]
State 17:
K  - [type_specifier -> INT.]
State 18:
K  - [type_specifier -> CHAR.]
State 19:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER]
NK - [struct_tag_opt -> .IDENTIFIER]
NK - [struct_tag_opt -> .]
State 20:
K  - [type_specifier -> struct_or_union_specifier.]
State 21:
K  - [type_specifier -> enum_specifier.]
State 22:
K  - [type_specifier -> LONG.]
State 23:
K  - [type_specifier -> FLOAT.]
State 24:
K  - [type_specifier -> DOUBLE.]
State 25:
K  - [type_specifier -> SIGNED.]
State 26:
K  - [type_specifier -> UNSIGNED.]
State 27:
K  - [type_specifier -> TYPE_NAME.]
State 28:
K  - [struct_or_union -> STRUCT.]
State 29:
K  - [type_qualifier -> CONST.]
State 30:
K  - [type_qualifier -> VOLATILE.]
State 31:
K  - [enum_specifier -> ENUM .{ enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER]
State 32:
K  - [struct_or_union -> UNION.]
State 33:
K  - [declarator -> pointer .direct_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 34:
K  - [declarator -> direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]
State 35:
K  - [$start -> translation_unit .$eof]
K  - [translation_unit -> translation_unit .external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 36:
K  - [external_declaration -> function_definition.]
State 37:
K  - [translation_unit -> external_declaration.]

Processing state: 1State: 1, Saving reduction to rule135

Creating itemsets from state: 1

Processing state: 2
Creating itemsets from state: 2
State 1 already created
State 2 already created
State 3 already created
State 38:
K  - [direct_declarator -> ( declarator .)]
State 33 already created
State 34 already created

Processing state: 3State: 3, Saving reduction to rule144

Creating itemsets from state: 3
State 3 already created
State 39:
K  - [type_qualifier_list -> type_qualifier.]
State 29 already created
State 30 already created
State 40:
K  - [pointer -> * pointer.]
State 41:
K  - [pointer -> * type_qualifier_list.]
K  - [pointer -> * type_qualifier_list .pointer]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]

Processing state: 4State: 4, Saving reduction to rule214

Creating itemsets from state: 4

Processing state: 5State: 5, Saving reduction to rule79

Creating itemsets from state: 5
State 5 already created
State 6 already created
State 42:
K  - [declaration_specifiers -> type_specifier declaration_specifiers.]
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 6State: 6, Saving reduction to rule81

Creating itemsets from state: 6
State 5 already created
State 6 already created
State 43:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers.]
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 7
Creating itemsets from state: 7
State 1 already created
State 2 already created
State 3 already created
State 44:
K  - [init_declarator_list -> init_declarator.]
State 45:
K  - [declaration -> declaration_specifiers init_declarator_list .;]
K  - [init_declarator_list -> init_declarator_list ., init_declarator]
State 46:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers declarator .compound_statement]
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 47:
K  - [declaration -> declaration_specifiers ;.]
State 33 already created
State 34 already created

Processing state: 8
Creating itemsets from state: 8
State 48:
K  - [declaration_list -> declaration.]
State 5 already created
State 6 already created
State 49:
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 50:
K  - [block_start -> {.]
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 51:
K  - [compound_statement -> block_start .block_end]
K  - [compound_statement -> block_start .statement_list block_end]
K  - [compound_statement -> block_start .declaration_list block_end]
K  - [compound_statement -> block_start .declaration_list statement_list block_end]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 52:
K  - [function_definition -> declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 53:
K  - [function_definition -> declarator compound_statement.]

Processing state: 9State: 9, Saving reduction to rule77

Creating itemsets from state: 9
State 5 already created
State 6 already created
State 54:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers.]
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 10State: 10, Saving reduction to rule89

Creating itemsets from state: 10

Processing state: 11State: 11, Saving reduction to rule91

Creating itemsets from state: 11

Processing state: 12State: 12, Saving reduction to rule92

Creating itemsets from state: 12

Processing state: 13State: 13, Saving reduction to rule88

Creating itemsets from state: 13

Processing state: 14State: 14, Saving reduction to rule94

Creating itemsets from state: 14

Processing state: 15State: 15, Saving reduction to rule87

Creating itemsets from state: 15

Processing state: 16State: 16, Saving reduction to rule90

Creating itemsets from state: 16

Processing state: 17State: 17, Saving reduction to rule95

Creating itemsets from state: 17

Processing state: 18State: 18, Saving reduction to rule93

Creating itemsets from state: 18

Processing state: 19State: 19, Saving reduction to rule107

Creating itemsets from state: 19
State 55:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER.]
K  - [struct_tag_opt -> IDENTIFIER.]
State 56:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_definition_start -> .{]

Processing state: 20State: 20, Saving reduction to rule101

Creating itemsets from state: 20

Processing state: 21State: 21, Saving reduction to rule102

Creating itemsets from state: 21

Processing state: 22State: 22, Saving reduction to rule96

Creating itemsets from state: 22

Processing state: 23State: 23, Saving reduction to rule97

Creating itemsets from state: 23

Processing state: 24State: 24, Saving reduction to rule98

Creating itemsets from state: 24

Processing state: 25State: 25, Saving reduction to rule99

Creating itemsets from state: 25

Processing state: 26State: 26, Saving reduction to rule100

Creating itemsets from state: 26

Processing state: 27State: 27, Saving reduction to rule103

Creating itemsets from state: 27

Processing state: 28State: 28, Saving reduction to rule110

Creating itemsets from state: 28

Processing state: 29State: 29, Saving reduction to rule131

Creating itemsets from state: 29

Processing state: 30State: 30, Saving reduction to rule132

Creating itemsets from state: 30

Processing state: 31
Creating itemsets from state: 31
State 57:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }]
K  - [enum_specifier -> ENUM IDENTIFIER.]
State 58:
K  - [enum_specifier -> ENUM { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]

Processing state: 32State: 32, Saving reduction to rule111

Creating itemsets from state: 32

Processing state: 33
Creating itemsets from state: 33
State 1 already created
State 2 already created
State 59:
K  - [declarator -> pointer direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]

Processing state: 34State: 34, Saving reduction to rule134

Creating itemsets from state: 34
State 60:
K  - [direct_declarator -> direct_declarator [ .constant_expression ]]
K  - [direct_declarator -> direct_declarator [ .]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 61:
K  - [direct_declarator -> direct_declarator ( .)]
K  - [parameter_list_start -> (.]
State 62:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [identifier_list -> .IDENTIFIER]
NK - [identifier_list -> .identifier_list , IDENTIFIER]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 35
Creating itemsets from state: 35
State 63:
K  - [$start -> translation_unit $eof.]
State 1 already created
State 2 already created
State 3 already created
State 4 already created
State 5 already created
State 6 already created
State 7 already created
State 8 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 33 already created
State 34 already created
State 36 already created
State 64:
K  - [translation_unit -> translation_unit external_declaration.]

Processing state: 36State: 36, Saving reduction to rule213

Creating itemsets from state: 36

Processing state: 37State: 37, Saving reduction to rule211

Creating itemsets from state: 37

Processing state: 38
Creating itemsets from state: 38
State 65:
K  - [direct_declarator -> ( declarator ).]

Processing state: 39State: 39, Saving reduction to rule148

Creating itemsets from state: 39

Processing state: 40State: 40, Saving reduction to rule146

Creating itemsets from state: 40

Processing state: 41State: 41, Saving reduction to rule145

Creating itemsets from state: 41
State 3 already created
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier.]
State 29 already created
State 30 already created
State 67:
K  - [pointer -> * type_qualifier_list pointer.]

Processing state: 42State: 42, Saving reduction to rule80

Creating itemsets from state: 42

Processing state: 43State: 43, Saving reduction to rule82

Creating itemsets from state: 43

Processing state: 44State: 44, Saving reduction to rule83

Creating itemsets from state: 44

Processing state: 45
Creating itemsets from state: 45
State 68:
K  - [init_declarator_list -> init_declarator_list , .init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 69:
K  - [declaration -> declaration_specifiers init_declarator_list ;.]

Processing state: 46State: 46, Saving reduction to rule85

Creating itemsets from state: 46
State 48 already created
State 5 already created
State 6 already created
State 49 already created
State 9 already created
State 70:
K  - [init_declarator -> declarator = .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 50 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 51 already created
State 71:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 72:
K  - [function_definition -> declaration_specifiers declarator compound_statement.]

Processing state: 47State: 47, Saving reduction to rule75

Creating itemsets from state: 47

Processing state: 48State: 48, Saving reduction to rule193

Creating itemsets from state: 48

Processing state: 49
Creating itemsets from state: 49
State 1 already created
State 2 already created
State 3 already created
State 44 already created
State 45 already created
State 73:
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
State 47 already created
State 33 already created
State 34 already created

Processing state: 50State: 50, Saving reduction to rule191

Creating itemsets from state: 50

Processing state: 51
Creating itemsets from state: 51
State 74:
K  - [postfix_expression -> primary_expression.]
State 75:
K  - [expression_statement -> expression .;]
K  - [expression -> expression ., assignment_expression]
State 76:
K  - [logical_and_expression -> inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 77:
K  - [unary_expression -> postfix_expression.]
K  - [postfix_expression -> postfix_expression .[ expression ]]
K  - [postfix_expression -> postfix_expression .( )]
K  - [postfix_expression -> postfix_expression .( argument_expression_list )]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER]
K  - [postfix_expression -> postfix_expression .INC_OP]
K  - [postfix_expression -> postfix_expression .DEC_OP]
NK - [struct_member_accessor -> ..]
NK - [struct_member_accessor -> .PTR_OP]
State 78:
K  - [labeled_statement -> IDENTIFIER .: statement]
K  - [primary_expression -> IDENTIFIER.]
State 79:
K  - [primary_expression -> STRING_LITERAL.]
State 80:
K  - [primary_expression -> ( .expression )]
K  - [cast_expression -> ( .type_name ) cast_expression]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81:
K  - [primary_expression -> CONSTANT.]
State 82:
K  - [unary_expression -> INC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 83:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression]
K  - [cast_expression -> unary_expression.]
NK - [assignment_operator -> .=]
NK - [assignment_operator -> .MUL_ASSIGN]
NK - [assignment_operator -> .DIV_ASSIGN]
NK - [assignment_operator -> .MOD_ASSIGN]
NK - [assignment_operator -> .ADD_ASSIGN]
NK - [assignment_operator -> .SUB_ASSIGN]
NK - [assignment_operator -> .LEFT_ASSIGN]
NK - [assignment_operator -> .RIGHT_ASSIGN]
NK - [assignment_operator -> .AND_ASSIGN]
NK - [assignment_operator -> .XOR_ASSIGN]
NK - [assignment_operator -> .OR_ASSIGN]
State 84:
K  - [shift_expression -> additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 85:
K  - [multiplicative_expression -> cast_expression.]
State 86:
K  - [additive_expression -> multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 87:
K  - [unary_expression -> unary_operator .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 88:
K  - [expression -> assignment_expression.]
State 89:
K  - [and_expression -> equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 90:
K  - [relational_expression -> shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 91:
K  - [equality_expression -> relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 92:
K  - [exclusive_or_expression -> and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 93:
K  - [inclusive_or_expression -> exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 94:
K  - [unary_operator -> +.]
State 95:
K  - [unary_expression -> SIZEOF .unary_expression]
K  - [unary_expression -> SIZEOF .( type_name )]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 96:
K  - [unary_expression -> DEC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 97:
K  - [unary_operator -> &.]
State 98:
K  - [unary_operator -> *.]
State 99:
K  - [unary_operator -> -.]
State 100:
K  - [unary_operator -> ~.]
State 101:
K  - [unary_operator -> !.]
State 48 already created
State 5 already created
State 6 already created
State 49 already created
State 9 already created
State 102:
K  - [logical_or_expression -> logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 103:
K  - [assignment_expression -> conditional_expression.]
State 104:
K  - [conditional_expression -> logical_or_expression.]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression]
State 105:
K  - [expression_statement -> ;.]
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 50 already created
State 22 already created
State 106:
K  - [block_end -> }.]
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 107:
K  - [statement -> expression_statement.]
State 108:
K  - [statement -> selection_statement.]
State 109:
K  - [statement -> iteration_statement.]
State 110:
K  - [statement -> jump_statement.]
State 51 already created
State 111:
K  - [compound_statement -> block_start block_end.]
State 112:
K  - [compound_statement -> block_start statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 113:
K  - [compound_statement -> block_start declaration_list .block_end]
K  - [compound_statement -> block_start declaration_list .statement_list block_end]
K  - [declaration_list -> declaration_list .declaration]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 114:
K  - [statement -> compound_statement.]
State 115:
K  - [statement -> labeled_statement.]
State 116:
K  - [statement_list -> statement.]
State 117:
K  - [labeled_statement -> CASE .constant_expression : statement]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 118:
K  - [labeled_statement -> DEFAULT .: statement]
State 119:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 120:
K  - [selection_statement -> IF .( expression ) statement]
K  - [selection_statement -> IF .( expression ) statement ELSE]
State 121:
K  - [jump_statement -> BREAK .;]
State 122:
K  - [selection_statement -> SWITCH .( expression ) statement]
State 123:
K  - [iteration_statement -> WHILE .( expression ) statement]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement]
State 125:
K  - [jump_statement -> GOTO .IDENTIFIER ;]
State 126:
K  - [jump_statement -> CONTINUE .;]
State 127:
K  - [jump_statement -> RETURN .;]
K  - [jump_statement -> RETURN .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 52
Creating itemsets from state: 52
State 128:
K  - [declaration_list -> declaration_list declaration.]
State 5 already created
State 6 already created
State 49 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 50 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 51 already created
State 129:
K  - [function_definition -> declarator declaration_list compound_statement.]

Processing state: 53State: 53, Saving reduction to rule218

Creating itemsets from state: 53

Processing state: 54State: 54, Saving reduction to rule78

Creating itemsets from state: 54

Processing state: 55State: 55, Saving reduction to rule105
State: 55, Saving reduction to rule106

Creating itemsets from state: 55

Processing state: 56
Creating itemsets from state: 56
State 130:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end]
NK - [struct_declaration_list -> .struct_declaration]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 131:
K  - [struct_definition_start -> {.]

Processing state: 57State: 57, Saving reduction to rule126

Creating itemsets from state: 57
State 132:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]

Processing state: 58
Creating itemsets from state: 58
State 133:
K  - [enumerator -> IDENTIFIER.]
K  - [enumerator -> IDENTIFIER .= constant_expression]
State 134:
K  - [enum_specifier -> ENUM { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 135:
K  - [enumerator_list -> enumerator.]

Processing state: 59State: 59, Saving reduction to rule133

Creating itemsets from state: 59
State 60 already created
State 61 already created
State 62 already created

Processing state: 60
Creating itemsets from state: 60
State 74 already created
State 76 already created
State 77 already created
State 136:
K  - [primary_expression -> IDENTIFIER.]
State 79 already created
State 137:
K  - [direct_declarator -> direct_declarator [ ].]
State 80 already created
State 81 already created
State 82 already created
State 138:
K  - [cast_expression -> unary_expression.]
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 139:
K  - [direct_declarator -> direct_declarator [ constant_expression .]]
State 102 already created
State 140:
K  - [constant_expression -> conditional_expression.]
State 104 already created

Processing state: 61State: 61, Saving reduction to rule142

Creating itemsets from state: 61
State 141:
K  - [direct_declarator -> direct_declarator ( ).]

Processing state: 62
Creating itemsets from state: 62
State 142:
K  - [identifier_list -> IDENTIFIER.]
State 5 already created
State 6 already created
State 143:
K  - [parameter_declaration -> declaration_specifiers .declarator]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator]
K  - [parameter_declaration -> declaration_specifiers.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 144:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end]
K  - [identifier_list -> identifier_list ., IDENTIFIER]
NK - [parameter_list_end -> .)]
State 145:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 146:
K  - [parameter_type_list -> parameter_list.]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS]
K  - [parameter_list -> parameter_list ., parameter_declaration]
State 147:
K  - [parameter_list -> parameter_declaration.]

Processing state: 63State: 63, Saving reduction to rule219

Creating itemsets from state: 63

Processing state: 64State: 64, Saving reduction to rule212

Creating itemsets from state: 64

Processing state: 65State: 65, Saving reduction to rule136

Creating itemsets from state: 65

Processing state: 66State: 66, Saving reduction to rule149

Creating itemsets from state: 66

Processing state: 67State: 67, Saving reduction to rule147

Creating itemsets from state: 67

Processing state: 68
Creating itemsets from state: 68
State 1 already created
State 2 already created
State 3 already created
State 148:
K  - [init_declarator_list -> init_declarator_list , init_declarator.]
State 73 already created
State 33 already created
State 34 already created

Processing state: 69State: 69, Saving reduction to rule76

Creating itemsets from state: 69

Processing state: 70
Creating itemsets from state: 70
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 149:
K  - [initializer -> assignment_expression.]
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 150:
K  - [init_declarator -> declarator = initializer.]
State 102 already created
State 103 already created
State 104 already created
State 151:
K  - [initializer -> { .initializer_list }]
K  - [initializer -> { .initializer_list , }]
NK - [initializer_list -> .initializer]
NK - [initializer_list -> .initializer_list , initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 71
Creating itemsets from state: 71
State 128 already created
State 5 already created
State 6 already created
State 49 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 50 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 51 already created
State 152:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement.]

Processing state: 72State: 72, Saving reduction to rule216

Creating itemsets from state: 72

Processing state: 73State: 73, Saving reduction to rule85

Creating itemsets from state: 73
State 70 already created

Processing state: 74State: 74, Saving reduction to rule4

Creating itemsets from state: 74

Processing state: 75
Creating itemsets from state: 75
State 153:
K  - [expression -> expression , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 154:
K  - [expression_statement -> expression ;.]

Processing state: 76State: 76, Saving reduction to rule53

Creating itemsets from state: 76
State 155:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 77State: 77, Saving reduction to rule15

Creating itemsets from state: 77
State 156:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER]
State 157:
K  - [postfix_expression -> postfix_expression [ .expression ]]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 158:
K  - [postfix_expression -> postfix_expression ( .)]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list )]
NK - [argument_expression_list -> .assignment_expression]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 159:
K  - [postfix_expression -> postfix_expression INC_OP.]
State 160:
K  - [struct_member_accessor -> ..]
State 161:
K  - [postfix_expression -> postfix_expression DEC_OP.]
State 162:
K  - [struct_member_accessor -> PTR_OP.]

Processing state: 78State: 78, Saving reduction to rule0

Creating itemsets from state: 78
State 163:
K  - [labeled_statement -> IDENTIFIER : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 79State: 79, Saving reduction to rule2

Creating itemsets from state: 79

Processing state: 80
Creating itemsets from state: 80
State 74 already created
State 164:
K  - [primary_expression -> ( expression .)]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 165:
K  - [cast_expression -> ( type_name .) cast_expression]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 166:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_specifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 167:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_qualifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 102 already created
State 103 already created
State 104 already created
State 12 already created
State 14 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 168:
K  - [type_name -> specifier_qualifier_list.]
K  - [type_name -> specifier_qualifier_list .abstract_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 81State: 81, Saving reduction to rule1

Creating itemsets from state: 81

Processing state: 82
Creating itemsets from state: 82
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 169:
K  - [primary_expression -> ( .expression )]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81 already created
State 82 already created
State 170:
K  - [unary_expression -> INC_OP unary_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 83State: 83, Saving reduction to rule27

Creating itemsets from state: 83
State 171:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 172:
K  - [assignment_operator -> MUL_ASSIGN.]
State 173:
K  - [assignment_operator -> =.]
State 174:
K  - [assignment_operator -> DIV_ASSIGN.]
State 175:
K  - [assignment_operator -> MOD_ASSIGN.]
State 176:
K  - [assignment_operator -> LEFT_ASSIGN.]
State 177:
K  - [assignment_operator -> ADD_ASSIGN.]
State 178:
K  - [assignment_operator -> AND_ASSIGN.]
State 179:
K  - [assignment_operator -> XOR_ASSIGN.]
State 180:
K  - [assignment_operator -> SUB_ASSIGN.]
State 181:
K  - [assignment_operator -> RIGHT_ASSIGN.]
State 182:
K  - [assignment_operator -> OR_ASSIGN.]

Processing state: 84State: 84, Saving reduction to rule36

Creating itemsets from state: 84
State 183:
K  - [additive_expression -> additive_expression + .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 184:
K  - [additive_expression -> additive_expression - .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 85State: 85, Saving reduction to rule29

Creating itemsets from state: 85

Processing state: 86State: 86, Saving reduction to rule33

Creating itemsets from state: 86
State 185:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 186:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 187:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 87
Creating itemsets from state: 87
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 188:
K  - [unary_expression -> unary_operator cast_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 88State: 88, Saving reduction to rule72

Creating itemsets from state: 88

Processing state: 89State: 89, Saving reduction to rule47

Creating itemsets from state: 89
State 189:
K  - [equality_expression -> equality_expression NE_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 190:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 90State: 90, Saving reduction to rule39

Creating itemsets from state: 90
State 191:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 192:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 91State: 91, Saving reduction to rule44

Creating itemsets from state: 91
State 193:
K  - [relational_expression -> relational_expression > .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 194:
K  - [relational_expression -> relational_expression < .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 195:
K  - [relational_expression -> relational_expression LE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 196:
K  - [relational_expression -> relational_expression GE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 92State: 92, Saving reduction to rule49

Creating itemsets from state: 92
State 197:
K  - [and_expression -> and_expression & .equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 93State: 93, Saving reduction to rule51

Creating itemsets from state: 93
State 198:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 94State: 94, Saving reduction to rule23

Creating itemsets from state: 94

Processing state: 95
Creating itemsets from state: 95
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 199:
K  - [unary_expression -> SIZEOF ( .type_name )]
K  - [primary_expression -> ( .expression )]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81 already created
State 82 already created
State 200:
K  - [unary_expression -> SIZEOF unary_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 96
Creating itemsets from state: 96
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 169 already created
State 81 already created
State 82 already created
State 201:
K  - [unary_expression -> DEC_OP unary_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 97State: 97, Saving reduction to rule21

Creating itemsets from state: 97

Processing state: 98State: 98, Saving reduction to rule22

Creating itemsets from state: 98

Processing state: 99State: 99, Saving reduction to rule24

Creating itemsets from state: 99

Processing state: 100State: 100, Saving reduction to rule25

Creating itemsets from state: 100

Processing state: 101State: 101, Saving reduction to rule26

Creating itemsets from state: 101

Processing state: 102State: 102, Saving reduction to rule55

Creating itemsets from state: 102
State 202:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 103State: 103, Saving reduction to rule59

Creating itemsets from state: 103

Processing state: 104State: 104, Saving reduction to rule57

Creating itemsets from state: 104
State 203:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 204:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 105State: 105, Saving reduction to rule197

Creating itemsets from state: 105

Processing state: 106State: 106, Saving reduction to rule192

Creating itemsets from state: 106

Processing state: 107State: 107, Saving reduction to rule180

Creating itemsets from state: 107

Processing state: 108State: 108, Saving reduction to rule181

Creating itemsets from state: 108

Processing state: 109State: 109, Saving reduction to rule182

Creating itemsets from state: 109

Processing state: 110State: 110, Saving reduction to rule183

Creating itemsets from state: 110

Processing state: 111State: 111, Saving reduction to rule187

Creating itemsets from state: 111

Processing state: 112
Creating itemsets from state: 112
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 106 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 205:
K  - [compound_statement -> block_start statement_list block_end.]
State 114 already created
State 115 already created
State 206:
K  - [statement_list -> statement_list statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 113
Creating itemsets from state: 113
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 128 already created
State 5 already created
State 6 already created
State 49 already created
State 9 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 50 already created
State 22 already created
State 106 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 207:
K  - [compound_statement -> block_start declaration_list block_end.]
State 208:
K  - [compound_statement -> block_start declaration_list statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 114 already created
State 115 already created
State 116 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 114State: 114, Saving reduction to rule179

Creating itemsets from state: 114

Processing state: 115State: 115, Saving reduction to rule178

Creating itemsets from state: 115

Processing state: 116State: 116, Saving reduction to rule195

Creating itemsets from state: 116

Processing state: 117
Creating itemsets from state: 117
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 209:
K  - [labeled_statement -> CASE constant_expression .: statement]
State 102 already created
State 140 already created
State 104 already created

Processing state: 118
Creating itemsets from state: 118
State 210:
K  - [labeled_statement -> DEFAULT : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 119
Creating itemsets from state: 119
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 211:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 120
Creating itemsets from state: 120
State 212:
K  - [selection_statement -> IF ( .expression ) statement]
K  - [selection_statement -> IF ( .expression ) statement ELSE]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 121
Creating itemsets from state: 121
State 213:
K  - [jump_statement -> BREAK ;.]

Processing state: 122
Creating itemsets from state: 122
State 214:
K  - [selection_statement -> SWITCH ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 123
Creating itemsets from state: 123
State 215:
K  - [iteration_statement -> WHILE ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 124
Creating itemsets from state: 124
State 216:
K  - [iteration_statement -> FOR ( .expression_statement ) statement]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 125
Creating itemsets from state: 125
State 217:
K  - [jump_statement -> GOTO IDENTIFIER .;]

Processing state: 126
Creating itemsets from state: 126
State 218:
K  - [jump_statement -> CONTINUE ;.]

Processing state: 127
Creating itemsets from state: 127
State 74 already created
State 219:
K  - [jump_statement -> RETURN expression .;]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 220:
K  - [jump_statement -> RETURN ;.]

Processing state: 128State: 128, Saving reduction to rule194

Creating itemsets from state: 128

Processing state: 129State: 129, Saving reduction to rule217

Creating itemsets from state: 129

Processing state: 130
Creating itemsets from state: 130
State 166 already created
State 167 already created
State 12 already created
State 14 already created
State 17 already created
State 18 already created
State 221:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration]
NK - [struct_definition_end -> .}]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 19 already created
State 20 already created
State 222:
K  - [struct_declaration_list -> struct_declaration.]
State 21 already created
State 223:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;]
NK - [struct_declarator_list -> .struct_declarator]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 131State: 131, Saving reduction to rule108

Creating itemsets from state: 131

Processing state: 132
Creating itemsets from state: 132
State 133 already created
State 224:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 135 already created

Processing state: 133State: 133, Saving reduction to rule129

Creating itemsets from state: 133
State 225:
K  - [enumerator -> IDENTIFIER = .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 134
Creating itemsets from state: 134
State 226:
K  - [enumerator_list -> enumerator_list , .enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 227:
K  - [enum_specifier -> ENUM { enumerator_list }.]

Processing state: 135State: 135, Saving reduction to rule127

Creating itemsets from state: 135

Processing state: 136State: 136, Saving reduction to rule0

Creating itemsets from state: 136

Processing state: 137State: 137, Saving reduction to rule138

Creating itemsets from state: 137

Processing state: 138State: 138, Saving reduction to rule27

Creating itemsets from state: 138

Processing state: 139
Creating itemsets from state: 139
State 228:
K  - [direct_declarator -> direct_declarator [ constant_expression ].]

Processing state: 140State: 140, Saving reduction to rule74

Creating itemsets from state: 140

Processing state: 141State: 141, Saving reduction to rule141

Creating itemsets from state: 141

Processing state: 142State: 142, Saving reduction to rule157

Creating itemsets from state: 142

Processing state: 143State: 143, Saving reduction to rule156

Creating itemsets from state: 143
State 1 already created
State 229:
K  - [direct_abstract_declarator -> [ .]]
K  - [direct_abstract_declarator -> [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 230:
K  - [direct_declarator -> ( .declarator )]
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 3 already created
State 231:
K  - [parameter_declaration -> declaration_specifiers declarator.]
State 232:
K  - [declarator -> pointer .direct_declarator]
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 233:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 34 already created
State 234:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator.]
State 235:
K  - [abstract_declarator -> direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]

Processing state: 144
Creating itemsets from state: 144
State 236:
K  - [parameter_list_end -> ).]
State 237:
K  - [identifier_list -> identifier_list , .IDENTIFIER]
State 238:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end.]

Processing state: 145
Creating itemsets from state: 145
State 236 already created
State 239:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end.]

Processing state: 146State: 146, Saving reduction to rule150

Creating itemsets from state: 146
State 240:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS]
K  - [parameter_list -> parameter_list , .parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 147State: 147, Saving reduction to rule152

Creating itemsets from state: 147

Processing state: 148State: 148, Saving reduction to rule84

Creating itemsets from state: 148

Processing state: 149State: 149, Saving reduction to rule173

Creating itemsets from state: 149

Processing state: 150State: 150, Saving reduction to rule86

Creating itemsets from state: 150

Processing state: 151
Creating itemsets from state: 151
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 149 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 241:
K  - [initializer_list -> initializer.]
State 102 already created
State 103 already created
State 104 already created
State 151 already created
State 242:
K  - [initializer -> { initializer_list .}]
K  - [initializer -> { initializer_list ., }]
K  - [initializer_list -> initializer_list ., initializer]

Processing state: 152State: 152, Saving reduction to rule215

Creating itemsets from state: 152

Processing state: 153
Creating itemsets from state: 153
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 243:
K  - [expression -> expression , assignment_expression.]
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 154State: 154, Saving reduction to rule198

Creating itemsets from state: 154

Processing state: 155
Creating itemsets from state: 155
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 244:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 156
Creating itemsets from state: 156
State 245:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER.]

Processing state: 157
Creating itemsets from state: 157
State 74 already created
State 246:
K  - [postfix_expression -> postfix_expression [ expression .]]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 158
Creating itemsets from state: 158
State 74 already created
State 247:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .)]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 248:
K  - [postfix_expression -> postfix_expression ( ).]
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 249:
K  - [argument_expression_list -> assignment_expression.]
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 159State: 159, Saving reduction to rule9

Creating itemsets from state: 159

Processing state: 160State: 160, Saving reduction to rule11

Creating itemsets from state: 160

Processing state: 161State: 161, Saving reduction to rule10

Creating itemsets from state: 161

Processing state: 162State: 162, Saving reduction to rule12

Creating itemsets from state: 162

Processing state: 163
Creating itemsets from state: 163
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 250:
K  - [labeled_statement -> IDENTIFIER : statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 164
Creating itemsets from state: 164
State 251:
K  - [primary_expression -> ( expression ).]
State 153 already created

Processing state: 165
Creating itemsets from state: 165
State 252:
K  - [cast_expression -> ( type_name ) .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 166State: 166, Saving reduction to rule116

Creating itemsets from state: 166
State 166 already created
State 167 already created
State 12 already created
State 14 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 253:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list.]
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 167State: 167, Saving reduction to rule118

Creating itemsets from state: 167
State 166 already created
State 167 already created
State 12 already created
State 14 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 254:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list.]
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 168State: 168, Saving reduction to rule159

Creating itemsets from state: 168
State 229 already created
State 255:
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 3 already created
State 256:
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 233 already created
State 257:
K  - [type_name -> specifier_qualifier_list abstract_declarator.]
State 235 already created

Processing state: 169
Creating itemsets from state: 169
State 74 already created
State 164 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 170State: 170, Saving reduction to rule16

Creating itemsets from state: 170

Processing state: 171
Creating itemsets from state: 171
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 258:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression.]
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 172State: 172, Saving reduction to rule62

Creating itemsets from state: 172

Processing state: 173State: 173, Saving reduction to rule61

Creating itemsets from state: 173

Processing state: 174State: 174, Saving reduction to rule63

Creating itemsets from state: 174

Processing state: 175State: 175, Saving reduction to rule64

Creating itemsets from state: 175

Processing state: 176State: 176, Saving reduction to rule67

Creating itemsets from state: 176

Processing state: 177State: 177, Saving reduction to rule65

Creating itemsets from state: 177

Processing state: 178State: 178, Saving reduction to rule69

Creating itemsets from state: 178

Processing state: 179State: 179, Saving reduction to rule70

Creating itemsets from state: 179

Processing state: 180State: 180, Saving reduction to rule66

Creating itemsets from state: 180

Processing state: 181State: 181, Saving reduction to rule68

Creating itemsets from state: 181

Processing state: 182State: 182, Saving reduction to rule71

Creating itemsets from state: 182

Processing state: 183
Creating itemsets from state: 183
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 85 already created
State 259:
K  - [additive_expression -> additive_expression + multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 184
Creating itemsets from state: 184
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 85 already created
State 260:
K  - [additive_expression -> additive_expression - multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 185
Creating itemsets from state: 185
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 261:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 186
Creating itemsets from state: 186
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 262:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 187
Creating itemsets from state: 187
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 263:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 188State: 188, Saving reduction to rule18

Creating itemsets from state: 188

Processing state: 189
Creating itemsets from state: 189
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 90 already created
State 264:
K  - [equality_expression -> equality_expression NE_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 190
Creating itemsets from state: 190
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 90 already created
State 265:
K  - [equality_expression -> equality_expression EQ_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 191
Creating itemsets from state: 191
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 266:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 85 already created
State 86 already created
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 192
Creating itemsets from state: 192
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 267:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 85 already created
State 86 already created
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 193
Creating itemsets from state: 193
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 268:
K  - [relational_expression -> relational_expression > shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 194
Creating itemsets from state: 194
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 269:
K  - [relational_expression -> relational_expression < shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 195
Creating itemsets from state: 195
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 270:
K  - [relational_expression -> relational_expression LE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 196
Creating itemsets from state: 196
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 271:
K  - [relational_expression -> relational_expression GE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 197
Creating itemsets from state: 197
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 272:
K  - [and_expression -> and_expression & equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 90 already created
State 91 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 198
Creating itemsets from state: 198
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 273:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 199
Creating itemsets from state: 199
State 74 already created
State 164 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 274:
K  - [unary_expression -> SIZEOF ( type_name .)]
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 166 already created
State 167 already created
State 102 already created
State 103 already created
State 104 already created
State 12 already created
State 14 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 168 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 200State: 200, Saving reduction to rule19

Creating itemsets from state: 200

Processing state: 201State: 201, Saving reduction to rule17

Creating itemsets from state: 201

Processing state: 202
Creating itemsets from state: 202
State 74 already created
State 275:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 203
Creating itemsets from state: 203
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 276:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]

Processing state: 204
Creating itemsets from state: 204
State 74 already created
State 277:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 205State: 205, Saving reduction to rule188

Creating itemsets from state: 205

Processing state: 206State: 206, Saving reduction to rule196

Creating itemsets from state: 206

Processing state: 207State: 207, Saving reduction to rule189

Creating itemsets from state: 207

Processing state: 208
Creating itemsets from state: 208
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 106 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 278:
K  - [compound_statement -> block_start declaration_list statement_list block_end.]
State 114 already created
State 115 already created
State 206 already created
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 209
Creating itemsets from state: 209
State 279:
K  - [labeled_statement -> CASE constant_expression : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 210
Creating itemsets from state: 210
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 280:
K  - [labeled_statement -> DEFAULT : statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 211
Creating itemsets from state: 211
State 281:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;]

Processing state: 212
Creating itemsets from state: 212
State 74 already created
State 282:
K  - [selection_statement -> IF ( expression .) statement]
K  - [selection_statement -> IF ( expression .) statement ELSE]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 213State: 213, Saving reduction to rule208

Creating itemsets from state: 213

Processing state: 214
Creating itemsets from state: 214
State 74 already created
State 283:
K  - [selection_statement -> SWITCH ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 215
Creating itemsets from state: 215
State 74 already created
State 284:
K  - [iteration_statement -> WHILE ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 216
Creating itemsets from state: 216
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 285:
K  - [iteration_statement -> FOR ( expression_statement .) statement]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 217
Creating itemsets from state: 217
State 286:
K  - [jump_statement -> GOTO IDENTIFIER ;.]

Processing state: 218State: 218, Saving reduction to rule207

Creating itemsets from state: 218

Processing state: 219
Creating itemsets from state: 219
State 153 already created
State 287:
K  - [jump_statement -> RETURN expression ;.]

Processing state: 220State: 220, Saving reduction to rule209

Creating itemsets from state: 220

Processing state: 221
Creating itemsets from state: 221
State 166 already created
State 167 already created
State 12 already created
State 14 already created
State 17 already created
State 18 already created
State 288:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end.]
State 19 already created
State 20 already created
State 289:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration.]
State 21 already created
State 223 already created
State 22 already created
State 290:
K  - [struct_definition_end -> }.]
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created

Processing state: 222State: 222, Saving reduction to rule112

Creating itemsets from state: 222

Processing state: 223
Creating itemsets from state: 223
State 1 already created
State 2 already created
State 3 already created
State 291:
K  - [struct_declarator -> declarator.]
K  - [struct_declarator -> declarator .: constant_expression]
State 292:
K  - [struct_declarator -> : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 293:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator]
State 294:
K  - [struct_declarator_list -> struct_declarator.]
State 33 already created
State 34 already created

Processing state: 224
Creating itemsets from state: 224
State 226 already created
State 295:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }.]

Processing state: 225
Creating itemsets from state: 225
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 296:
K  - [enumerator -> IDENTIFIER = constant_expression.]
State 102 already created
State 140 already created
State 104 already created

Processing state: 226
Creating itemsets from state: 226
State 133 already created
State 297:
K  - [enumerator_list -> enumerator_list , enumerator.]

Processing state: 227State: 227, Saving reduction to rule124

Creating itemsets from state: 227

Processing state: 228State: 228, Saving reduction to rule137

Creating itemsets from state: 228

Processing state: 229
Creating itemsets from state: 229
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 298:
K  - [direct_abstract_declarator -> [ ].]
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 299:
K  - [direct_abstract_declarator -> [ constant_expression .]]
State 102 already created
State 140 already created
State 104 already created

Processing state: 230State: 230, Saving reduction to rule142

Creating itemsets from state: 230
State 1 already created
State 229 already created
State 230 already created
State 300:
K  - [direct_abstract_declarator -> ( ).]
State 3 already created
State 38 already created
State 232 already created
State 233 already created
State 34 already created
State 301:
K  - [direct_abstract_declarator -> ( abstract_declarator .)]
State 235 already created

Processing state: 231State: 231, Saving reduction to rule154

Creating itemsets from state: 231

Processing state: 232State: 232, Saving reduction to rule161

Creating itemsets from state: 232
State 1 already created
State 229 already created
State 230 already created
State 233 already created
State 59 already created
State 302:
K  - [abstract_declarator -> pointer direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]

Processing state: 233
Creating itemsets from state: 233
State 5 already created
State 6 already created
State 143 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 303:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 146 already created
State 147 already created

Processing state: 234State: 234, Saving reduction to rule155

Creating itemsets from state: 234

Processing state: 235State: 235, Saving reduction to rule162

Creating itemsets from state: 235
State 304:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .]]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 305:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .)]
K  - [parameter_list_start -> (.]
State 306:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]

Processing state: 236State: 236, Saving reduction to rule143

Creating itemsets from state: 236

Processing state: 237
Creating itemsets from state: 237
State 307:
K  - [identifier_list -> identifier_list , IDENTIFIER.]

Processing state: 238State: 238, Saving reduction to rule140

Creating itemsets from state: 238

Processing state: 239State: 239, Saving reduction to rule139

Creating itemsets from state: 239

Processing state: 240
Creating itemsets from state: 240
State 5 already created
State 6 already created
State 143 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 308:
K  - [parameter_list -> parameter_list , parameter_declaration.]
State 309:
K  - [parameter_type_list -> parameter_list , ELLIPSIS.]

Processing state: 241State: 241, Saving reduction to rule176

Creating itemsets from state: 241

Processing state: 242
Creating itemsets from state: 242
State 310:
K  - [initializer -> { initializer_list , .}]
K  - [initializer_list -> initializer_list , .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 311:
K  - [initializer -> { initializer_list }.]

Processing state: 243State: 243, Saving reduction to rule73

Creating itemsets from state: 243

Processing state: 244State: 244, Saving reduction to rule52

Creating itemsets from state: 244
State 198 already created

Processing state: 245State: 245, Saving reduction to rule8

Creating itemsets from state: 245

Processing state: 246
Creating itemsets from state: 246
State 312:
K  - [postfix_expression -> postfix_expression [ expression ].]
State 153 already created

Processing state: 247
Creating itemsets from state: 247
State 313:
K  - [postfix_expression -> postfix_expression ( argument_expression_list ).]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 248State: 248, Saving reduction to rule6

Creating itemsets from state: 248

Processing state: 249State: 249, Saving reduction to rule13

Creating itemsets from state: 249

Processing state: 250State: 250, Saving reduction to rule184

Creating itemsets from state: 250

Processing state: 251State: 251, Saving reduction to rule3

Creating itemsets from state: 251

Processing state: 252
Creating itemsets from state: 252
State 74 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 315:
K  - [cast_expression -> ( type_name ) cast_expression.]
State 87 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created

Processing state: 253State: 253, Saving reduction to rule115

Creating itemsets from state: 253

Processing state: 254State: 254, Saving reduction to rule117

Creating itemsets from state: 254

Processing state: 255State: 255, Saving reduction to rule142

Creating itemsets from state: 255
State 229 already created
State 255 already created
State 300 already created
State 3 already created
State 256 already created
State 233 already created
State 301 already created
State 235 already created

Processing state: 256State: 256, Saving reduction to rule161

Creating itemsets from state: 256
State 229 already created
State 255 already created
State 233 already created
State 302 already created

Processing state: 257State: 257, Saving reduction to rule160

Creating itemsets from state: 257

Processing state: 258State: 258, Saving reduction to rule60

Creating itemsets from state: 258

Processing state: 259State: 259, Saving reduction to rule34

Creating itemsets from state: 259
State 185 already created
State 186 already created
State 187 already created

Processing state: 260State: 260, Saving reduction to rule35

Creating itemsets from state: 260
State 185 already created
State 186 already created
State 187 already created

Processing state: 261State: 261, Saving reduction to rule30

Creating itemsets from state: 261

Processing state: 262State: 262, Saving reduction to rule32

Creating itemsets from state: 262

Processing state: 263State: 263, Saving reduction to rule31

Creating itemsets from state: 263

Processing state: 264State: 264, Saving reduction to rule46

Creating itemsets from state: 264
State 193 already created
State 194 already created
State 195 already created
State 196 already created

Processing state: 265State: 265, Saving reduction to rule45

Creating itemsets from state: 265
State 193 already created
State 194 already created
State 195 already created
State 196 already created

Processing state: 266State: 266, Saving reduction to rule38

Creating itemsets from state: 266
State 183 already created
State 184 already created

Processing state: 267State: 267, Saving reduction to rule37

Creating itemsets from state: 267
State 183 already created
State 184 already created

Processing state: 268State: 268, Saving reduction to rule41

Creating itemsets from state: 268
State 191 already created
State 192 already created

Processing state: 269State: 269, Saving reduction to rule40

Creating itemsets from state: 269
State 191 already created
State 192 already created

Processing state: 270State: 270, Saving reduction to rule42

Creating itemsets from state: 270
State 191 already created
State 192 already created

Processing state: 271State: 271, Saving reduction to rule43

Creating itemsets from state: 271
State 191 already created
State 192 already created

Processing state: 272State: 272, Saving reduction to rule48

Creating itemsets from state: 272
State 189 already created
State 190 already created

Processing state: 273State: 273, Saving reduction to rule50

Creating itemsets from state: 273
State 197 already created

Processing state: 274
Creating itemsets from state: 274
State 316:
K  - [unary_expression -> SIZEOF ( type_name ).]

Processing state: 275State: 275, Saving reduction to rule54

Creating itemsets from state: 275
State 155 already created

Processing state: 276State: 276, Saving reduction to rule56

Creating itemsets from state: 276
State 202 already created

Processing state: 277
Creating itemsets from state: 277
State 153 already created
State 317:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 278State: 278, Saving reduction to rule190

Creating itemsets from state: 278

Processing state: 279
Creating itemsets from state: 279
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 318:
K  - [labeled_statement -> CASE constant_expression : statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 280State: 280, Saving reduction to rule186

Creating itemsets from state: 280

Processing state: 281
Creating itemsets from state: 281
State 319:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]

Processing state: 282
Creating itemsets from state: 282
State 320:
K  - [selection_statement -> IF ( expression ) .statement]
K  - [selection_statement -> IF ( expression ) .statement ELSE]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 153 already created

Processing state: 283
Creating itemsets from state: 283
State 321:
K  - [selection_statement -> SWITCH ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 153 already created

Processing state: 284
Creating itemsets from state: 284
State 322:
K  - [iteration_statement -> WHILE ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 153 already created

Processing state: 285
Creating itemsets from state: 285
State 74 already created
State 323:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 324:
K  - [iteration_statement -> FOR ( expression_statement ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 286State: 286, Saving reduction to rule206

Creating itemsets from state: 286

Processing state: 287State: 287, Saving reduction to rule210

Creating itemsets from state: 287

Processing state: 288State: 288, Saving reduction to rule104

Creating itemsets from state: 288

Processing state: 289State: 289, Saving reduction to rule113

Creating itemsets from state: 289

Processing state: 290State: 290, Saving reduction to rule109

Creating itemsets from state: 290

Processing state: 291State: 291, Saving reduction to rule121

Creating itemsets from state: 291
State 325:
K  - [struct_declarator -> declarator : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]

Processing state: 292
Creating itemsets from state: 292
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 326:
K  - [struct_declarator -> : constant_expression.]
State 102 already created
State 140 already created
State 104 already created

Processing state: 293
Creating itemsets from state: 293
State 327:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 328:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;.]

Processing state: 294State: 294, Saving reduction to rule119

Creating itemsets from state: 294

Processing state: 295State: 295, Saving reduction to rule125

Creating itemsets from state: 295

Processing state: 296State: 296, Saving reduction to rule130

Creating itemsets from state: 296

Processing state: 297State: 297, Saving reduction to rule128

Creating itemsets from state: 297

Processing state: 298State: 298, Saving reduction to rule165

Creating itemsets from state: 298

Processing state: 299
Creating itemsets from state: 299
State 329:
K  - [direct_abstract_declarator -> [ constant_expression ].]

Processing state: 300State: 300, Saving reduction to rule169

Creating itemsets from state: 300

Processing state: 301
Creating itemsets from state: 301
State 330:
K  - [direct_abstract_declarator -> ( abstract_declarator ).]

Processing state: 302State: 302, Saving reduction to rule163

Creating itemsets from state: 302
State 304 already created
State 305 already created
State 306 already created

Processing state: 303
Creating itemsets from state: 303
State 236 already created
State 331:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end.]

Processing state: 304
Creating itemsets from state: 304
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 332:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ].]
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 333:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .]]
State 102 already created
State 140 already created
State 104 already created

Processing state: 305State: 305, Saving reduction to rule142

Creating itemsets from state: 305
State 334:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( ).]

Processing state: 306
Creating itemsets from state: 306
State 5 already created
State 6 already created
State 143 already created
State 9 already created
State 10 already created
State 11 already created
State 12 already created
State 13 already created
State 14 already created
State 15 already created
State 16 already created
State 17 already created
State 18 already created
State 19 already created
State 20 already created
State 21 already created
State 22 already created
State 23 already created
State 24 already created
State 25 already created
State 26 already created
State 27 already created
State 28 already created
State 29 already created
State 30 already created
State 31 already created
State 32 already created
State 335:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 146 already created
State 147 already created

Processing state: 307State: 307, Saving reduction to rule158

Creating itemsets from state: 307

Processing state: 308State: 308, Saving reduction to rule153

Creating itemsets from state: 308

Processing state: 309State: 309, Saving reduction to rule151

Creating itemsets from state: 309

Processing state: 310
Creating itemsets from state: 310
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 149 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 336:
K  - [initializer_list -> initializer_list , initializer.]
State 102 already created
State 103 already created
State 104 already created
State 151 already created
State 337:
K  - [initializer -> { initializer_list , }.]

Processing state: 311State: 311, Saving reduction to rule174

Creating itemsets from state: 311

Processing state: 312State: 312, Saving reduction to rule5

Creating itemsets from state: 312

Processing state: 313State: 313, Saving reduction to rule7

Creating itemsets from state: 313

Processing state: 314
Creating itemsets from state: 314
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 338:
K  - [argument_expression_list -> argument_expression_list , assignment_expression.]
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 315State: 315, Saving reduction to rule28

Creating itemsets from state: 315

Processing state: 316State: 316, Saving reduction to rule20

Creating itemsets from state: 316

Processing state: 317
Creating itemsets from state: 317
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 339:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression.]
State 104 already created

Processing state: 318State: 318, Saving reduction to rule185

Creating itemsets from state: 318

Processing state: 319
Creating itemsets from state: 319
State 74 already created
State 340:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;]
K  - [expression -> expression ., assignment_expression]
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created

Processing state: 320
Creating itemsets from state: 320
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 341:
K  - [selection_statement -> IF ( expression ) statement.]
K  - [selection_statement -> IF ( expression ) statement .ELSE]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 321
Creating itemsets from state: 321
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 342:
K  - [selection_statement -> SWITCH ( expression ) statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 322
Creating itemsets from state: 322
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 343:
K  - [iteration_statement -> WHILE ( expression ) statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 323
Creating itemsets from state: 323
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 153 already created

Processing state: 324
Creating itemsets from state: 324
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 325
Creating itemsets from state: 325
State 74 already created
State 76 already created
State 77 already created
State 136 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 138 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 346:
K  - [struct_declarator -> declarator : constant_expression.]
State 102 already created
State 140 already created
State 104 already created

Processing state: 326State: 326, Saving reduction to rule122

Creating itemsets from state: 326

Processing state: 327
Creating itemsets from state: 327
State 1 already created
State 2 already created
State 3 already created
State 291 already created
State 292 already created
State 347:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator.]
State 33 already created
State 34 already created

Processing state: 328State: 328, Saving reduction to rule114

Creating itemsets from state: 328

Processing state: 329State: 329, Saving reduction to rule166

Creating itemsets from state: 329

Processing state: 330State: 330, Saving reduction to rule164

Creating itemsets from state: 330

Processing state: 331State: 331, Saving reduction to rule170

Creating itemsets from state: 331

Processing state: 332State: 332, Saving reduction to rule167

Creating itemsets from state: 332

Processing state: 333
Creating itemsets from state: 333
State 348:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ].]

Processing state: 334State: 334, Saving reduction to rule171

Creating itemsets from state: 334

Processing state: 335
Creating itemsets from state: 335
State 236 already created
State 349:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end.]

Processing state: 336State: 336, Saving reduction to rule177

Creating itemsets from state: 336

Processing state: 337State: 337, Saving reduction to rule175

Creating itemsets from state: 337

Processing state: 338State: 338, Saving reduction to rule14

Creating itemsets from state: 338

Processing state: 339State: 339, Saving reduction to rule58

Creating itemsets from state: 339

Processing state: 340
Creating itemsets from state: 340
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;]
State 153 already created

Processing state: 341State: 341, Saving reduction to rule199

Creating itemsets from state: 341
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE.]

Processing state: 342State: 342, Saving reduction to rule201

Creating itemsets from state: 342

Processing state: 343State: 343, Saving reduction to rule202

Creating itemsets from state: 343

Processing state: 344
Creating itemsets from state: 344
State 74 already created
State 75 already created
State 76 already created
State 77 already created
State 78 already created
State 79 already created
State 80 already created
State 81 already created
State 82 already created
State 83 already created
State 84 already created
State 85 already created
State 86 already created
State 87 already created
State 88 already created
State 89 already created
State 90 already created
State 91 already created
State 92 already created
State 93 already created
State 94 already created
State 95 already created
State 96 already created
State 97 already created
State 98 already created
State 99 already created
State 100 already created
State 101 already created
State 102 already created
State 103 already created
State 104 already created
State 105 already created
State 50 already created
State 107 already created
State 108 already created
State 109 already created
State 110 already created
State 51 already created
State 114 already created
State 115 already created
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement.]
State 117 already created
State 118 already created
State 119 already created
State 120 already created
State 121 already created
State 122 already created
State 123 already created
State 124 already created
State 125 already created
State 126 already created
State 127 already created

Processing state: 345State: 345, Saving reduction to rule204

Creating itemsets from state: 345

Processing state: 346State: 346, Saving reduction to rule123

Creating itemsets from state: 346

Processing state: 347State: 347, Saving reduction to rule120

Creating itemsets from state: 347

Processing state: 348State: 348, Saving reduction to rule168

Creating itemsets from state: 348

Processing state: 349State: 349, Saving reduction to rule172

Creating itemsets from state: 349

Processing state: 350
Creating itemsets from state: 350
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;.]

Processing state: 351State: 351, Saving reduction to rule200

Creating itemsets from state: 351

Processing state: 352State: 352, Saving reduction to rule205

Creating itemsets from state: 352

Processing state: 353State: 353, Saving reduction to rule203

Creating itemsets from state: 353

LR(0) - State list:
State 0:
K  - [$start -> .translation_unit $eof]
NK - [translation_unit -> .external_declaration]
NK - [translation_unit -> .translation_unit external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 1:
K  - [direct_declarator -> IDENTIFIER.]
State 2:
K  - [direct_declarator -> ( .declarator )]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 3:
K  - [pointer -> *.]
K  - [pointer -> * .type_qualifier_list]
K  - [pointer -> * .pointer]
K  - [pointer -> * .type_qualifier_list pointer]
NK - [type_qualifier_list -> .type_qualifier]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
State 4:
K  - [external_declaration -> declaration.]
State 5:
K  - [declaration_specifiers -> type_specifier.]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 6:
K  - [declaration_specifiers -> type_qualifier.]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 7:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers .declarator compound_statement]
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
State 8:
K  - [function_definition -> declarator .declaration_list compound_statement]
K  - [function_definition -> declarator .compound_statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 9:
K  - [declaration_specifiers -> storage_class_specifier.]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 10:
K  - [storage_class_specifier -> STATIC.]
State 11:
K  - [storage_class_specifier -> REGISTER.]
State 12:
K  - [type_specifier -> VOID.]
State 13:
K  - [storage_class_specifier -> EXTERN.]
State 14:
K  - [type_specifier -> SHORT.]
State 15:
K  - [storage_class_specifier -> TYPEDEF.]
State 16:
K  - [storage_class_specifier -> AUTO.]
State 17:
K  - [type_specifier -> INT.]
State 18:
K  - [type_specifier -> CHAR.]
State 19:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER]
NK - [struct_tag_opt -> .IDENTIFIER]
NK - [struct_tag_opt -> .]
State 20:
K  - [type_specifier -> struct_or_union_specifier.]
State 21:
K  - [type_specifier -> enum_specifier.]
State 22:
K  - [type_specifier -> LONG.]
State 23:
K  - [type_specifier -> FLOAT.]
State 24:
K  - [type_specifier -> DOUBLE.]
State 25:
K  - [type_specifier -> SIGNED.]
State 26:
K  - [type_specifier -> UNSIGNED.]
State 27:
K  - [type_specifier -> TYPE_NAME.]
State 28:
K  - [struct_or_union -> STRUCT.]
State 29:
K  - [type_qualifier -> CONST.]
State 30:
K  - [type_qualifier -> VOLATILE.]
State 31:
K  - [enum_specifier -> ENUM .{ enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }]
K  - [enum_specifier -> ENUM .IDENTIFIER]
State 32:
K  - [struct_or_union -> UNION.]
State 33:
K  - [declarator -> pointer .direct_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 34:
K  - [declarator -> direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]
State 35:
K  - [$start -> translation_unit .$eof]
K  - [translation_unit -> translation_unit .external_declaration]
NK - [external_declaration -> .function_definition]
NK - [external_declaration -> .declaration]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement]
NK - [function_definition -> .declaration_specifiers declarator compound_statement]
NK - [function_definition -> .declarator declaration_list compound_statement]
NK - [function_definition -> .declarator compound_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 36:
K  - [external_declaration -> function_definition.]
State 37:
K  - [translation_unit -> external_declaration.]
State 38:
K  - [direct_declarator -> ( declarator .)]
State 39:
K  - [type_qualifier_list -> type_qualifier.]
State 40:
K  - [pointer -> * pointer.]
State 41:
K  - [pointer -> * type_qualifier_list.]
K  - [pointer -> * type_qualifier_list .pointer]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
State 42:
K  - [declaration_specifiers -> type_specifier declaration_specifiers.]
State 43:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers.]
State 44:
K  - [init_declarator_list -> init_declarator.]
State 45:
K  - [declaration -> declaration_specifiers init_declarator_list .;]
K  - [init_declarator_list -> init_declarator_list ., init_declarator]
State 46:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement]
K  - [function_definition -> declaration_specifiers declarator .compound_statement]
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 47:
K  - [declaration -> declaration_specifiers ;.]
State 48:
K  - [declaration_list -> declaration.]
State 49:
K  - [declaration -> declaration_specifiers .;]
K  - [declaration -> declaration_specifiers .init_declarator_list ;]
NK - [init_declarator_list -> .init_declarator]
NK - [init_declarator_list -> .init_declarator_list , init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 50:
K  - [block_start -> {.]
State 51:
K  - [compound_statement -> block_start .block_end]
K  - [compound_statement -> block_start .statement_list block_end]
K  - [compound_statement -> block_start .declaration_list block_end]
K  - [compound_statement -> block_start .declaration_list statement_list block_end]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration_list -> .declaration]
NK - [declaration_list -> .declaration_list declaration]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 52:
K  - [function_definition -> declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 53:
K  - [function_definition -> declarator compound_statement.]
State 54:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers.]
State 55:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER.]
K  - [struct_tag_opt -> IDENTIFIER.]
State 56:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_definition_start -> .{]
State 57:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }]
K  - [enum_specifier -> ENUM IDENTIFIER.]
State 58:
K  - [enum_specifier -> ENUM { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 59:
K  - [declarator -> pointer direct_declarator.]
K  - [direct_declarator -> direct_declarator .[ constant_expression ]]
K  - [direct_declarator -> direct_declarator .[ ]]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end]
K  - [direct_declarator -> direct_declarator .( )]
NK - [parameter_list_start -> .(]
State 60:
K  - [direct_declarator -> direct_declarator [ .constant_expression ]]
K  - [direct_declarator -> direct_declarator [ .]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 61:
K  - [direct_declarator -> direct_declarator ( .)]
K  - [parameter_list_start -> (.]
State 62:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [identifier_list -> .IDENTIFIER]
NK - [identifier_list -> .identifier_list , IDENTIFIER]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 63:
K  - [$start -> translation_unit $eof.]
State 64:
K  - [translation_unit -> translation_unit external_declaration.]
State 65:
K  - [direct_declarator -> ( declarator ).]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier.]
State 67:
K  - [pointer -> * type_qualifier_list pointer.]
State 68:
K  - [init_declarator_list -> init_declarator_list , .init_declarator]
NK - [init_declarator -> .declarator]
NK - [init_declarator -> .declarator = initializer]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 69:
K  - [declaration -> declaration_specifiers init_declarator_list ;.]
State 70:
K  - [init_declarator -> declarator = .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 71:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement]
K  - [declaration_list -> declaration_list .declaration]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [block_start -> .{]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 72:
K  - [function_definition -> declaration_specifiers declarator compound_statement.]
State 73:
K  - [init_declarator -> declarator.]
K  - [init_declarator -> declarator .= initializer]
State 74:
K  - [postfix_expression -> primary_expression.]
State 75:
K  - [expression_statement -> expression .;]
K  - [expression -> expression ., assignment_expression]
State 76:
K  - [logical_and_expression -> inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 77:
K  - [unary_expression -> postfix_expression.]
K  - [postfix_expression -> postfix_expression .[ expression ]]
K  - [postfix_expression -> postfix_expression .( )]
K  - [postfix_expression -> postfix_expression .( argument_expression_list )]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER]
K  - [postfix_expression -> postfix_expression .INC_OP]
K  - [postfix_expression -> postfix_expression .DEC_OP]
NK - [struct_member_accessor -> ..]
NK - [struct_member_accessor -> .PTR_OP]
State 78:
K  - [labeled_statement -> IDENTIFIER .: statement]
K  - [primary_expression -> IDENTIFIER.]
State 79:
K  - [primary_expression -> STRING_LITERAL.]
State 80:
K  - [primary_expression -> ( .expression )]
K  - [cast_expression -> ( .type_name ) cast_expression]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 81:
K  - [primary_expression -> CONSTANT.]
State 82:
K  - [unary_expression -> INC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 83:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression]
K  - [cast_expression -> unary_expression.]
NK - [assignment_operator -> .=]
NK - [assignment_operator -> .MUL_ASSIGN]
NK - [assignment_operator -> .DIV_ASSIGN]
NK - [assignment_operator -> .MOD_ASSIGN]
NK - [assignment_operator -> .ADD_ASSIGN]
NK - [assignment_operator -> .SUB_ASSIGN]
NK - [assignment_operator -> .LEFT_ASSIGN]
NK - [assignment_operator -> .RIGHT_ASSIGN]
NK - [assignment_operator -> .AND_ASSIGN]
NK - [assignment_operator -> .XOR_ASSIGN]
NK - [assignment_operator -> .OR_ASSIGN]
State 84:
K  - [shift_expression -> additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 85:
K  - [multiplicative_expression -> cast_expression.]
State 86:
K  - [additive_expression -> multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 87:
K  - [unary_expression -> unary_operator .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 88:
K  - [expression -> assignment_expression.]
State 89:
K  - [and_expression -> equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 90:
K  - [relational_expression -> shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 91:
K  - [equality_expression -> relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 92:
K  - [exclusive_or_expression -> and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 93:
K  - [inclusive_or_expression -> exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 94:
K  - [unary_operator -> +.]
State 95:
K  - [unary_expression -> SIZEOF .unary_expression]
K  - [unary_expression -> SIZEOF .( type_name )]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 96:
K  - [unary_expression -> DEC_OP .unary_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 97:
K  - [unary_operator -> &.]
State 98:
K  - [unary_operator -> *.]
State 99:
K  - [unary_operator -> -.]
State 100:
K  - [unary_operator -> ~.]
State 101:
K  - [unary_operator -> !.]
State 102:
K  - [logical_or_expression -> logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 103:
K  - [assignment_expression -> conditional_expression.]
State 104:
K  - [conditional_expression -> logical_or_expression.]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression]
State 105:
K  - [expression_statement -> ;.]
State 106:
K  - [block_end -> }.]
State 107:
K  - [statement -> expression_statement.]
State 108:
K  - [statement -> selection_statement.]
State 109:
K  - [statement -> iteration_statement.]
State 110:
K  - [statement -> jump_statement.]
State 111:
K  - [compound_statement -> block_start block_end.]
State 112:
K  - [compound_statement -> block_start statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 113:
K  - [compound_statement -> block_start declaration_list .block_end]
K  - [compound_statement -> block_start declaration_list .statement_list block_end]
K  - [declaration_list -> declaration_list .declaration]
NK - [block_end -> .}]
NK - [statement_list -> .statement]
NK - [statement_list -> .statement_list statement]
NK - [declaration -> .declaration_specifiers ;]
NK - [declaration -> .declaration_specifiers init_declarator_list ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 114:
K  - [statement -> compound_statement.]
State 115:
K  - [statement -> labeled_statement.]
State 116:
K  - [statement_list -> statement.]
State 117:
K  - [labeled_statement -> CASE .constant_expression : statement]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 118:
K  - [labeled_statement -> DEFAULT .: statement]
State 119:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 120:
K  - [selection_statement -> IF .( expression ) statement]
K  - [selection_statement -> IF .( expression ) statement ELSE]
State 121:
K  - [jump_statement -> BREAK .;]
State 122:
K  - [selection_statement -> SWITCH .( expression ) statement]
State 123:
K  - [iteration_statement -> WHILE .( expression ) statement]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement]
State 125:
K  - [jump_statement -> GOTO .IDENTIFIER ;]
State 126:
K  - [jump_statement -> CONTINUE .;]
State 127:
K  - [jump_statement -> RETURN .;]
K  - [jump_statement -> RETURN .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 128:
K  - [declaration_list -> declaration_list declaration.]
State 129:
K  - [function_definition -> declarator declaration_list compound_statement.]
State 130:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end]
NK - [struct_declaration_list -> .struct_declaration]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 131:
K  - [struct_definition_start -> {.]
State 132:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }]
NK - [enumerator_list -> .enumerator]
NK - [enumerator_list -> .enumerator_list , enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 133:
K  - [enumerator -> IDENTIFIER.]
K  - [enumerator -> IDENTIFIER .= constant_expression]
State 134:
K  - [enum_specifier -> ENUM { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 135:
K  - [enumerator_list -> enumerator.]
State 136:
K  - [primary_expression -> IDENTIFIER.]
State 137:
K  - [direct_declarator -> direct_declarator [ ].]
State 138:
K  - [cast_expression -> unary_expression.]
State 139:
K  - [direct_declarator -> direct_declarator [ constant_expression .]]
State 140:
K  - [constant_expression -> conditional_expression.]
State 141:
K  - [direct_declarator -> direct_declarator ( ).]
State 142:
K  - [identifier_list -> IDENTIFIER.]
State 143:
K  - [parameter_declaration -> declaration_specifiers .declarator]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator]
K  - [parameter_declaration -> declaration_specifiers.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 144:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end]
K  - [identifier_list -> identifier_list ., IDENTIFIER]
NK - [parameter_list_end -> .)]
State 145:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 146:
K  - [parameter_type_list -> parameter_list.]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS]
K  - [parameter_list -> parameter_list ., parameter_declaration]
State 147:
K  - [parameter_list -> parameter_declaration.]
State 148:
K  - [init_declarator_list -> init_declarator_list , init_declarator.]
State 149:
K  - [initializer -> assignment_expression.]
State 150:
K  - [init_declarator -> declarator = initializer.]
State 151:
K  - [initializer -> { .initializer_list }]
K  - [initializer -> { .initializer_list , }]
NK - [initializer_list -> .initializer]
NK - [initializer_list -> .initializer_list , initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 152:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement.]
State 153:
K  - [expression -> expression , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 154:
K  - [expression_statement -> expression ;.]
State 155:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 156:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER]
State 157:
K  - [postfix_expression -> postfix_expression [ .expression ]]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 158:
K  - [postfix_expression -> postfix_expression ( .)]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list )]
NK - [argument_expression_list -> .assignment_expression]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 159:
K  - [postfix_expression -> postfix_expression INC_OP.]
State 160:
K  - [struct_member_accessor -> ..]
State 161:
K  - [postfix_expression -> postfix_expression DEC_OP.]
State 162:
K  - [struct_member_accessor -> PTR_OP.]
State 163:
K  - [labeled_statement -> IDENTIFIER : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 164:
K  - [primary_expression -> ( expression .)]
K  - [expression -> expression ., assignment_expression]
State 165:
K  - [cast_expression -> ( type_name .) cast_expression]
State 166:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_specifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 167:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list]
K  - [specifier_qualifier_list -> type_qualifier.]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 168:
K  - [type_name -> specifier_qualifier_list.]
K  - [type_name -> specifier_qualifier_list .abstract_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 169:
K  - [primary_expression -> ( .expression )]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 170:
K  - [unary_expression -> INC_OP unary_expression.]
State 171:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 172:
K  - [assignment_operator -> MUL_ASSIGN.]
State 173:
K  - [assignment_operator -> =.]
State 174:
K  - [assignment_operator -> DIV_ASSIGN.]
State 175:
K  - [assignment_operator -> MOD_ASSIGN.]
State 176:
K  - [assignment_operator -> LEFT_ASSIGN.]
State 177:
K  - [assignment_operator -> ADD_ASSIGN.]
State 178:
K  - [assignment_operator -> AND_ASSIGN.]
State 179:
K  - [assignment_operator -> XOR_ASSIGN.]
State 180:
K  - [assignment_operator -> SUB_ASSIGN.]
State 181:
K  - [assignment_operator -> RIGHT_ASSIGN.]
State 182:
K  - [assignment_operator -> OR_ASSIGN.]
State 183:
K  - [additive_expression -> additive_expression + .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 184:
K  - [additive_expression -> additive_expression - .multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 185:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 186:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 187:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 188:
K  - [unary_expression -> unary_operator cast_expression.]
State 189:
K  - [equality_expression -> equality_expression NE_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 190:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 191:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 192:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 193:
K  - [relational_expression -> relational_expression > .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 194:
K  - [relational_expression -> relational_expression < .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 195:
K  - [relational_expression -> relational_expression LE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 196:
K  - [relational_expression -> relational_expression GE_OP .shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 197:
K  - [and_expression -> and_expression & .equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 198:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 199:
K  - [unary_expression -> SIZEOF ( .type_name )]
K  - [primary_expression -> ( .expression )]
NK - [type_name -> .specifier_qualifier_list]
NK - [type_name -> .specifier_qualifier_list abstract_declarator]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 200:
K  - [unary_expression -> SIZEOF unary_expression.]
State 201:
K  - [unary_expression -> DEC_OP unary_expression.]
State 202:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 203:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 204:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 205:
K  - [compound_statement -> block_start statement_list block_end.]
State 206:
K  - [statement_list -> statement_list statement.]
State 207:
K  - [compound_statement -> block_start declaration_list block_end.]
State 208:
K  - [compound_statement -> block_start declaration_list statement_list .block_end]
K  - [statement_list -> statement_list .statement]
NK - [block_end -> .}]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 209:
K  - [labeled_statement -> CASE constant_expression .: statement]
State 210:
K  - [labeled_statement -> DEFAULT : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 211:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;]
State 212:
K  - [selection_statement -> IF ( .expression ) statement]
K  - [selection_statement -> IF ( .expression ) statement ELSE]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 213:
K  - [jump_statement -> BREAK ;.]
State 214:
K  - [selection_statement -> SWITCH ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 215:
K  - [iteration_statement -> WHILE ( .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 216:
K  - [iteration_statement -> FOR ( .expression_statement ) statement]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 217:
K  - [jump_statement -> GOTO IDENTIFIER .;]
State 218:
K  - [jump_statement -> CONTINUE ;.]
State 219:
K  - [jump_statement -> RETURN expression .;]
K  - [expression -> expression ., assignment_expression]
State 220:
K  - [jump_statement -> RETURN ;.]
State 221:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration]
NK - [struct_definition_end -> .}]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_specifier]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list]
NK - [specifier_qualifier_list -> .type_qualifier]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 222:
K  - [struct_declaration_list -> struct_declaration.]
State 223:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;]
NK - [struct_declarator_list -> .struct_declarator]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 224:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}]
K  - [enumerator_list -> enumerator_list ., enumerator]
State 225:
K  - [enumerator -> IDENTIFIER = .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 226:
K  - [enumerator_list -> enumerator_list , .enumerator]
NK - [enumerator -> .IDENTIFIER]
NK - [enumerator -> .IDENTIFIER = constant_expression]
State 227:
K  - [enum_specifier -> ENUM { enumerator_list }.]
State 228:
K  - [direct_declarator -> direct_declarator [ constant_expression ].]
State 229:
K  - [direct_abstract_declarator -> [ .]]
K  - [direct_abstract_declarator -> [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 230:
K  - [direct_declarator -> ( .declarator )]
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 231:
K  - [parameter_declaration -> declaration_specifiers declarator.]
State 232:
K  - [declarator -> pointer .direct_declarator]
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 233:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 234:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator.]
State 235:
K  - [abstract_declarator -> direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 236:
K  - [parameter_list_end -> ).]
State 237:
K  - [identifier_list -> identifier_list , .IDENTIFIER]
State 238:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end.]
State 239:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end.]
State 240:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS]
K  - [parameter_list -> parameter_list , .parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 241:
K  - [initializer_list -> initializer.]
State 242:
K  - [initializer -> { initializer_list .}]
K  - [initializer -> { initializer_list ., }]
K  - [initializer_list -> initializer_list ., initializer]
State 243:
K  - [expression -> expression , assignment_expression.]
State 244:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression.]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression]
State 245:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER.]
State 246:
K  - [postfix_expression -> postfix_expression [ expression .]]
K  - [expression -> expression ., assignment_expression]
State 247:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .)]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression]
State 248:
K  - [postfix_expression -> postfix_expression ( ).]
State 249:
K  - [argument_expression_list -> assignment_expression.]
State 250:
K  - [labeled_statement -> IDENTIFIER : statement.]
State 251:
K  - [primary_expression -> ( expression ).]
State 252:
K  - [cast_expression -> ( type_name ) .cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 253:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list.]
State 254:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list.]
State 255:
K  - [direct_abstract_declarator -> ( .abstract_declarator )]
K  - [direct_abstract_declarator -> ( .)]
K  - [parameter_list_start -> (.]
NK - [abstract_declarator -> .pointer]
NK - [abstract_declarator -> .direct_abstract_declarator]
NK - [abstract_declarator -> .pointer direct_abstract_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 256:
K  - [abstract_declarator -> pointer.]
K  - [abstract_declarator -> pointer .direct_abstract_declarator]
NK - [direct_abstract_declarator -> .( abstract_declarator )]
NK - [direct_abstract_declarator -> .[ ]]
NK - [direct_abstract_declarator -> .[ constant_expression ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ]]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ]]
NK - [direct_abstract_declarator -> .( )]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( )]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 257:
K  - [type_name -> specifier_qualifier_list abstract_declarator.]
State 258:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression.]
State 259:
K  - [additive_expression -> additive_expression + multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 260:
K  - [additive_expression -> additive_expression - multiplicative_expression.]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression]
State 261:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression.]
State 262:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression.]
State 263:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression.]
State 264:
K  - [equality_expression -> equality_expression NE_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 265:
K  - [equality_expression -> equality_expression EQ_OP relational_expression.]
K  - [relational_expression -> relational_expression .< shift_expression]
K  - [relational_expression -> relational_expression .> shift_expression]
K  - [relational_expression -> relational_expression .LE_OP shift_expression]
K  - [relational_expression -> relational_expression .GE_OP shift_expression]
State 266:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 267:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression.]
K  - [additive_expression -> additive_expression .+ multiplicative_expression]
K  - [additive_expression -> additive_expression .- multiplicative_expression]
State 268:
K  - [relational_expression -> relational_expression > shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 269:
K  - [relational_expression -> relational_expression < shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 270:
K  - [relational_expression -> relational_expression LE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 271:
K  - [relational_expression -> relational_expression GE_OP shift_expression.]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression]
State 272:
K  - [and_expression -> and_expression & equality_expression.]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression]
K  - [equality_expression -> equality_expression .NE_OP relational_expression]
State 273:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression.]
K  - [and_expression -> and_expression .& equality_expression]
State 274:
K  - [unary_expression -> SIZEOF ( type_name .)]
State 275:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression.]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression]
State 276:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression.]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression]
State 277:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression]
K  - [expression -> expression ., assignment_expression]
State 278:
K  - [compound_statement -> block_start declaration_list statement_list block_end.]
State 279:
K  - [labeled_statement -> CASE constant_expression : .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 280:
K  - [labeled_statement -> DEFAULT : statement.]
State 281:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;]
State 282:
K  - [selection_statement -> IF ( expression .) statement]
K  - [selection_statement -> IF ( expression .) statement ELSE]
K  - [expression -> expression ., assignment_expression]
State 283:
K  - [selection_statement -> SWITCH ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 284:
K  - [iteration_statement -> WHILE ( expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 285:
K  - [iteration_statement -> FOR ( expression_statement .) statement]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 286:
K  - [jump_statement -> GOTO IDENTIFIER ;.]
State 287:
K  - [jump_statement -> RETURN expression ;.]
State 288:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end.]
State 289:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration.]
State 290:
K  - [struct_definition_end -> }.]
State 291:
K  - [struct_declarator -> declarator.]
K  - [struct_declarator -> declarator .: constant_expression]
State 292:
K  - [struct_declarator -> : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 293:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator]
State 294:
K  - [struct_declarator_list -> struct_declarator.]
State 295:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }.]
State 296:
K  - [enumerator -> IDENTIFIER = constant_expression.]
State 297:
K  - [enumerator_list -> enumerator_list , enumerator.]
State 298:
K  - [direct_abstract_declarator -> [ ].]
State 299:
K  - [direct_abstract_declarator -> [ constant_expression .]]
State 300:
K  - [direct_abstract_declarator -> ( ).]
State 301:
K  - [direct_abstract_declarator -> ( abstract_declarator .)]
State 302:
K  - [abstract_declarator -> pointer direct_abstract_declarator.]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ]]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( )]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end]
NK - [parameter_list_start -> .(]
State 303:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 304:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .]]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ]]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 305:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .)]
K  - [parameter_list_start -> (.]
State 306:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end]
NK - [parameter_type_list -> .parameter_list]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS]
NK - [parameter_list -> .parameter_declaration]
NK - [parameter_list -> .parameter_list , parameter_declaration]
NK - [parameter_declaration -> .declaration_specifiers declarator]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator]
NK - [parameter_declaration -> .declaration_specifiers]
NK - [declaration_specifiers -> .storage_class_specifier]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_specifier]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers]
NK - [declaration_specifiers -> .type_qualifier]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers]
NK - [storage_class_specifier -> .TYPEDEF]
NK - [storage_class_specifier -> .EXTERN]
NK - [storage_class_specifier -> .STATIC]
NK - [storage_class_specifier -> .AUTO]
NK - [storage_class_specifier -> .REGISTER]
NK - [type_specifier -> .VOID]
NK - [type_specifier -> .CHAR]
NK - [type_specifier -> .SHORT]
NK - [type_specifier -> .INT]
NK - [type_specifier -> .LONG]
NK - [type_specifier -> .FLOAT]
NK - [type_specifier -> .DOUBLE]
NK - [type_specifier -> .SIGNED]
NK - [type_specifier -> .UNSIGNED]
NK - [type_specifier -> .struct_or_union_specifier]
NK - [type_specifier -> .enum_specifier]
NK - [type_specifier -> .TYPE_NAME]
NK - [type_qualifier -> .CONST]
NK - [type_qualifier -> .VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER]
NK - [enum_specifier -> .ENUM { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }]
NK - [enum_specifier -> .ENUM IDENTIFIER]
NK - [struct_or_union -> .STRUCT]
NK - [struct_or_union -> .UNION]
State 307:
K  - [identifier_list -> identifier_list , IDENTIFIER.]
State 308:
K  - [parameter_list -> parameter_list , parameter_declaration.]
State 309:
K  - [parameter_type_list -> parameter_list , ELLIPSIS.]
State 310:
K  - [initializer -> { initializer_list , .}]
K  - [initializer_list -> initializer_list , .initializer]
NK - [initializer -> .assignment_expression]
NK - [initializer -> .{ initializer_list }]
NK - [initializer -> .{ initializer_list , }]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 311:
K  - [initializer -> { initializer_list }.]
State 312:
K  - [postfix_expression -> postfix_expression [ expression ].]
State 313:
K  - [postfix_expression -> postfix_expression ( argument_expression_list ).]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 315:
K  - [cast_expression -> ( type_name ) cast_expression.]
State 316:
K  - [unary_expression -> SIZEOF ( type_name ).]
State 317:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 318:
K  - [labeled_statement -> CASE constant_expression : statement.]
State 319:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 320:
K  - [selection_statement -> IF ( expression ) .statement]
K  - [selection_statement -> IF ( expression ) .statement ELSE]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 321:
K  - [selection_statement -> SWITCH ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 322:
K  - [iteration_statement -> WHILE ( expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 323:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement]
K  - [expression -> expression ., assignment_expression]
State 324:
K  - [iteration_statement -> FOR ( expression_statement ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 325:
K  - [struct_declarator -> declarator : .constant_expression]
NK - [constant_expression -> .conditional_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
State 326:
K  - [struct_declarator -> : constant_expression.]
State 327:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator]
NK - [struct_declarator -> .declarator]
NK - [struct_declarator -> .: constant_expression]
NK - [struct_declarator -> .declarator : constant_expression]
NK - [declarator -> .pointer direct_declarator]
NK - [declarator -> .direct_declarator]
NK - [pointer -> .*]
NK - [pointer -> .* type_qualifier_list]
NK - [pointer -> .* pointer]
NK - [pointer -> .* type_qualifier_list pointer]
NK - [direct_declarator -> .IDENTIFIER]
NK - [direct_declarator -> .( declarator )]
NK - [direct_declarator -> .direct_declarator [ constant_expression ]]
NK - [direct_declarator -> .direct_declarator [ ]]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end]
NK - [direct_declarator -> .direct_declarator ( )]
State 328:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;.]
State 329:
K  - [direct_abstract_declarator -> [ constant_expression ].]
State 330:
K  - [direct_abstract_declarator -> ( abstract_declarator ).]
State 331:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end.]
State 332:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ].]
State 333:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .]]
State 334:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( ).]
State 335:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end]
NK - [parameter_list_end -> .)]
State 336:
K  - [initializer_list -> initializer_list , initializer.]
State 337:
K  - [initializer -> { initializer_list , }.]
State 338:
K  - [argument_expression_list -> argument_expression_list , assignment_expression.]
State 339:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression.]
State 340:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;]
K  - [expression -> expression ., assignment_expression]
State 341:
K  - [selection_statement -> IF ( expression ) statement.]
K  - [selection_statement -> IF ( expression ) statement .ELSE]
State 342:
K  - [selection_statement -> SWITCH ( expression ) statement.]
State 343:
K  - [iteration_statement -> WHILE ( expression ) statement.]
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement]
NK - [statement -> .labeled_statement]
NK - [statement -> .compound_statement]
NK - [statement -> .expression_statement]
NK - [statement -> .selection_statement]
NK - [statement -> .iteration_statement]
NK - [statement -> .jump_statement]
NK - [labeled_statement -> .IDENTIFIER : statement]
NK - [labeled_statement -> .CASE constant_expression : statement]
NK - [labeled_statement -> .DEFAULT : statement]
NK - [compound_statement -> .block_start block_end]
NK - [compound_statement -> .block_start statement_list block_end]
NK - [compound_statement -> .block_start declaration_list block_end]
NK - [compound_statement -> .block_start declaration_list statement_list block_end]
NK - [expression_statement -> .;]
NK - [expression_statement -> .expression ;]
NK - [selection_statement -> .IF ( expression ) statement]
NK - [selection_statement -> .IF ( expression ) statement ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement]
NK - [iteration_statement -> .WHILE ( expression ) statement]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;]
NK - [iteration_statement -> .FOR ( expression_statement ) statement]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement]
NK - [jump_statement -> .GOTO IDENTIFIER ;]
NK - [jump_statement -> .CONTINUE ;]
NK - [jump_statement -> .BREAK ;]
NK - [jump_statement -> .RETURN ;]
NK - [jump_statement -> .RETURN expression ;]
NK - [block_start -> .{]
NK - [expression -> .assignment_expression]
NK - [expression -> .expression , assignment_expression]
NK - [assignment_expression -> .conditional_expression]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression]
NK - [conditional_expression -> .logical_or_expression]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression]
NK - [unary_expression -> .postfix_expression]
NK - [unary_expression -> .INC_OP unary_expression]
NK - [unary_expression -> .DEC_OP unary_expression]
NK - [unary_expression -> .unary_operator cast_expression]
NK - [unary_expression -> .SIZEOF unary_expression]
NK - [unary_expression -> .SIZEOF ( type_name )]
NK - [logical_or_expression -> .logical_and_expression]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression]
NK - [postfix_expression -> .primary_expression]
NK - [postfix_expression -> .postfix_expression [ expression ]]
NK - [postfix_expression -> .postfix_expression ( )]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list )]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER]
NK - [postfix_expression -> .postfix_expression INC_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP]
NK - [unary_operator -> .&]
NK - [unary_operator -> .*]
NK - [unary_operator -> .+]
NK - [unary_operator -> .-]
NK - [unary_operator -> .~]
NK - [unary_operator -> .!]
NK - [logical_and_expression -> .inclusive_or_expression]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression]
NK - [primary_expression -> .IDENTIFIER]
NK - [primary_expression -> .CONSTANT]
NK - [primary_expression -> .STRING_LITERAL]
NK - [primary_expression -> .( expression )]
NK - [inclusive_or_expression -> .exclusive_or_expression]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression]
NK - [exclusive_or_expression -> .and_expression]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression]
NK - [and_expression -> .equality_expression]
NK - [and_expression -> .and_expression & equality_expression]
NK - [equality_expression -> .relational_expression]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression]
NK - [equality_expression -> .equality_expression NE_OP relational_expression]
NK - [relational_expression -> .shift_expression]
NK - [relational_expression -> .relational_expression < shift_expression]
NK - [relational_expression -> .relational_expression > shift_expression]
NK - [relational_expression -> .relational_expression LE_OP shift_expression]
NK - [relational_expression -> .relational_expression GE_OP shift_expression]
NK - [shift_expression -> .additive_expression]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression]
NK - [additive_expression -> .multiplicative_expression]
NK - [additive_expression -> .additive_expression + multiplicative_expression]
NK - [additive_expression -> .additive_expression - multiplicative_expression]
NK - [multiplicative_expression -> .cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression]
NK - [cast_expression -> .unary_expression]
NK - [cast_expression -> .( type_name ) cast_expression]
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement.]
State 346:
K  - [struct_declarator -> declarator : constant_expression.]
State 347:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator.]
State 348:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ].]
State 349:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end.]
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;]
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE.]
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement.]
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;.]

Nullable sets:
nullable(primary_expression) = false
nullable(expression) = false
nullable(postfix_expression) = false
nullable(argument_expression_list) = false
nullable(struct_member_accessor) = false
nullable(assignment_expression) = false
nullable(unary_expression) = false
nullable(unary_operator) = false
nullable(cast_expression) = false
nullable(type_name) = false
nullable(multiplicative_expression) = false
nullable(additive_expression) = false
nullable(shift_expression) = false
nullable(relational_expression) = false
nullable(equality_expression) = false
nullable(and_expression) = false
nullable(exclusive_or_expression) = false
nullable(inclusive_or_expression) = false
nullable(logical_and_expression) = false
nullable(logical_or_expression) = false
nullable(conditional_expression) = false
nullable(assignment_operator) = false
nullable(constant_expression) = false
nullable(declaration) = false
nullable(declaration_specifiers) = false
nullable(init_declarator_list) = false
nullable(storage_class_specifier) = false
nullable(type_specifier) = false
nullable(type_qualifier) = false
nullable(init_declarator) = false
nullable(declarator) = false
nullable(initializer) = false
nullable(struct_or_union_specifier) = false
nullable(enum_specifier) = false
nullable(struct_or_union) = false
nullable(struct_tag_opt) = false
nullable(struct_definition_start) = false
nullable(struct_declaration_list) = false
nullable(struct_definition_end) = false
nullable(struct_declaration) = false
nullable(specifier_qualifier_list) = false
nullable(struct_declarator_list) = false
nullable(struct_declarator) = false
nullable(enumerator_list) = false
nullable(enumerator) = false
nullable(pointer) = false
nullable(direct_declarator) = false
nullable(parameter_list_start) = false
nullable(parameter_type_list) = false
nullable(parameter_list_end) = false
nullable(identifier_list) = false
nullable(type_qualifier_list) = false
nullable(parameter_list) = false
nullable(parameter_declaration) = false
nullable(abstract_declarator) = false
nullable(direct_abstract_declarator) = false
nullable(initializer_list) = false
nullable(statement) = false
nullable(labeled_statement) = false
nullable(compound_statement) = false
nullable(expression_statement) = false
nullable(selection_statement) = false
nullable(iteration_statement) = false
nullable(jump_statement) = false
nullable(block_start) = false
nullable(block_end) = false
nullable(statement_list) = false
nullable(declaration_list) = false
nullable(translation_unit) = false
nullable(external_declaration) = false
nullable(function_definition) = false
nullable($start) = false

FIRST sets:
FIRST($eof) = {$eof}
FIRST(primary_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(}
FIRST(IDENTIFIER) = {IDENTIFIER}
FIRST(CONSTANT) = {CONSTANT}
FIRST(STRING_LITERAL) = {STRING_LITERAL}
FIRST(() = {(}
FIRST(expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST()) = {)}
FIRST(postfix_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(}
FIRST([) = {[}
FIRST(]) = {]}
FIRST(argument_expression_list) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(struct_member_accessor) = {.,PTR_OP}
FIRST(INC_OP) = {INC_OP}
FIRST(DEC_OP) = {DEC_OP}
FIRST(.) = {.}
FIRST(PTR_OP) = {PTR_OP}
FIRST(assignment_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(,) = {,}
FIRST(unary_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(unary_operator) = {&,*,+,-,~,!}
FIRST(cast_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(SIZEOF) = {SIZEOF}
FIRST(type_name) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(&) = {&}
FIRST(*) = {*}
FIRST(+) = {+}
FIRST(-) = {-}
FIRST(~) = {~}
FIRST(!) = {!}
FIRST(multiplicative_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(/) = {/}
FIRST(%) = {%}
FIRST(additive_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(shift_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(LEFT_OP) = {LEFT_OP}
FIRST(RIGHT_OP) = {RIGHT_OP}
FIRST(relational_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(<) = {<}
FIRST(>) = {>}
FIRST(LE_OP) = {LE_OP}
FIRST(GE_OP) = {GE_OP}
FIRST(equality_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(EQ_OP) = {EQ_OP}
FIRST(NE_OP) = {NE_OP}
FIRST(and_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(exclusive_or_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(^) = {^}
FIRST(inclusive_or_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(|) = {|}
FIRST(logical_and_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(AND_OP) = {AND_OP}
FIRST(logical_or_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(OR_OP) = {OR_OP}
FIRST(conditional_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(?) = {?}
FIRST(:) = {:}
FIRST(assignment_operator) = {=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN}
FIRST(=) = {=}
FIRST(MUL_ASSIGN) = {MUL_ASSIGN}
FIRST(DIV_ASSIGN) = {DIV_ASSIGN}
FIRST(MOD_ASSIGN) = {MOD_ASSIGN}
FIRST(ADD_ASSIGN) = {ADD_ASSIGN}
FIRST(SUB_ASSIGN) = {SUB_ASSIGN}
FIRST(LEFT_ASSIGN) = {LEFT_ASSIGN}
FIRST(RIGHT_ASSIGN) = {RIGHT_ASSIGN}
FIRST(AND_ASSIGN) = {AND_ASSIGN}
FIRST(XOR_ASSIGN) = {XOR_ASSIGN}
FIRST(OR_ASSIGN) = {OR_ASSIGN}
FIRST(constant_expression) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(declaration_specifiers) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(;) = {;}
FIRST(init_declarator_list) = {*,IDENTIFIER,(}
FIRST(storage_class_specifier) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER}
FIRST(type_specifier) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME}
FIRST(type_qualifier) = {CONST,VOLATILE}
FIRST(init_declarator) = {*,IDENTIFIER,(}
FIRST(declarator) = {*,IDENTIFIER,(}
FIRST(initializer) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,{}
FIRST(TYPEDEF) = {TYPEDEF}
FIRST(EXTERN) = {EXTERN}
FIRST(STATIC) = {STATIC}
FIRST(AUTO) = {AUTO}
FIRST(REGISTER) = {REGISTER}
FIRST(VOID) = {VOID}
FIRST(CHAR) = {CHAR}
FIRST(SHORT) = {SHORT}
FIRST(INT) = {INT}
FIRST(LONG) = {LONG}
FIRST(FLOAT) = {FLOAT}
FIRST(DOUBLE) = {DOUBLE}
FIRST(SIGNED) = {SIGNED}
FIRST(UNSIGNED) = {UNSIGNED}
FIRST(struct_or_union_specifier) = {STRUCT,UNION}
FIRST(enum_specifier) = {ENUM}
FIRST(TYPE_NAME) = {TYPE_NAME}
FIRST(struct_or_union) = {STRUCT,UNION}
FIRST(struct_tag_opt) = {IDENTIFIER}
FIRST(struct_definition_start) = {{}
FIRST(struct_declaration_list) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(struct_definition_end) = {}}
FIRST({) = {{}
FIRST(}) = {}}
FIRST(STRUCT) = {STRUCT}
FIRST(UNION) = {UNION}
FIRST(struct_declaration) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(specifier_qualifier_list) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(struct_declarator_list) = {*,IDENTIFIER,(,:}
FIRST(struct_declarator) = {*,IDENTIFIER,(,:}
FIRST(ENUM) = {ENUM}
FIRST(enumerator_list) = {IDENTIFIER}
FIRST(enumerator) = {IDENTIFIER}
FIRST(CONST) = {CONST}
FIRST(VOLATILE) = {VOLATILE}
FIRST(pointer) = {*}
FIRST(direct_declarator) = {IDENTIFIER,(}
FIRST(parameter_list_start) = {(}
FIRST(parameter_type_list) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(parameter_list_end) = {)}
FIRST(identifier_list) = {IDENTIFIER}
FIRST(type_qualifier_list) = {CONST,VOLATILE}
FIRST(parameter_list) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(ELLIPSIS) = {ELLIPSIS}
FIRST(parameter_declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(abstract_declarator) = {*,(,[}
FIRST(direct_abstract_declarator) = {(,[}
FIRST(initializer_list) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,{}
FIRST(statement) = {IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FIRST(labeled_statement) = {IDENTIFIER,CASE,DEFAULT}
FIRST(compound_statement) = {{}
FIRST(expression_statement) = {;,IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FIRST(selection_statement) = {IF,SWITCH}
FIRST(iteration_statement) = {WHILE,DO,FOR}
FIRST(jump_statement) = {GOTO,CONTINUE,BREAK,RETURN}
FIRST(CASE) = {CASE}
FIRST(DEFAULT) = {DEFAULT}
FIRST(block_start) = {{}
FIRST(block_end) = {}}
FIRST(statement_list) = {IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FIRST(declaration_list) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FIRST(IF) = {IF}
FIRST(ELSE) = {ELSE}
FIRST(SWITCH) = {SWITCH}
FIRST(WHILE) = {WHILE}
FIRST(DO) = {DO}
FIRST(FOR) = {FOR}
FIRST(GOTO) = {GOTO}
FIRST(CONTINUE) = {CONTINUE}
FIRST(BREAK) = {BREAK}
FIRST(RETURN) = {RETURN}
FIRST(translation_unit) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(}
FIRST(external_declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(}
FIRST(function_definition) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(}
FIRST($start) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(}

FOLLOW sets:
FOLLOW(primary_expression) = {[,(,.,PTR_OP,INC_OP,DEC_OP,=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(expression) = {),,,],:,;}
FOLLOW(postfix_expression) = {[,(,.,PTR_OP,INC_OP,DEC_OP,=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(argument_expression_list) = {),,}
FOLLOW(struct_member_accessor) = {IDENTIFIER}
FOLLOW(assignment_expression) = {),,,;,],:,}}
FOLLOW(unary_expression) = {=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(unary_operator) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FOLLOW(cast_expression) = {=,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,LEFT_ASSIGN,RIGHT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(type_name) = {)}
FOLLOW(multiplicative_expression) = {*,/,%,+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(additive_expression) = {+,-,LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(shift_expression) = {LEFT_OP,RIGHT_OP,<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(relational_expression) = {<,>,LE_OP,GE_OP,EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(equality_expression) = {EQ_OP,NE_OP,&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(and_expression) = {&,^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(exclusive_or_expression) = {^,|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(inclusive_or_expression) = {|,AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(logical_and_expression) = {AND_OP,OR_OP,),,,?,;,],:,}}
FOLLOW(logical_or_expression) = {OR_OP,),,,?,;,],:,}}
FOLLOW(conditional_expression) = {),,,;,],:,}}
FOLLOW(assignment_operator) = {IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF}
FOLLOW(constant_expression) = {;,,,},],:}
FOLLOW(declaration) = {},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,$eof}
FOLLOW(declaration_specifiers) = {;,*,IDENTIFIER,(,[,),,}
FOLLOW(init_declarator_list) = {;,,}
FOLLOW(storage_class_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,[,),,}
FOLLOW(type_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,),[,:,,}
FOLLOW(type_qualifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,),[,:,,}
FOLLOW(init_declarator) = {;,,}
FOLLOW(declarator) = {;,,,=,:,),TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,{}
FOLLOW(initializer) = {;,,,}}
FOLLOW(struct_or_union_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,),[,:,,}
FOLLOW(enum_specifier) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,),[,:,,}
FOLLOW(struct_or_union) = {IDENTIFIER}
FOLLOW(struct_tag_opt) = {{}
FOLLOW(struct_definition_start) = {VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FOLLOW(struct_declaration_list) = {},VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FOLLOW(struct_definition_end) = {;,*,IDENTIFIER,(,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,),[,:,,}
FOLLOW(struct_declaration) = {},VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FOLLOW(specifier_qualifier_list) = {),*,(,[,IDENTIFIER,:}
FOLLOW(struct_declarator_list) = {;,,}
FOLLOW(struct_declarator) = {;,,}
FOLLOW(enumerator_list) = {},,}
FOLLOW(enumerator) = {},,}
FOLLOW(pointer) = {IDENTIFIER,(,),,,[}
FOLLOW(direct_declarator) = {;,,,=,[,(,:,),TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,{}
FOLLOW(parameter_list_start) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,IDENTIFIER}
FOLLOW(parameter_type_list) = {)}
FOLLOW(parameter_list_end) = {;,,,=,[,(,),:,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,{}
FOLLOW(identifier_list) = {),,}
FOLLOW(type_qualifier_list) = {IDENTIFIER,(,*,CONST,VOLATILE,),,,[}
FOLLOW(parameter_list) = {),,}
FOLLOW(parameter_declaration) = {),,}
FOLLOW(abstract_declarator) = {),,}
FOLLOW(direct_abstract_declarator) = {),,,[,(}
FOLLOW(initializer_list) = {},,}
FOLLOW(statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(labeled_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(compound_statement) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ELSE,WHILE,},CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,INC_OP,DEC_OP,&,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,$eof}
FOLLOW(expression_statement) = {),IDENTIFIER,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,ELSE,WHILE,},CASE,DEFAULT,{,;,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(selection_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(iteration_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(jump_statement) = {ELSE,WHILE,},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(block_start) = {},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FOLLOW(block_end) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,ELSE,WHILE,},CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,INC_OP,DEC_OP,&,+,-,~,!,SIZEOF,IF,SWITCH,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,$eof}
FOLLOW(statement_list) = {},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN}
FOLLOW(declaration_list) = {},IDENTIFIER,CASE,DEFAULT,{,;,CONSTANT,STRING_LITERAL,(,INC_OP,DEC_OP,&,*,+,-,~,!,SIZEOF,IF,SWITCH,WHILE,DO,FOR,GOTO,CONTINUE,BREAK,RETURN,TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE}
FOLLOW(translation_unit) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,$eof}
FOLLOW(external_declaration) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,$eof}
FOLLOW(function_definition) = {TYPEDEF,EXTERN,STATIC,AUTO,REGISTER,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,STRUCT,UNION,ENUM,TYPE_NAME,CONST,VOLATILE,*,IDENTIFIER,(,$eof}
FOLLOW($start) = {$eof}


State 0:
K  - [$start -> .translation_unit $eof, $eof]
NK - [translation_unit -> .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [translation_unit -> .translation_unit external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 1:
K  - [direct_declarator -> IDENTIFIER., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 2:
K  - [direct_declarator -> ( .declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
State 3:
K  - [pointer -> *., IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .pointer, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier_list -> .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 4:
K  - [external_declaration -> declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 5:
K  - [declaration_specifiers -> type_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 6:
K  - [declaration_specifiers -> type_qualifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 7:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [function_definition -> declaration_specifiers .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration -> declaration_specifiers .;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/;/=/,]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/;/=/,]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
State 8:
K  - [function_definition -> declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [function_definition -> declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 9:
K  - [declaration_specifiers -> storage_class_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 10:
K  - [storage_class_specifier -> STATIC., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 11:
K  - [storage_class_specifier -> REGISTER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 12:
K  - [type_specifier -> VOID., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 13:
K  - [storage_class_specifier -> EXTERN., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 14:
K  - [type_specifier -> SHORT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 15:
K  - [storage_class_specifier -> TYPEDEF., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 16:
K  - [storage_class_specifier -> AUTO., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 17:
K  - [type_specifier -> INT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 18:
K  - [type_specifier -> CHAR., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 19:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [struct_tag_opt -> .IDENTIFIER, {]
NK - [struct_tag_opt -> ., {]
State 20:
K  - [type_specifier -> struct_or_union_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 21:
K  - [type_specifier -> enum_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 22:
K  - [type_specifier -> LONG., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 23:
K  - [type_specifier -> FLOAT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 24:
K  - [type_specifier -> DOUBLE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 25:
K  - [type_specifier -> SIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 26:
K  - [type_specifier -> UNSIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 27:
K  - [type_specifier -> TYPE_NAME., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 28:
K  - [struct_or_union -> STRUCT., IDENTIFIER]
State 29:
K  - [type_qualifier -> CONST., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 30:
K  - [type_qualifier -> VOLATILE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 31:
K  - [enum_specifier -> ENUM .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 32:
K  - [struct_or_union -> UNION., IDENTIFIER]
State 33:
K  - [declarator -> pointer .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/,/:]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
State 34:
K  - [declarator -> direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/IDENTIFIER]
State 35:
K  - [$start -> translation_unit .$eof, $eof]
K  - [translation_unit -> translation_unit .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 36:
K  - [external_declaration -> function_definition., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 37:
K  - [translation_unit -> external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 38:
K  - [direct_declarator -> ( declarator .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/,/;/=/:]
State 39:
K  - [type_qualifier_list -> type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 40:
K  - [pointer -> * pointer., IDENTIFIER/(/)/,/[]
State 41:
K  - [pointer -> * type_qualifier_list., IDENTIFIER/(/)/,/[]
K  - [pointer -> * type_qualifier_list .pointer, IDENTIFIER/(/)/,/[]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 42:
K  - [declaration_specifiers -> type_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 43:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 44:
K  - [init_declarator_list -> init_declarator., ;/,]
State 45:
K  - [declaration -> declaration_specifiers init_declarator_list .;, $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/}/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/&/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
K  - [init_declarator_list -> init_declarator_list ., init_declarator, ;/,]
State 46:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [function_definition -> declaration_specifiers declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 47:
K  - [declaration -> declaration_specifiers ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/}/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/&/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 48:
K  - [declaration_list -> declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 49:
K  - [declaration -> declaration_specifiers .;, {/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, {/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/=/,]
NK - [declarator -> .direct_declarator, ;/=/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/=/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/=/[/(/,]
State 50:
K  - [block_start -> {., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 51:
K  - [compound_statement -> block_start .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start .statement_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start .declaration_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start .declaration_list statement_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration_list -> .declaration, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_list -> .declaration_list declaration, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 52:
K  - [function_definition -> declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 53:
K  - [function_definition -> declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 54:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 55:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [struct_tag_opt -> IDENTIFIER., {]
State 56:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [struct_definition_start -> .{, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 57:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enum_specifier -> ENUM IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 58:
K  - [enum_specifier -> ENUM { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 59:
K  - [declarator -> pointer direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/IDENTIFIER]
State 60:
K  - [direct_declarator -> direct_declarator [ .constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator [ .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 61:
K  - [direct_declarator -> direct_declarator ( .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/IDENTIFIER]
State 62:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [identifier_list -> .IDENTIFIER, )/,]
NK - [identifier_list -> .identifier_list , IDENTIFIER, )/,]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 63:
K  - [$start -> translation_unit $eof., $eof]
State 64:
K  - [translation_unit -> translation_unit external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 65:
K  - [direct_declarator -> ( declarator )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/,/;/=/:]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 67:
K  - [pointer -> * type_qualifier_list pointer., IDENTIFIER/(/)/,/[]
State 68:
K  - [init_declarator_list -> init_declarator_list , .init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/=]
NK - [declarator -> .direct_declarator, ;/,/=]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/=/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/=/[/(]
State 69:
K  - [declaration -> declaration_specifiers init_declarator_list ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/}/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/&/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 70:
K  - [init_declarator -> declarator = .initializer, ;/,]
NK - [initializer -> .assignment_expression, ;/,]
NK - [initializer -> .{ initializer_list }, ;/,]
NK - [initializer -> .{ initializer_list , }, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 71:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 72:
K  - [function_definition -> declaration_specifiers declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 73:
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
State 74:
K  - [postfix_expression -> primary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 75:
K  - [expression_statement -> expression .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/)/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 76:
K  - [logical_and_expression -> inclusive_or_expression., ;/?/AND_OP/]/)/:/}/,/OR_OP]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ;/?/|/]/)/:/}/,/OR_OP/AND_OP]
State 77:
K  - [unary_expression -> postfix_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [postfix_expression -> postfix_expression .[ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
NK - [struct_member_accessor -> .., IDENTIFIER]
NK - [struct_member_accessor -> .PTR_OP, IDENTIFIER]
State 78:
K  - [labeled_statement -> IDENTIFIER .: statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [primary_expression -> IDENTIFIER., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 79:
K  - [primary_expression -> STRING_LITERAL., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 80:
K  - [primary_expression -> ( .expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
K  - [cast_expression -> ( .type_name ) cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 81:
K  - [primary_expression -> CONSTANT., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 82:
K  - [unary_expression -> INC_OP .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 83:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression, ;/)/}/,/]/:]
K  - [cast_expression -> unary_expression., ;/?/)/}/,/]/:/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [assignment_operator -> .=, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .MUL_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .DIV_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .MOD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .ADD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .SUB_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .LEFT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .RIGHT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .AND_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .XOR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .OR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 84:
K  - [shift_expression -> additive_expression., ;/?/LEFT_OP/RIGHT_OP/]/)/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ;/?/+/-/]/)/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/LEFT_OP/RIGHT_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ;/?/+/-/]/)/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/LEFT_OP/RIGHT_OP]
State 85:
K  - [multiplicative_expression -> cast_expression., ;/?/*///%/]/)/:/}/,/|/+/-/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 86:
K  - [additive_expression -> multiplicative_expression., ;/?/+/-/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ;/?/*///%/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/+/-]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ;/?/*///%/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/+/-]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ;/?/*///%/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/+/-]
State 87:
K  - [unary_expression -> unary_operator .cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 88:
K  - [expression -> assignment_expression., ;/,/)/]/:]
State 89:
K  - [and_expression -> equality_expression., ;/?/&/]/)/:/}/,/|/^/AND_OP/OR_OP]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/]/)/:/}/,/|/^/AND_OP/OR_OP/&]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ;/?/EQ_OP/NE_OP/]/)/:/}/,/|/^/AND_OP/OR_OP/&]
State 90:
K  - [relational_expression -> shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP/</>/LE_OP/GE_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP/</>/LE_OP/GE_OP]
State 91:
K  - [equality_expression -> relational_expression., ;/?/EQ_OP/NE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .< shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
State 92:
K  - [exclusive_or_expression -> and_expression., ;/?/^/]/)/:/}/,/|/AND_OP/OR_OP]
K  - [and_expression -> and_expression .& equality_expression, ;/?/&/]/)/:/}/,/|/AND_OP/OR_OP/^]
State 93:
K  - [inclusive_or_expression -> exclusive_or_expression., ;/?/|/]/)/:/}/,/AND_OP/OR_OP]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ;/?/^/]/)/:/}/,/AND_OP/OR_OP/|]
State 94:
K  - [unary_operator -> +., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 95:
K  - [unary_expression -> SIZEOF .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [unary_expression -> SIZEOF .( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 96:
K  - [unary_expression -> DEC_OP .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 97:
K  - [unary_operator -> &., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 98:
K  - [unary_operator -> *., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 99:
K  - [unary_operator -> -., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 100:
K  - [unary_operator -> ~., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 101:
K  - [unary_operator -> !., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 102:
K  - [logical_or_expression -> logical_and_expression., ;/?/OR_OP/]/)/:/}/,]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ;/?/AND_OP/]/)/:/}/,/OR_OP]
State 103:
K  - [assignment_expression -> conditional_expression., ;/)/}/,/]/:]
State 104:
K  - [conditional_expression -> logical_or_expression., ;/]/)/:/}/,]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression, ;/]/)/:/}/,]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression, ;/?/OR_OP/]/)/:/}/,]
State 105:
K  - [expression_statement -> ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/)/ELSE]
State 106:
K  - [block_end -> }., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 107:
K  - [statement -> expression_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 108:
K  - [statement -> selection_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 109:
K  - [statement -> iteration_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 110:
K  - [statement -> jump_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 111:
K  - [compound_statement -> block_start block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 112:
K  - [compound_statement -> block_start statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 113:
K  - [compound_statement -> block_start declaration_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start declaration_list .statement_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [declaration_list -> declaration_list .declaration, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 114:
K  - [statement -> compound_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 115:
K  - [statement -> labeled_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 116:
K  - [statement_list -> statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 117:
K  - [labeled_statement -> CASE .constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [constant_expression -> .conditional_expression, :]
NK - [conditional_expression -> .logical_or_expression, :]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 118:
K  - [labeled_statement -> DEFAULT .: statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 119:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, WHILE]
NK - [statement -> .compound_statement, WHILE]
NK - [statement -> .expression_statement, WHILE]
NK - [statement -> .selection_statement, WHILE]
NK - [statement -> .iteration_statement, WHILE]
NK - [statement -> .jump_statement, WHILE]
NK - [labeled_statement -> .IDENTIFIER : statement, WHILE]
NK - [labeled_statement -> .CASE constant_expression : statement, WHILE]
NK - [labeled_statement -> .DEFAULT : statement, WHILE]
NK - [compound_statement -> .block_start block_end, WHILE]
NK - [compound_statement -> .block_start statement_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, WHILE]
NK - [expression_statement -> .;, WHILE]
NK - [expression_statement -> .expression ;, WHILE]
NK - [selection_statement -> .IF ( expression ) statement, WHILE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, WHILE]
NK - [selection_statement -> .SWITCH ( expression ) statement, WHILE]
NK - [iteration_statement -> .WHILE ( expression ) statement, WHILE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, WHILE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, WHILE]
NK - [jump_statement -> .CONTINUE ;, WHILE]
NK - [jump_statement -> .BREAK ;, WHILE]
NK - [jump_statement -> .RETURN ;, WHILE]
NK - [jump_statement -> .RETURN expression ;, WHILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 120:
K  - [selection_statement -> IF .( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF .( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 121:
K  - [jump_statement -> BREAK .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 122:
K  - [selection_statement -> SWITCH .( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 123:
K  - [iteration_statement -> WHILE .( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 125:
K  - [jump_statement -> GOTO .IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 126:
K  - [jump_statement -> CONTINUE .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 127:
K  - [jump_statement -> RETURN .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [jump_statement -> RETURN .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 128:
K  - [declaration_list -> declaration_list declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 129:
K  - [function_definition -> declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 130:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
NK - [struct_declaration_list -> .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_specifier, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier, */IDENTIFIER/(/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 131:
K  - [struct_definition_start -> {., VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 132:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 133:
K  - [enumerator -> IDENTIFIER., }/,]
K  - [enumerator -> IDENTIFIER .= constant_expression, }/,]
State 134:
K  - [enum_specifier -> ENUM { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 135:
K  - [enumerator_list -> enumerator., }/,]
State 136:
K  - [primary_expression -> IDENTIFIER., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 137:
K  - [direct_declarator -> direct_declarator [ ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 138:
K  - [cast_expression -> unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 139:
K  - [direct_declarator -> direct_declarator [ constant_expression .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 140:
K  - [constant_expression -> conditional_expression., ]/:/}/;/,]
State 141:
K  - [direct_declarator -> direct_declarator ( )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 142:
K  - [identifier_list -> IDENTIFIER., )/,]
State 143:
K  - [parameter_declaration -> declaration_specifiers .declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers., )/,]
NK - [declarator -> .pointer direct_declarator, )/,]
NK - [declarator -> .direct_declarator, )/,]
NK - [abstract_declarator -> .pointer, )/,]
NK - [abstract_declarator -> .direct_abstract_declarator, )/,]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )/,]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 144:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [identifier_list -> identifier_list ., IDENTIFIER, )/,]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 145:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 146:
K  - [parameter_type_list -> parameter_list., )]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS, )]
K  - [parameter_list -> parameter_list ., parameter_declaration, )/,]
State 147:
K  - [parameter_list -> parameter_declaration., )/,]
State 148:
K  - [init_declarator_list -> init_declarator_list , init_declarator., ;/,]
State 149:
K  - [initializer -> assignment_expression., ;/}/,]
State 150:
K  - [init_declarator -> declarator = initializer., ;/,]
State 151:
K  - [initializer -> { .initializer_list }, ;/}/,]
K  - [initializer -> { .initializer_list , }, ;/}/,]
NK - [initializer_list -> .initializer, }/,]
NK - [initializer_list -> .initializer_list , initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 152:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 153:
K  - [expression -> expression , .assignment_expression, ;/,/)/]/:]
NK - [assignment_expression -> .conditional_expression, ;/,/)/]/:]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,/)/]/:]
NK - [conditional_expression -> .logical_or_expression, ;/,/)/]/:]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,/)/]/:]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [logical_or_expression -> .logical_and_expression, ;/,/?/OR_OP/)/]/:]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/,/?/OR_OP/)/]/:]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/,/?/AND_OP/OR_OP/)/]/:]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/,/?/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/,/?/|/AND_OP/OR_OP/)/]/:]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/,/?/|/AND_OP/OR_OP/)/]/:]
NK - [exclusive_or_expression -> .and_expression, ;/,/?/^/|/AND_OP/OR_OP/)/]/:]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/,/?/^/|/AND_OP/OR_OP/)/]/:]
NK - [and_expression -> .equality_expression, ;/,/?/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [and_expression -> .and_expression & equality_expression, ;/,/?/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [equality_expression -> .relational_expression, ;/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression < shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression > shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [shift_expression -> .additive_expression, ;/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [additive_expression -> .multiplicative_expression, ;/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [cast_expression -> .unary_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [cast_expression -> .( type_name ) cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
State 154:
K  - [expression_statement -> expression ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/)/ELSE]
State 155:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression, ;/?/|/]/AND_OP/)/:/}/,/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ;/?/|/]/^/AND_OP/)/:/}/,/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/|/]/^/AND_OP/)/:/}/,/OR_OP]
NK - [and_expression -> .equality_expression, ;/?/|/]/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ;/?/|/]/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [equality_expression -> .relational_expression, ;/?/|/]/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/|/]/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/|/]/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/|/]/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/|/]/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/|/]/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/|/]/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/|/]/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/|/]/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
State 156:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 157:
K  - [postfix_expression -> postfix_expression [ .expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
NK - [expression -> .assignment_expression, ]/,]
NK - [expression -> .expression , assignment_expression, ]/,]
NK - [assignment_expression -> .conditional_expression, ]/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 158:
K  - [postfix_expression -> postfix_expression ( .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
NK - [argument_expression_list -> .assignment_expression, )/,]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 159:
K  - [postfix_expression -> postfix_expression INC_OP., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 160:
K  - [struct_member_accessor -> .., IDENTIFIER]
State 161:
K  - [postfix_expression -> postfix_expression DEC_OP., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 162:
K  - [struct_member_accessor -> PTR_OP., IDENTIFIER]
State 163:
K  - [labeled_statement -> IDENTIFIER : .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 164:
K  - [primary_expression -> ( expression .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
K  - [expression -> expression ., assignment_expression, )/,]
State 165:
K  - [cast_expression -> ( type_name .) cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 166:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
K  - [specifier_qualifier_list -> type_specifier., )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 167:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
K  - [specifier_qualifier_list -> type_qualifier., )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 168:
K  - [type_name -> specifier_qualifier_list., )]
K  - [type_name -> specifier_qualifier_list .abstract_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 169:
K  - [primary_expression -> ( .expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 170:
K  - [unary_expression -> INC_OP unary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 171:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression, ;/)/}/,/]/:]
NK - [assignment_expression -> .conditional_expression, ;/)/}/,/]/:]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/)/}/,/]/:]
NK - [conditional_expression -> .logical_or_expression, ;/)/}/,/]/:]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/)/}/,/]/:]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [logical_or_expression -> .logical_and_expression, ;/)/?/OR_OP/}/,/]/:]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/)/?/OR_OP/}/,/]/:]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/)/?/AND_OP/OR_OP/}/,/]/:]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/)/?/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/}/,/]/:]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/}/,/]/:]
NK - [exclusive_or_expression -> .and_expression, ;/)/?/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/)/?/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [and_expression -> .equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [and_expression -> .and_expression & equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [equality_expression -> .relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression < shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression > shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [shift_expression -> .additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [additive_expression -> .multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [cast_expression -> .unary_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [cast_expression -> .( type_name ) cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
State 172:
K  - [assignment_operator -> MUL_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 173:
K  - [assignment_operator -> =., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 174:
K  - [assignment_operator -> DIV_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 175:
K  - [assignment_operator -> MOD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 176:
K  - [assignment_operator -> LEFT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 177:
K  - [assignment_operator -> ADD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 178:
K  - [assignment_operator -> AND_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 179:
K  - [assignment_operator -> XOR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 180:
K  - [assignment_operator -> SUB_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 181:
K  - [assignment_operator -> RIGHT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 182:
K  - [assignment_operator -> OR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 183:
K  - [additive_expression -> additive_expression + .multiplicative_expression, ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 184:
K  - [additive_expression -> additive_expression - .multiplicative_expression, ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 185:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 186:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 187:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 188:
K  - [unary_expression -> unary_operator cast_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 189:
K  - [equality_expression -> equality_expression NE_OP .relational_expression, ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 190:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression, ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 191:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 192:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 193:
K  - [relational_expression -> relational_expression > .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 194:
K  - [relational_expression -> relational_expression < .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 195:
K  - [relational_expression -> relational_expression LE_OP .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 196:
K  - [relational_expression -> relational_expression GE_OP .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 197:
K  - [and_expression -> and_expression & .equality_expression, ;/?/&/]/)/^/:/}/,/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/&/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/&/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/&/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/&/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/&/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/&/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
State 198:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression, ;/?/^/]/)/|/:/}/,/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ;/?/^/]/)/&/|/:/}/,/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ;/?/^/]/)/&/|/:/}/,/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ;/?/^/]/)/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/^/]/)/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/^/]/)/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/^/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/^/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/^/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/^/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/^/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/^/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
State 199:
K  - [unary_expression -> SIZEOF ( .type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [primary_expression -> ( .expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 200:
K  - [unary_expression -> SIZEOF unary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 201:
K  - [unary_expression -> DEC_OP unary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 202:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression, ;/?/AND_OP/]/)/OR_OP/:/}/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/AND_OP/]/)/|/OR_OP/:/}/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/AND_OP/]/)/|/OR_OP/:/}/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/AND_OP/]/)/^/|/OR_OP/:/}/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/AND_OP/]/)/^/|/OR_OP/:/}/,]
NK - [and_expression -> .equality_expression, ;/?/AND_OP/]/)/&/^/|/OR_OP/:/}/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/AND_OP/]/)/&/^/|/OR_OP/:/}/,]
NK - [equality_expression -> .relational_expression, ;/?/AND_OP/]/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/AND_OP/]/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/AND_OP/]/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [shift_expression -> .additive_expression, ;/?/AND_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/AND_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/AND_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/AND_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/AND_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/AND_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [cast_expression -> .unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .postfix_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .primary_expression, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [primary_expression -> .CONSTANT, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [primary_expression -> .( expression ), ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
State 203:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression, ;/?/OR_OP/]/)/:/}/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/OR_OP/]/)/AND_OP/:/}/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/OR_OP/]/)/AND_OP/:/}/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/OR_OP/]/)/|/AND_OP/:/}/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/OR_OP/]/)/|/AND_OP/:/}/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/OR_OP/]/)/^/|/AND_OP/:/}/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/OR_OP/]/)/^/|/AND_OP/:/}/,]
NK - [and_expression -> .equality_expression, ;/?/OR_OP/]/)/&/^/|/AND_OP/:/}/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/OR_OP/]/)/&/^/|/AND_OP/:/}/,]
NK - [equality_expression -> .relational_expression, ;/?/OR_OP/]/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/OR_OP/]/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/OR_OP/]/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [shift_expression -> .additive_expression, ;/?/OR_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/OR_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/OR_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/OR_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/OR_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/OR_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [cast_expression -> .unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .postfix_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .primary_expression, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [primary_expression -> .CONSTANT, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [primary_expression -> .( expression ), ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
State 204:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression, ;/]/)/:/}/,]
NK - [expression -> .assignment_expression, :/,]
NK - [expression -> .expression , assignment_expression, :/,]
NK - [assignment_expression -> .conditional_expression, :/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, :/,]
NK - [conditional_expression -> .logical_or_expression, :/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 205:
K  - [compound_statement -> block_start statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 206:
K  - [statement_list -> statement_list statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 207:
K  - [compound_statement -> block_start declaration_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 208:
K  - [compound_statement -> block_start declaration_list statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 209:
K  - [labeled_statement -> CASE constant_expression .: statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 210:
K  - [labeled_statement -> DEFAULT : .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 211:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 212:
K  - [selection_statement -> IF ( .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( .expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 213:
K  - [jump_statement -> BREAK ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 214:
K  - [selection_statement -> SWITCH ( .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 215:
K  - [iteration_statement -> WHILE ( .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 216:
K  - [iteration_statement -> FOR ( .expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [expression_statement -> .expression ;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 217:
K  - [jump_statement -> GOTO IDENTIFIER .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 218:
K  - [jump_statement -> CONTINUE ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 219:
K  - [jump_statement -> RETURN expression .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 220:
K  - [jump_statement -> RETURN ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 221:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_definition_end -> .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_specifier, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier, */IDENTIFIER/(/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 222:
K  - [struct_declaration_list -> struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 223:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_declarator_list -> .struct_declarator, ;/,]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/:/,]
NK - [declarator -> .direct_declarator, ;/:/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/:/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/:/[/(/,]
State 224:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 225:
K  - [enumerator -> IDENTIFIER = .constant_expression, }/,]
NK - [constant_expression -> .conditional_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [logical_or_expression -> .logical_and_expression, }/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 226:
K  - [enumerator_list -> enumerator_list , .enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 227:
K  - [enum_specifier -> ENUM { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 228:
K  - [direct_declarator -> direct_declarator [ constant_expression ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 229:
K  - [direct_abstract_declarator -> [ .], )/,/[/(]
K  - [direct_abstract_declarator -> [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 230:
K  - [direct_declarator -> ( .declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/[]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 231:
K  - [parameter_declaration -> declaration_specifiers declarator., )/,]
State 232:
K  - [declarator -> pointer .direct_declarator, )/,]
K  - [abstract_declarator -> pointer., )/,]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )/,]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 233:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 234:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator., )/,]
State 235:
K  - [abstract_declarator -> direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 236:
K  - [parameter_list_end -> )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 237:
K  - [identifier_list -> identifier_list , .IDENTIFIER, )/,]
State 238:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 239:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 240:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS, )]
K  - [parameter_list -> parameter_list , .parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 241:
K  - [initializer_list -> initializer., }/,]
State 242:
K  - [initializer -> { initializer_list .}, ;/}/,]
K  - [initializer -> { initializer_list ., }, ;/}/,]
K  - [initializer_list -> initializer_list ., initializer, }/,]
State 243:
K  - [expression -> expression , assignment_expression., ;/,/)/]/:]
State 244:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression., ;/?/|/]/AND_OP/)/:/}/,/OR_OP]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ;/?/|/]/^/AND_OP/)/:/}/,/OR_OP]
State 245:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 246:
K  - [postfix_expression -> postfix_expression [ expression .], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [expression -> expression ., assignment_expression, ]/,]
State 247:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression, )/,]
State 248:
K  - [postfix_expression -> postfix_expression ( )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 249:
K  - [argument_expression_list -> assignment_expression., )/,]
State 250:
K  - [labeled_statement -> IDENTIFIER : statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 251:
K  - [primary_expression -> ( expression )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 252:
K  - [cast_expression -> ( type_name ) .cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 253:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list., )/*/(/[/IDENTIFIER/:]
State 254:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list., )/*/(/[/IDENTIFIER/:]
State 255:
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/[/(]
K  - [direct_abstract_declarator -> ( .), )/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 256:
K  - [abstract_declarator -> pointer., )]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 257:
K  - [type_name -> specifier_qualifier_list abstract_declarator., )]
State 258:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression., ;/)/}/,/]/:]
State 259:
K  - [additive_expression -> additive_expression + multiplicative_expression., ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 260:
K  - [additive_expression -> additive_expression - multiplicative_expression., ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 261:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression., ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 262:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression., ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 263:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression., ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 264:
K  - [equality_expression -> equality_expression NE_OP relational_expression., ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .< shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 265:
K  - [equality_expression -> equality_expression EQ_OP relational_expression., ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .< shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 266:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression., ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 267:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression., ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 268:
K  - [relational_expression -> relational_expression > shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 269:
K  - [relational_expression -> relational_expression < shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 270:
K  - [relational_expression -> relational_expression LE_OP shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 271:
K  - [relational_expression -> relational_expression GE_OP shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 272:
K  - [and_expression -> and_expression & equality_expression., ;/?/&/]/)/^/:/}/,/|/AND_OP/OR_OP]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
State 273:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression., ;/?/^/]/)/|/:/}/,/AND_OP/OR_OP]
K  - [and_expression -> and_expression .& equality_expression, ;/?/^/]/)/&/|/:/}/,/AND_OP/OR_OP]
State 274:
K  - [unary_expression -> SIZEOF ( type_name .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 275:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression., ;/?/AND_OP/]/)/OR_OP/:/}/,]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ;/?/AND_OP/]/)/|/OR_OP/:/}/,]
State 276:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression., ;/?/OR_OP/]/)/:/}/,]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ;/?/OR_OP/]/)/AND_OP/:/}/,]
State 277:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression, ;/]/)/:/}/,]
K  - [expression -> expression ., assignment_expression, :/,]
State 278:
K  - [compound_statement -> block_start declaration_list statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 279:
K  - [labeled_statement -> CASE constant_expression : .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 280:
K  - [labeled_statement -> DEFAULT : statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 281:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 282:
K  - [selection_statement -> IF ( expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( expression .) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 283:
K  - [selection_statement -> SWITCH ( expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 284:
K  - [iteration_statement -> WHILE ( expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 285:
K  - [iteration_statement -> FOR ( expression_statement .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 286:
K  - [jump_statement -> GOTO IDENTIFIER ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 287:
K  - [jump_statement -> RETURN expression ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 288:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
State 289:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 290:
K  - [struct_definition_end -> }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
State 291:
K  - [struct_declarator -> declarator., ;/,]
K  - [struct_declarator -> declarator .: constant_expression, ;/,]
State 292:
K  - [struct_declarator -> : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 293:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator, ;/,]
State 294:
K  - [struct_declarator_list -> struct_declarator., ;/,]
State 295:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 296:
K  - [enumerator -> IDENTIFIER = constant_expression., }/,]
State 297:
K  - [enumerator_list -> enumerator_list , enumerator., }/,]
State 298:
K  - [direct_abstract_declarator -> [ ]., )/,/[/(]
State 299:
K  - [direct_abstract_declarator -> [ constant_expression .], )/,/[/(]
State 300:
K  - [direct_abstract_declarator -> ( )., )/,/[/(]
State 301:
K  - [direct_abstract_declarator -> ( abstract_declarator .), )/,/[/(]
State 302:
K  - [abstract_declarator -> pointer direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 303:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 304:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 305:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 306:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 307:
K  - [identifier_list -> identifier_list , IDENTIFIER., )/,]
State 308:
K  - [parameter_list -> parameter_list , parameter_declaration., )/,]
State 309:
K  - [parameter_type_list -> parameter_list , ELLIPSIS., )]
State 310:
K  - [initializer -> { initializer_list , .}, ;/}/,]
K  - [initializer_list -> initializer_list , .initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 311:
K  - [initializer -> { initializer_list }., ;/}/,]
State 312:
K  - [postfix_expression -> postfix_expression [ expression ]., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 313:
K  - [postfix_expression -> postfix_expression ( argument_expression_list )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, )/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 315:
K  - [cast_expression -> ( type_name ) cast_expression., ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 316:
K  - [unary_expression -> SIZEOF ( type_name )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 317:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression, ;/]/)/:/}/,]
NK - [conditional_expression -> .logical_or_expression, ;/]/)/:/}/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/]/)/:/}/,]
NK - [logical_or_expression -> .logical_and_expression, ;/]/)/:/?/OR_OP/}/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/]/)/:/?/OR_OP/}/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/]/)/:/?/AND_OP/OR_OP/}/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/]/)/:/?/AND_OP/OR_OP/}/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/]/)/:/?/|/AND_OP/OR_OP/}/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/]/)/:/?/|/AND_OP/OR_OP/}/,]
NK - [exclusive_or_expression -> .and_expression, ;/]/)/:/?/^/|/AND_OP/OR_OP/}/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/]/)/:/?/^/|/AND_OP/OR_OP/}/,]
NK - [and_expression -> .equality_expression, ;/]/)/:/?/&/^/|/AND_OP/OR_OP/}/,]
NK - [and_expression -> .and_expression & equality_expression, ;/]/)/:/?/&/^/|/AND_OP/OR_OP/}/,]
NK - [equality_expression -> .relational_expression, ;/]/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/]/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/]/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [shift_expression -> .additive_expression, ;/]/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/]/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/]/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [additive_expression -> .multiplicative_expression, ;/]/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/]/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/]/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [cast_expression -> .unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .postfix_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .primary_expression, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [primary_expression -> .CONSTANT, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [primary_expression -> .STRING_LITERAL, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [primary_expression -> .( expression ), ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
State 318:
K  - [labeled_statement -> CASE constant_expression : statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 319:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 320:
K  - [selection_statement -> IF ( expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( expression ) .statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 321:
K  - [selection_statement -> SWITCH ( expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 322:
K  - [iteration_statement -> WHILE ( expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 323:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 324:
K  - [iteration_statement -> FOR ( expression_statement ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 325:
K  - [struct_declarator -> declarator : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 326:
K  - [struct_declarator -> : constant_expression., ;/,]
State 327:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/:]
NK - [declarator -> .direct_declarator, ;/,/:]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/:/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/:/[/(]
State 328:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 329:
K  - [direct_abstract_declarator -> [ constant_expression ]., )/,/[/(]
State 330:
K  - [direct_abstract_declarator -> ( abstract_declarator )., )/,/[/(]
State 331:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 332:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ]., )/,/[/(]
State 333:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .], )/,/[/(]
State 334:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( )., )/,/[/(]
State 335:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 336:
K  - [initializer_list -> initializer_list , initializer., }/,]
State 337:
K  - [initializer -> { initializer_list , }., ;/}/,]
State 338:
K  - [argument_expression_list -> argument_expression_list , assignment_expression., )/,]
State 339:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression., ;/]/)/:/}/,]
State 340:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 341:
K  - [selection_statement -> IF ( expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( expression ) statement .ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 342:
K  - [selection_statement -> SWITCH ( expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 343:
K  - [iteration_statement -> WHILE ( expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 346:
K  - [struct_declarator -> declarator : constant_expression., ;/,]
State 347:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator., ;/,]
State 348:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]., )/,/[/(]
State 349:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
LALR(1) - State list:
State 0:
K  - [$start -> .translation_unit $eof, $eof]
NK - [translation_unit -> .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [translation_unit -> .translation_unit external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 1:
K  - [direct_declarator -> IDENTIFIER., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 2:
K  - [direct_declarator -> ( .declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
State 3:
K  - [pointer -> *., IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .pointer, IDENTIFIER/(/)/,/[]
K  - [pointer -> * .type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier_list -> .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier_list -> .type_qualifier_list type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 4:
K  - [external_declaration -> declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 5:
K  - [declaration_specifiers -> type_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 6:
K  - [declaration_specifiers -> type_qualifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> type_qualifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 7:
K  - [function_definition -> declaration_specifiers .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [function_definition -> declaration_specifiers .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration -> declaration_specifiers .;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/;/=/,]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/;/=/,]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/;/=/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
State 8:
K  - [function_definition -> declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [function_definition -> declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 9:
K  - [declaration_specifiers -> storage_class_specifier., */IDENTIFIER/(/;/[/)/,]
K  - [declaration_specifiers -> storage_class_specifier .declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 10:
K  - [storage_class_specifier -> STATIC., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 11:
K  - [storage_class_specifier -> REGISTER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 12:
K  - [type_specifier -> VOID., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 13:
K  - [storage_class_specifier -> EXTERN., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 14:
K  - [type_specifier -> SHORT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 15:
K  - [storage_class_specifier -> TYPEDEF., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 16:
K  - [storage_class_specifier -> AUTO., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,]
State 17:
K  - [type_specifier -> INT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 18:
K  - [type_specifier -> CHAR., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 19:
K  - [struct_or_union_specifier -> struct_or_union .struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [struct_or_union_specifier -> struct_or_union .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [struct_tag_opt -> .IDENTIFIER, {]
NK - [struct_tag_opt -> ., {]
State 20:
K  - [type_specifier -> struct_or_union_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 21:
K  - [type_specifier -> enum_specifier., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 22:
K  - [type_specifier -> LONG., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 23:
K  - [type_specifier -> FLOAT., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 24:
K  - [type_specifier -> DOUBLE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 25:
K  - [type_specifier -> SIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 26:
K  - [type_specifier -> UNSIGNED., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 27:
K  - [type_specifier -> TYPE_NAME., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 28:
K  - [struct_or_union -> STRUCT., IDENTIFIER]
State 29:
K  - [type_qualifier -> CONST., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 30:
K  - [type_qualifier -> VOLATILE., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 31:
K  - [enum_specifier -> ENUM .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enum_specifier -> ENUM .IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 32:
K  - [struct_or_union -> UNION., IDENTIFIER]
State 33:
K  - [declarator -> pointer .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/,/:]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
State 34:
K  - [declarator -> direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/IDENTIFIER]
State 35:
K  - [$start -> translation_unit .$eof, $eof]
K  - [translation_unit -> translation_unit .external_declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .function_definition, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [external_declaration -> .declaration, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declaration_specifiers declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [function_definition -> .declarator compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/;]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/;]
NK - [declarator -> .pointer direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [declarator -> .direct_declarator, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .( declarator ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator [ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [direct_declarator -> .direct_declarator ( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 36:
K  - [external_declaration -> function_definition., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 37:
K  - [translation_unit -> external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 38:
K  - [direct_declarator -> ( declarator .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/,/;/=/:]
State 39:
K  - [type_qualifier_list -> type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 40:
K  - [pointer -> * pointer., IDENTIFIER/(/)/,/[]
State 41:
K  - [pointer -> * type_qualifier_list., IDENTIFIER/(/)/,/[]
K  - [pointer -> * type_qualifier_list .pointer, IDENTIFIER/(/)/,/[]
K  - [type_qualifier_list -> type_qualifier_list .type_qualifier, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [type_qualifier -> .CONST, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
NK - [type_qualifier -> .VOLATILE, IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 42:
K  - [declaration_specifiers -> type_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 43:
K  - [declaration_specifiers -> type_qualifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 44:
K  - [init_declarator_list -> init_declarator., ;/,]
State 45:
K  - [declaration -> declaration_specifiers init_declarator_list .;, $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/}/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/&/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
K  - [init_declarator_list -> init_declarator_list ., init_declarator, ;/,]
State 46:
K  - [function_definition -> declaration_specifiers declarator .declaration_list compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [function_definition -> declaration_specifiers declarator .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
NK - [declaration_list -> .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_list -> .declaration_list declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 47:
K  - [declaration -> declaration_specifiers ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/}/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/&/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 48:
K  - [declaration_list -> declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 49:
K  - [declaration -> declaration_specifiers .;, {/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [declaration -> declaration_specifiers .init_declarator_list ;, {/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [init_declarator_list -> .init_declarator, ;/,]
NK - [init_declarator_list -> .init_declarator_list , init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/=/,]
NK - [declarator -> .direct_declarator, ;/=/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/=/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/=/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/=/[/(/,]
State 50:
K  - [block_start -> {., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 51:
K  - [compound_statement -> block_start .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start .statement_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start .declaration_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start .declaration_list statement_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration_list -> .declaration, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_list -> .declaration_list declaration, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 52:
K  - [function_definition -> declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 53:
K  - [function_definition -> declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 54:
K  - [declaration_specifiers -> storage_class_specifier declaration_specifiers., */IDENTIFIER/(/;/[/)/,]
State 55:
K  - [struct_or_union_specifier -> struct_or_union IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [struct_tag_opt -> IDENTIFIER., {]
State 56:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt .struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [struct_definition_start -> .{, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 57:
K  - [enum_specifier -> ENUM IDENTIFIER .{ enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enum_specifier -> ENUM IDENTIFIER., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 58:
K  - [enum_specifier -> ENUM { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 59:
K  - [declarator -> pointer direct_declarator., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator .[ constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .[ ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .parameter_list_start identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
K  - [direct_declarator -> direct_declarator .( ), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/)/;/=/[/(/,/:]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/IDENTIFIER]
State 60:
K  - [direct_declarator -> direct_declarator [ .constant_expression ], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator [ .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 61:
K  - [direct_declarator -> direct_declarator ( .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/IDENTIFIER]
State 62:
K  - [direct_declarator -> direct_declarator parameter_list_start .parameter_type_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [direct_declarator -> direct_declarator parameter_list_start .identifier_list parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [identifier_list -> .IDENTIFIER, )/,]
NK - [identifier_list -> .identifier_list , IDENTIFIER, )/,]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 63:
K  - [$start -> translation_unit $eof., $eof]
State 64:
K  - [translation_unit -> translation_unit external_declaration., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 65:
K  - [direct_declarator -> ( declarator )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/,/;/=/:]
State 66:
K  - [type_qualifier_list -> type_qualifier_list type_qualifier., IDENTIFIER/(/*/CONST/VOLATILE/)/,/[]
State 67:
K  - [pointer -> * type_qualifier_list pointer., IDENTIFIER/(/)/,/[]
State 68:
K  - [init_declarator_list -> init_declarator_list , .init_declarator, ;/,]
NK - [init_declarator -> .declarator, ;/,]
NK - [init_declarator -> .declarator = initializer, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/=]
NK - [declarator -> .direct_declarator, ;/,/=]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/=/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/=/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/=/[/(]
State 69:
K  - [declaration -> declaration_specifiers init_declarator_list ;., $eof/{/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/}/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/INC_OP/DEC_OP/&/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 70:
K  - [init_declarator -> declarator = .initializer, ;/,]
NK - [initializer -> .assignment_expression, ;/,]
NK - [initializer -> .{ initializer_list }, ;/,]
NK - [initializer -> .{ initializer_list , }, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 71:
K  - [function_definition -> declaration_specifiers declarator declaration_list .compound_statement, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
K  - [declaration_list -> declaration_list .declaration, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [compound_statement -> .block_start block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
NK - [declaration -> .declaration_specifiers ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 72:
K  - [function_definition -> declaration_specifiers declarator compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 73:
K  - [init_declarator -> declarator., ;/,]
K  - [init_declarator -> declarator .= initializer, ;/,]
State 74:
K  - [postfix_expression -> primary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 75:
K  - [expression_statement -> expression .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/)/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 76:
K  - [logical_and_expression -> inclusive_or_expression., ;/?/AND_OP/]/)/:/}/,/OR_OP]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ;/?/|/]/)/:/}/,/OR_OP/AND_OP]
State 77:
K  - [unary_expression -> postfix_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [postfix_expression -> postfix_expression .[ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression .DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
NK - [struct_member_accessor -> .., IDENTIFIER]
NK - [struct_member_accessor -> .PTR_OP, IDENTIFIER]
State 78:
K  - [labeled_statement -> IDENTIFIER .: statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [primary_expression -> IDENTIFIER., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 79:
K  - [primary_expression -> STRING_LITERAL., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 80:
K  - [primary_expression -> ( .expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
K  - [cast_expression -> ( .type_name ) cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 81:
K  - [primary_expression -> CONSTANT., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 82:
K  - [unary_expression -> INC_OP .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 83:
K  - [assignment_expression -> unary_expression .assignment_operator assignment_expression, ;/)/}/,/]/:]
K  - [cast_expression -> unary_expression., ;/?/)/}/,/]/:/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [assignment_operator -> .=, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .MUL_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .DIV_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .MOD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .ADD_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .SUB_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .LEFT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .RIGHT_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .AND_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .XOR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [assignment_operator -> .OR_ASSIGN, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 84:
K  - [shift_expression -> additive_expression., ;/?/LEFT_OP/RIGHT_OP/]/)/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ;/?/+/-/]/)/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/LEFT_OP/RIGHT_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ;/?/+/-/]/)/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/LEFT_OP/RIGHT_OP]
State 85:
K  - [multiplicative_expression -> cast_expression., ;/?/*///%/]/)/:/}/,/|/+/-/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 86:
K  - [additive_expression -> multiplicative_expression., ;/?/+/-/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ;/?/*///%/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/+/-]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ;/?/*///%/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/+/-]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ;/?/*///%/]/)/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/+/-]
State 87:
K  - [unary_expression -> unary_operator .cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 88:
K  - [expression -> assignment_expression., ;/,/)/]/:]
State 89:
K  - [and_expression -> equality_expression., ;/?/&/]/)/:/}/,/|/^/AND_OP/OR_OP]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/]/)/:/}/,/|/^/AND_OP/OR_OP/&]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ;/?/EQ_OP/NE_OP/]/)/:/}/,/|/^/AND_OP/OR_OP/&]
State 90:
K  - [relational_expression -> shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP/</>/LE_OP/GE_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP/</>/LE_OP/GE_OP]
State 91:
K  - [equality_expression -> relational_expression., ;/?/EQ_OP/NE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .< shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/:/}/,/|/&/^/AND_OP/OR_OP/EQ_OP/NE_OP]
State 92:
K  - [exclusive_or_expression -> and_expression., ;/?/^/]/)/:/}/,/|/AND_OP/OR_OP]
K  - [and_expression -> and_expression .& equality_expression, ;/?/&/]/)/:/}/,/|/AND_OP/OR_OP/^]
State 93:
K  - [inclusive_or_expression -> exclusive_or_expression., ;/?/|/]/)/:/}/,/AND_OP/OR_OP]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ;/?/^/]/)/:/}/,/AND_OP/OR_OP/|]
State 94:
K  - [unary_operator -> +., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 95:
K  - [unary_expression -> SIZEOF .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [unary_expression -> SIZEOF .( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 96:
K  - [unary_expression -> DEC_OP .unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 97:
K  - [unary_operator -> &., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 98:
K  - [unary_operator -> *., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 99:
K  - [unary_operator -> -., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 100:
K  - [unary_operator -> ~., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 101:
K  - [unary_operator -> !., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 102:
K  - [logical_or_expression -> logical_and_expression., ;/?/OR_OP/]/)/:/}/,]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ;/?/AND_OP/]/)/:/}/,/OR_OP]
State 103:
K  - [assignment_expression -> conditional_expression., ;/)/}/,/]/:]
State 104:
K  - [conditional_expression -> logical_or_expression., ;/]/)/:/}/,]
K  - [conditional_expression -> logical_or_expression .? expression : conditional_expression, ;/]/)/:/}/,]
K  - [logical_or_expression -> logical_or_expression .OR_OP logical_and_expression, ;/?/OR_OP/]/)/:/}/,]
State 105:
K  - [expression_statement -> ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/)/ELSE]
State 106:
K  - [block_end -> }., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 107:
K  - [statement -> expression_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 108:
K  - [statement -> selection_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 109:
K  - [statement -> iteration_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 110:
K  - [statement -> jump_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 111:
K  - [compound_statement -> block_start block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 112:
K  - [compound_statement -> block_start statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 113:
K  - [compound_statement -> block_start declaration_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [compound_statement -> block_start declaration_list .statement_list block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [declaration_list -> declaration_list .declaration, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement_list -> .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement_list -> .statement_list statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration -> .declaration_specifiers ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declaration -> .declaration_specifiers init_declarator_list ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [declaration_specifiers -> .storage_class_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier, ;/*/IDENTIFIER/(]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, ;/*/IDENTIFIER/(]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [storage_class_specifier -> .TYPEDEF, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, ;/*/IDENTIFIER/(/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 114:
K  - [statement -> compound_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 115:
K  - [statement -> labeled_statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 116:
K  - [statement_list -> statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 117:
K  - [labeled_statement -> CASE .constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [constant_expression -> .conditional_expression, :]
NK - [conditional_expression -> .logical_or_expression, :]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), :/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 118:
K  - [labeled_statement -> DEFAULT .: statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 119:
K  - [iteration_statement -> DO .statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, WHILE]
NK - [statement -> .compound_statement, WHILE]
NK - [statement -> .expression_statement, WHILE]
NK - [statement -> .selection_statement, WHILE]
NK - [statement -> .iteration_statement, WHILE]
NK - [statement -> .jump_statement, WHILE]
NK - [labeled_statement -> .IDENTIFIER : statement, WHILE]
NK - [labeled_statement -> .CASE constant_expression : statement, WHILE]
NK - [labeled_statement -> .DEFAULT : statement, WHILE]
NK - [compound_statement -> .block_start block_end, WHILE]
NK - [compound_statement -> .block_start statement_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list block_end, WHILE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, WHILE]
NK - [expression_statement -> .;, WHILE]
NK - [expression_statement -> .expression ;, WHILE]
NK - [selection_statement -> .IF ( expression ) statement, WHILE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, WHILE]
NK - [selection_statement -> .SWITCH ( expression ) statement, WHILE]
NK - [iteration_statement -> .WHILE ( expression ) statement, WHILE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, WHILE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, WHILE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, WHILE]
NK - [jump_statement -> .CONTINUE ;, WHILE]
NK - [jump_statement -> .BREAK ;, WHILE]
NK - [jump_statement -> .RETURN ;, WHILE]
NK - [jump_statement -> .RETURN expression ;, WHILE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 120:
K  - [selection_statement -> IF .( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF .( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 121:
K  - [jump_statement -> BREAK .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 122:
K  - [selection_statement -> SWITCH .( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 123:
K  - [iteration_statement -> WHILE .( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 124:
K  - [iteration_statement -> FOR .( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [iteration_statement -> FOR .( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 125:
K  - [jump_statement -> GOTO .IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 126:
K  - [jump_statement -> CONTINUE .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 127:
K  - [jump_statement -> RETURN .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [jump_statement -> RETURN .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 128:
K  - [declaration_list -> declaration_list declaration., {/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/}/IDENTIFIER/CASE/DEFAULT/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 129:
K  - [function_definition -> declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 130:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start .struct_declaration_list struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
NK - [struct_declaration_list -> .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_declaration_list -> .struct_declaration_list struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_specifier, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier, */IDENTIFIER/(/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 131:
K  - [struct_definition_start -> {., VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 132:
K  - [enum_specifier -> ENUM IDENTIFIER { .enumerator_list }, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
NK - [enumerator_list -> .enumerator, }/,]
NK - [enumerator_list -> .enumerator_list , enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 133:
K  - [enumerator -> IDENTIFIER., }/,]
K  - [enumerator -> IDENTIFIER .= constant_expression, }/,]
State 134:
K  - [enum_specifier -> ENUM { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 135:
K  - [enumerator_list -> enumerator., }/,]
State 136:
K  - [primary_expression -> IDENTIFIER., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 137:
K  - [direct_declarator -> direct_declarator [ ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 138:
K  - [cast_expression -> unary_expression., ]/?/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 139:
K  - [direct_declarator -> direct_declarator [ constant_expression .], TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 140:
K  - [constant_expression -> conditional_expression., ]/:/}/;/,]
State 141:
K  - [direct_declarator -> direct_declarator ( )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 142:
K  - [identifier_list -> IDENTIFIER., )/,]
State 143:
K  - [parameter_declaration -> declaration_specifiers .declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers .abstract_declarator, )/,]
K  - [parameter_declaration -> declaration_specifiers., )/,]
NK - [declarator -> .pointer direct_declarator, )/,]
NK - [declarator -> .direct_declarator, )/,]
NK - [abstract_declarator -> .pointer, )/,]
NK - [abstract_declarator -> .direct_abstract_declarator, )/,]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )/,]
NK - [pointer -> .*, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/,/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/,/[]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 144:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
K  - [identifier_list -> identifier_list ., IDENTIFIER, )/,]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 145:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list .parameter_list_end, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
NK - [parameter_list_end -> .), TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 146:
K  - [parameter_type_list -> parameter_list., )]
K  - [parameter_type_list -> parameter_list ., ELLIPSIS, )]
K  - [parameter_list -> parameter_list ., parameter_declaration, )/,]
State 147:
K  - [parameter_list -> parameter_declaration., )/,]
State 148:
K  - [init_declarator_list -> init_declarator_list , init_declarator., ;/,]
State 149:
K  - [initializer -> assignment_expression., ;/}/,]
State 150:
K  - [init_declarator -> declarator = initializer., ;/,]
State 151:
K  - [initializer -> { .initializer_list }, ;/}/,]
K  - [initializer -> { .initializer_list , }, ;/}/,]
NK - [initializer_list -> .initializer, }/,]
NK - [initializer_list -> .initializer_list , initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 152:
K  - [function_definition -> declaration_specifiers declarator declaration_list compound_statement., $eof/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(]
State 153:
K  - [expression -> expression , .assignment_expression, ;/,/)/]/:]
NK - [assignment_expression -> .conditional_expression, ;/,/)/]/:]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,/)/]/:]
NK - [conditional_expression -> .logical_or_expression, ;/,/)/]/:]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,/)/]/:]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [logical_or_expression -> .logical_and_expression, ;/,/?/OR_OP/)/]/:]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/,/?/OR_OP/)/]/:]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/,/?/AND_OP/OR_OP/)/]/:]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/,/?/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/,/?/|/AND_OP/OR_OP/)/]/:]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/,/?/|/AND_OP/OR_OP/)/]/:]
NK - [exclusive_or_expression -> .and_expression, ;/,/?/^/|/AND_OP/OR_OP/)/]/:]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/,/?/^/|/AND_OP/OR_OP/)/]/:]
NK - [and_expression -> .equality_expression, ;/,/?/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [and_expression -> .and_expression & equality_expression, ;/,/?/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [equality_expression -> .relational_expression, ;/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression < shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression > shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [shift_expression -> .additive_expression, ;/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [additive_expression -> .multiplicative_expression, ;/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [cast_expression -> .unary_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
NK - [cast_expression -> .( type_name ) cast_expression, ;/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/)/]/:]
State 154:
K  - [expression_statement -> expression ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/)/ELSE]
State 155:
K  - [inclusive_or_expression -> inclusive_or_expression | .exclusive_or_expression, ;/?/|/]/AND_OP/)/:/}/,/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ;/?/|/]/^/AND_OP/)/:/}/,/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/|/]/^/AND_OP/)/:/}/,/OR_OP]
NK - [and_expression -> .equality_expression, ;/?/|/]/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ;/?/|/]/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [equality_expression -> .relational_expression, ;/?/|/]/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/|/]/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/|/]/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/|/]/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/|/]/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/|/]/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/|/]/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/|/]/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/|/]/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/|/]/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/|/]/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/|/]/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/AND_OP/)/:/}/,/OR_OP]
State 156:
K  - [postfix_expression -> postfix_expression struct_member_accessor .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 157:
K  - [postfix_expression -> postfix_expression [ .expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
NK - [expression -> .assignment_expression, ]/,]
NK - [expression -> .expression , assignment_expression, ]/,]
NK - [assignment_expression -> .conditional_expression, ]/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression, ]/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 158:
K  - [postfix_expression -> postfix_expression ( .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [postfix_expression -> postfix_expression ( .argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
NK - [argument_expression_list -> .assignment_expression, )/,]
NK - [argument_expression_list -> .argument_expression_list , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 159:
K  - [postfix_expression -> postfix_expression INC_OP., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 160:
K  - [struct_member_accessor -> .., IDENTIFIER]
State 161:
K  - [postfix_expression -> postfix_expression DEC_OP., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 162:
K  - [struct_member_accessor -> PTR_OP., IDENTIFIER]
State 163:
K  - [labeled_statement -> IDENTIFIER : .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 164:
K  - [primary_expression -> ( expression .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
K  - [expression -> expression ., assignment_expression, )/,]
State 165:
K  - [cast_expression -> ( type_name .) cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 166:
K  - [specifier_qualifier_list -> type_specifier .specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
K  - [specifier_qualifier_list -> type_specifier., )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 167:
K  - [specifier_qualifier_list -> type_qualifier .specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
K  - [specifier_qualifier_list -> type_qualifier., )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[/IDENTIFIER/:]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[/IDENTIFIER/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 168:
K  - [type_name -> specifier_qualifier_list., )]
K  - [type_name -> specifier_qualifier_list .abstract_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 169:
K  - [primary_expression -> ( .expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 170:
K  - [unary_expression -> INC_OP unary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 171:
K  - [assignment_expression -> unary_expression assignment_operator .assignment_expression, ;/)/}/,/]/:]
NK - [assignment_expression -> .conditional_expression, ;/)/}/,/]/:]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/)/}/,/]/:]
NK - [conditional_expression -> .logical_or_expression, ;/)/}/,/]/:]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/)/}/,/]/:]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [logical_or_expression -> .logical_and_expression, ;/)/?/OR_OP/}/,/]/:]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/)/?/OR_OP/}/,/]/:]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/)/?/AND_OP/OR_OP/}/,/]/:]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/)/?/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/}/,/]/:]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/)/?/|/AND_OP/OR_OP/}/,/]/:]
NK - [exclusive_or_expression -> .and_expression, ;/)/?/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/)/?/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [and_expression -> .equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [and_expression -> .and_expression & equality_expression, ;/)/?/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [equality_expression -> .relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/)/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression < shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression > shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/)/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [shift_expression -> .additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/)/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [additive_expression -> .multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/)/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [cast_expression -> .unary_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
NK - [cast_expression -> .( type_name ) cast_expression, ;/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,/]/:]
State 172:
K  - [assignment_operator -> MUL_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 173:
K  - [assignment_operator -> =., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 174:
K  - [assignment_operator -> DIV_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 175:
K  - [assignment_operator -> MOD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 176:
K  - [assignment_operator -> LEFT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 177:
K  - [assignment_operator -> ADD_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 178:
K  - [assignment_operator -> AND_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 179:
K  - [assignment_operator -> XOR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 180:
K  - [assignment_operator -> SUB_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 181:
K  - [assignment_operator -> RIGHT_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 182:
K  - [assignment_operator -> OR_ASSIGN., IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
State 183:
K  - [additive_expression -> additive_expression + .multiplicative_expression, ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 184:
K  - [additive_expression -> additive_expression - .multiplicative_expression, ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/+/-/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 185:
K  - [multiplicative_expression -> multiplicative_expression * .cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 186:
K  - [multiplicative_expression -> multiplicative_expression % .cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 187:
K  - [multiplicative_expression -> multiplicative_expression / .cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/*///%/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 188:
K  - [unary_expression -> unary_operator cast_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 189:
K  - [equality_expression -> equality_expression NE_OP .relational_expression, ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 190:
K  - [equality_expression -> equality_expression EQ_OP .relational_expression, ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/EQ_OP/NE_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/EQ_OP/NE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/EQ_OP/NE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/EQ_OP/NE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 191:
K  - [shift_expression -> shift_expression RIGHT_OP .additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 192:
K  - [shift_expression -> shift_expression LEFT_OP .additive_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/LEFT_OP/RIGHT_OP/]/)/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/LEFT_OP/RIGHT_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 193:
K  - [relational_expression -> relational_expression > .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 194:
K  - [relational_expression -> relational_expression < .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 195:
K  - [relational_expression -> relational_expression LE_OP .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 196:
K  - [relational_expression -> relational_expression GE_OP .shift_expression, ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/</>/LE_OP/GE_OP/]/)/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/</>/LE_OP/GE_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/</>/LE_OP/GE_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 197:
K  - [and_expression -> and_expression & .equality_expression, ;/?/&/]/)/^/:/}/,/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/&/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/&/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/&/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/&/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/&/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/&/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/&/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/&/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/&/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
State 198:
K  - [exclusive_or_expression -> exclusive_or_expression ^ .and_expression, ;/?/^/]/)/|/:/}/,/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ;/?/^/]/)/&/|/:/}/,/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ;/?/^/]/)/&/|/:/}/,/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ;/?/^/]/)/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/^/]/)/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/^/]/)/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/^/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ;/?/^/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/^/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/^/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ;/?/^/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/^/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/^/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/^/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/^/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/|/:/}/,/AND_OP/OR_OP]
State 199:
K  - [unary_expression -> SIZEOF ( .type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [primary_expression -> ( .expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [type_name -> .specifier_qualifier_list, )]
NK - [type_name -> .specifier_qualifier_list abstract_declarator, )]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_specifier, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, )/*/(/[]
NK - [specifier_qualifier_list -> .type_qualifier, )/*/(/[]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/)/*/(/[]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 200:
K  - [unary_expression -> SIZEOF unary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 201:
K  - [unary_expression -> DEC_OP unary_expression., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 202:
K  - [logical_and_expression -> logical_and_expression AND_OP .inclusive_or_expression, ;/?/AND_OP/]/)/OR_OP/:/}/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/AND_OP/]/)/|/OR_OP/:/}/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/AND_OP/]/)/|/OR_OP/:/}/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/AND_OP/]/)/^/|/OR_OP/:/}/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/AND_OP/]/)/^/|/OR_OP/:/}/,]
NK - [and_expression -> .equality_expression, ;/?/AND_OP/]/)/&/^/|/OR_OP/:/}/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/AND_OP/]/)/&/^/|/OR_OP/:/}/,]
NK - [equality_expression -> .relational_expression, ;/?/AND_OP/]/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/AND_OP/]/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/AND_OP/]/)/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/AND_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [shift_expression -> .additive_expression, ;/?/AND_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/AND_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/AND_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/AND_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/AND_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/AND_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [cast_expression -> .unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .postfix_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/AND_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .primary_expression, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [primary_expression -> .CONSTANT, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
NK - [primary_expression -> .( expression ), ;/?/AND_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/OR_OP/:/}/,]
State 203:
K  - [logical_or_expression -> logical_or_expression OR_OP .logical_and_expression, ;/?/OR_OP/]/)/:/}/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/OR_OP/]/)/AND_OP/:/}/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/OR_OP/]/)/AND_OP/:/}/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/OR_OP/]/)/|/AND_OP/:/}/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/OR_OP/]/)/|/AND_OP/:/}/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/OR_OP/]/)/^/|/AND_OP/:/}/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/OR_OP/]/)/^/|/AND_OP/:/}/,]
NK - [and_expression -> .equality_expression, ;/?/OR_OP/]/)/&/^/|/AND_OP/:/}/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/OR_OP/]/)/&/^/|/AND_OP/:/}/,]
NK - [equality_expression -> .relational_expression, ;/?/OR_OP/]/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/OR_OP/]/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/OR_OP/]/)/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/OR_OP/]/)/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [shift_expression -> .additive_expression, ;/?/OR_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/OR_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/OR_OP/]/)/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/OR_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/OR_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/OR_OP/]/)/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [cast_expression -> .unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .postfix_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/OR_OP/]/)/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .primary_expression, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [primary_expression -> .CONSTANT, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
NK - [primary_expression -> .( expression ), ;/?/OR_OP/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/:/}/,]
State 204:
K  - [conditional_expression -> logical_or_expression ? .expression : conditional_expression, ;/]/)/:/}/,]
NK - [expression -> .assignment_expression, :/,]
NK - [expression -> .expression , assignment_expression, :/,]
NK - [assignment_expression -> .conditional_expression, :/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, :/,]
NK - [conditional_expression -> .logical_or_expression, :/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, :/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, :/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, :/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, :/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, :/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, :/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, :/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, :/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, :/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, :/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, :/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, :/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 205:
K  - [compound_statement -> block_start statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 206:
K  - [statement_list -> statement_list statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
State 207:
K  - [compound_statement -> block_start declaration_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 208:
K  - [compound_statement -> block_start declaration_list statement_list .block_end, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [statement_list -> statement_list .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_end -> .}, $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 209:
K  - [labeled_statement -> CASE constant_expression .: statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 210:
K  - [labeled_statement -> DEFAULT : .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 211:
K  - [iteration_statement -> DO statement .WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 212:
K  - [selection_statement -> IF ( .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( .expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 213:
K  - [jump_statement -> BREAK ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 214:
K  - [selection_statement -> SWITCH ( .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 215:
K  - [iteration_statement -> WHILE ( .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 216:
K  - [iteration_statement -> FOR ( .expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [iteration_statement -> FOR ( .expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [expression_statement -> .expression ;, )/IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 217:
K  - [jump_statement -> GOTO IDENTIFIER .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 218:
K  - [jump_statement -> CONTINUE ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 219:
K  - [jump_statement -> RETURN expression .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, ;/,]
State 220:
K  - [jump_statement -> RETURN ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 221:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list .struct_definition_end, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
K  - [struct_declaration_list -> struct_declaration_list .struct_declaration, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_definition_end -> .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
NK - [struct_declaration -> .specifier_qualifier_list struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [specifier_qualifier_list -> .type_specifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_specifier, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier specifier_qualifier_list, */IDENTIFIER/(/:]
NK - [specifier_qualifier_list -> .type_qualifier, */IDENTIFIER/(/:]
NK - [type_specifier -> .VOID, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .CHAR, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SHORT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .INT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .LONG, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .FLOAT, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .DOUBLE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .SIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .UNSIGNED, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .struct_or_union_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .enum_specifier, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_specifier -> .TYPE_NAME, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .CONST, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [type_qualifier -> .VOLATILE, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [enum_specifier -> .ENUM IDENTIFIER, VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/*/IDENTIFIER/(/:]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 222:
K  - [struct_declaration_list -> struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 223:
K  - [struct_declaration -> specifier_qualifier_list .struct_declarator_list ;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_declarator_list -> .struct_declarator, ;/,]
NK - [struct_declarator_list -> .struct_declarator_list , struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/:/,]
NK - [declarator -> .direct_declarator, ;/:/,]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/:/[/(/,]
NK - [direct_declarator -> .( declarator ), ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator [ ], ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/:/[/(/,]
NK - [direct_declarator -> .direct_declarator ( ), ;/:/[/(/,]
State 224:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list .}, */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
K  - [enumerator_list -> enumerator_list ., enumerator, }/,]
State 225:
K  - [enumerator -> IDENTIFIER = .constant_expression, }/,]
NK - [constant_expression -> .conditional_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [logical_or_expression -> .logical_and_expression, }/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, }/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), }/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), }/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 226:
K  - [enumerator_list -> enumerator_list , .enumerator, }/,]
NK - [enumerator -> .IDENTIFIER, }/,]
NK - [enumerator -> .IDENTIFIER = constant_expression, }/,]
State 227:
K  - [enum_specifier -> ENUM { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 228:
K  - [direct_declarator -> direct_declarator [ constant_expression ]., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 229:
K  - [direct_abstract_declarator -> [ .], )/,/[/(]
K  - [direct_abstract_declarator -> [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 230:
K  - [direct_declarator -> ( .declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/,/[/(]
K  - [direct_abstract_declarator -> ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [declarator -> .pointer direct_declarator, )]
NK - [declarator -> .direct_declarator, )]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(/)/[]
NK - [pointer -> .* pointer, IDENTIFIER/(/)/[]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(/)/[]
NK - [direct_declarator -> .IDENTIFIER, )/[/(]
NK - [direct_declarator -> .( declarator ), )/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 231:
K  - [parameter_declaration -> declaration_specifiers declarator., )/,]
State 232:
K  - [declarator -> pointer .direct_declarator, )/,]
K  - [abstract_declarator -> pointer., )/,]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )/,]
NK - [direct_declarator -> .IDENTIFIER, )/,/[/(]
NK - [direct_declarator -> .( declarator ), )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator [ ], )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, )/,/[/(]
NK - [direct_declarator -> .direct_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/,/[/(]
NK - [direct_abstract_declarator -> .[ ], )/,/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/,/[/(]
NK - [direct_abstract_declarator -> .( ), )/,/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/,/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 233:
K  - [direct_abstract_declarator -> parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 234:
K  - [parameter_declaration -> declaration_specifiers abstract_declarator., )/,]
State 235:
K  - [abstract_declarator -> direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 236:
K  - [parameter_list_end -> )., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 237:
K  - [identifier_list -> identifier_list , .IDENTIFIER, )/,]
State 238:
K  - [direct_declarator -> direct_declarator parameter_list_start identifier_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 239:
K  - [direct_declarator -> direct_declarator parameter_list_start parameter_type_list parameter_list_end., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/{/[/(/)/;/=/,/:]
State 240:
K  - [parameter_type_list -> parameter_list , .ELLIPSIS, )]
K  - [parameter_list -> parameter_list , .parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 241:
K  - [initializer_list -> initializer., }/,]
State 242:
K  - [initializer -> { initializer_list .}, ;/}/,]
K  - [initializer -> { initializer_list ., }, ;/}/,]
K  - [initializer_list -> initializer_list ., initializer, }/,]
State 243:
K  - [expression -> expression , assignment_expression., ;/,/)/]/:]
State 244:
K  - [inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression., ;/?/|/]/AND_OP/)/:/}/,/OR_OP]
K  - [exclusive_or_expression -> exclusive_or_expression .^ and_expression, ;/?/|/]/^/AND_OP/)/:/}/,/OR_OP]
State 245:
K  - [postfix_expression -> postfix_expression struct_member_accessor IDENTIFIER., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 246:
K  - [postfix_expression -> postfix_expression [ expression .], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [expression -> expression ., assignment_expression, ]/,]
State 247:
K  - [postfix_expression -> postfix_expression ( argument_expression_list .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
K  - [argument_expression_list -> argument_expression_list ., assignment_expression, )/,]
State 248:
K  - [postfix_expression -> postfix_expression ( )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 249:
K  - [argument_expression_list -> assignment_expression., )/,]
State 250:
K  - [labeled_statement -> IDENTIFIER : statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 251:
K  - [primary_expression -> ( expression )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/[/(/./PTR_OP/INC_OP/DEC_OP/,]
State 252:
K  - [cast_expression -> ( type_name ) .cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ;/?/]/)/[/(/./PTR_OP/INC_OP/DEC_OP/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 253:
K  - [specifier_qualifier_list -> type_specifier specifier_qualifier_list., )/*/(/[/IDENTIFIER/:]
State 254:
K  - [specifier_qualifier_list -> type_qualifier specifier_qualifier_list., )/*/(/[/IDENTIFIER/:]
State 255:
K  - [direct_abstract_declarator -> ( .abstract_declarator ), )/[/(]
K  - [direct_abstract_declarator -> ( .), )/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [abstract_declarator -> .pointer, )]
NK - [abstract_declarator -> .direct_abstract_declarator, )]
NK - [abstract_declarator -> .pointer direct_abstract_declarator, )]
NK - [pointer -> .*, )/(/[]
NK - [pointer -> .* type_qualifier_list, )/(/[]
NK - [pointer -> .* pointer, )/(/[]
NK - [pointer -> .* type_qualifier_list pointer, )/(/[]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 256:
K  - [abstract_declarator -> pointer., )]
K  - [abstract_declarator -> pointer .direct_abstract_declarator, )]
NK - [direct_abstract_declarator -> .( abstract_declarator ), )/[/(]
NK - [direct_abstract_declarator -> .[ ], )/[/(]
NK - [direct_abstract_declarator -> .[ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ ], )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator [ constant_expression ], )/[/(]
NK - [direct_abstract_declarator -> .( ), )/[/(]
NK - [direct_abstract_declarator -> .parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator ( ), )/[/(]
NK - [direct_abstract_declarator -> .direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end, )/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 257:
K  - [type_name -> specifier_qualifier_list abstract_declarator., )]
State 258:
K  - [assignment_expression -> unary_expression assignment_operator assignment_expression., ;/)/}/,/]/:]
State 259:
K  - [additive_expression -> additive_expression + multiplicative_expression., ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 260:
K  - [additive_expression -> additive_expression - multiplicative_expression., ;/?/+/-/]/)/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .* cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression ./ cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
K  - [multiplicative_expression -> multiplicative_expression .% cast_expression, ;/?/+/-/]/)/*///%/LEFT_OP/RIGHT_OP/:/}/,/|/EQ_OP/NE_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 261:
K  - [multiplicative_expression -> multiplicative_expression * cast_expression., ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 262:
K  - [multiplicative_expression -> multiplicative_expression % cast_expression., ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 263:
K  - [multiplicative_expression -> multiplicative_expression / cast_expression., ;/?/*///%/]/)/+/-/:/}/,/|/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 264:
K  - [equality_expression -> equality_expression NE_OP relational_expression., ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .< shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 265:
K  - [equality_expression -> equality_expression EQ_OP relational_expression., ;/?/EQ_OP/NE_OP/]/)/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .< shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .> shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .LE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
K  - [relational_expression -> relational_expression .GE_OP shift_expression, ;/?/EQ_OP/NE_OP/]/)/</>/LE_OP/GE_OP/&/:/}/,/|/^/AND_OP/OR_OP]
State 266:
K  - [shift_expression -> shift_expression RIGHT_OP additive_expression., ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 267:
K  - [shift_expression -> shift_expression LEFT_OP additive_expression., ;/?/LEFT_OP/RIGHT_OP/]/)/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .+ multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
K  - [additive_expression -> additive_expression .- multiplicative_expression, ;/?/LEFT_OP/RIGHT_OP/]/)/+/-/</>/LE_OP/GE_OP/:/}/,/|/EQ_OP/NE_OP/&/^/AND_OP/OR_OP]
State 268:
K  - [relational_expression -> relational_expression > shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 269:
K  - [relational_expression -> relational_expression < shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 270:
K  - [relational_expression -> relational_expression LE_OP shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 271:
K  - [relational_expression -> relational_expression GE_OP shift_expression., ;/?/</>/LE_OP/GE_OP/]/)/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .LEFT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
K  - [shift_expression -> shift_expression .RIGHT_OP additive_expression, ;/?/</>/LE_OP/GE_OP/]/)/LEFT_OP/RIGHT_OP/EQ_OP/NE_OP/:/}/,/|/&/^/AND_OP/OR_OP]
State 272:
K  - [and_expression -> and_expression & equality_expression., ;/?/&/]/)/^/:/}/,/|/AND_OP/OR_OP]
K  - [equality_expression -> equality_expression .EQ_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
K  - [equality_expression -> equality_expression .NE_OP relational_expression, ;/?/&/]/)/EQ_OP/NE_OP/^/:/}/,/|/AND_OP/OR_OP]
State 273:
K  - [exclusive_or_expression -> exclusive_or_expression ^ and_expression., ;/?/^/]/)/|/:/}/,/AND_OP/OR_OP]
K  - [and_expression -> and_expression .& equality_expression, ;/?/^/]/)/&/|/:/}/,/AND_OP/OR_OP]
State 274:
K  - [unary_expression -> SIZEOF ( type_name .), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 275:
K  - [logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression., ;/?/AND_OP/]/)/OR_OP/:/}/,]
K  - [inclusive_or_expression -> inclusive_or_expression .| exclusive_or_expression, ;/?/AND_OP/]/)/|/OR_OP/:/}/,]
State 276:
K  - [logical_or_expression -> logical_or_expression OR_OP logical_and_expression., ;/?/OR_OP/]/)/:/}/,]
K  - [logical_and_expression -> logical_and_expression .AND_OP inclusive_or_expression, ;/?/OR_OP/]/)/AND_OP/:/}/,]
State 277:
K  - [conditional_expression -> logical_or_expression ? expression .: conditional_expression, ;/]/)/:/}/,]
K  - [expression -> expression ., assignment_expression, :/,]
State 278:
K  - [compound_statement -> block_start declaration_list statement_list block_end., $eof/}/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 279:
K  - [labeled_statement -> CASE constant_expression : .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 280:
K  - [labeled_statement -> DEFAULT : statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 281:
K  - [iteration_statement -> DO statement WHILE .( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 282:
K  - [selection_statement -> IF ( expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( expression .) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 283:
K  - [selection_statement -> SWITCH ( expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 284:
K  - [iteration_statement -> WHILE ( expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 285:
K  - [iteration_statement -> FOR ( expression_statement .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [iteration_statement -> FOR ( expression_statement .expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 286:
K  - [jump_statement -> GOTO IDENTIFIER ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 287:
K  - [jump_statement -> RETURN expression ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 288:
K  - [struct_or_union_specifier -> struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
State 289:
K  - [struct_declaration_list -> struct_declaration_list struct_declaration., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 290:
K  - [struct_definition_end -> }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/:/[/)/,]
State 291:
K  - [struct_declarator -> declarator., ;/,]
K  - [struct_declarator -> declarator .: constant_expression, ;/,]
State 292:
K  - [struct_declarator -> : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 293:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list .;, }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
K  - [struct_declarator_list -> struct_declarator_list ., struct_declarator, ;/,]
State 294:
K  - [struct_declarator_list -> struct_declarator., ;/,]
State 295:
K  - [enum_specifier -> ENUM IDENTIFIER { enumerator_list }., */IDENTIFIER/(/;/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE/[/)/,/:]
State 296:
K  - [enumerator -> IDENTIFIER = constant_expression., }/,]
State 297:
K  - [enumerator_list -> enumerator_list , enumerator., }/,]
State 298:
K  - [direct_abstract_declarator -> [ ]., )/,/[/(]
State 299:
K  - [direct_abstract_declarator -> [ constant_expression .], )/,/[/(]
State 300:
K  - [direct_abstract_declarator -> ( )., )/,/[/(]
State 301:
K  - [direct_abstract_declarator -> ( abstract_declarator .), )/,/[/(]
State 302:
K  - [abstract_declarator -> pointer direct_abstract_declarator., )/,]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .[ constant_expression ], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .( ), )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator .parameter_list_start parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_list_start -> .(, TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 303:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 304:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .], )/,/[/(]
K  - [direct_abstract_declarator -> direct_abstract_declarator [ .constant_expression ], )/,/[/(]
NK - [constant_expression -> .conditional_expression, ]]
NK - [conditional_expression -> .logical_or_expression, ]]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ]]
NK - [logical_or_expression -> .logical_and_expression, ]/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ]/?/OR_OP]
NK - [logical_and_expression -> .inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ]/?/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ]/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ]/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, ]/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ]/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ]/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ]/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ]/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .postfix_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), ]/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .primary_expression, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), ]/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 305:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( .), )/,/[/(]
K  - [parameter_list_start -> (., TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 306:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start .parameter_type_list parameter_list_end, )/,/[/(]
NK - [parameter_type_list -> .parameter_list, )]
NK - [parameter_type_list -> .parameter_list , ELLIPSIS, )]
NK - [parameter_list -> .parameter_declaration, )/,]
NK - [parameter_list -> .parameter_list , parameter_declaration, )/,]
NK - [parameter_declaration -> .declaration_specifiers declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers abstract_declarator, )/,]
NK - [parameter_declaration -> .declaration_specifiers, )/,]
NK - [declaration_specifiers -> .storage_class_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .storage_class_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_specifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier, */IDENTIFIER/(/[/)/,]
NK - [declaration_specifiers -> .type_qualifier declaration_specifiers, */IDENTIFIER/(/[/)/,]
NK - [storage_class_specifier -> .TYPEDEF, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .EXTERN, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .STATIC, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .AUTO, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [storage_class_specifier -> .REGISTER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .VOID, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .CHAR, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SHORT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .INT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .LONG, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .FLOAT, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .DOUBLE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .SIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .UNSIGNED, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .struct_or_union_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .enum_specifier, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_specifier -> .TYPE_NAME, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .CONST, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [type_qualifier -> .VOLATILE, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union struct_tag_opt struct_definition_start struct_declaration_list struct_definition_end, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union_specifier -> .struct_or_union IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER { enumerator_list }, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [enum_specifier -> .ENUM IDENTIFIER, */IDENTIFIER/(/[/)/,/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [struct_or_union -> .STRUCT, IDENTIFIER]
NK - [struct_or_union -> .UNION, IDENTIFIER]
State 307:
K  - [identifier_list -> identifier_list , IDENTIFIER., )/,]
State 308:
K  - [parameter_list -> parameter_list , parameter_declaration., )/,]
State 309:
K  - [parameter_type_list -> parameter_list , ELLIPSIS., )]
State 310:
K  - [initializer -> { initializer_list , .}, ;/}/,]
K  - [initializer_list -> initializer_list , .initializer, }/,]
NK - [initializer -> .assignment_expression, }/,]
NK - [initializer -> .{ initializer_list }, }/,]
NK - [initializer -> .{ initializer_list , }, }/,]
NK - [assignment_expression -> .conditional_expression, }/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, }/,]
NK - [conditional_expression -> .logical_or_expression, }/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, }/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, }/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, }/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, }/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/}/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, }/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, }/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, }/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, }/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, }/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, }/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, }/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, }/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 311:
K  - [initializer -> { initializer_list }., ;/}/,]
State 312:
K  - [postfix_expression -> postfix_expression [ expression ]., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 313:
K  - [postfix_expression -> postfix_expression ( argument_expression_list )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/]/?/;/)/:/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP/}/,]
State 314:
K  - [argument_expression_list -> argument_expression_list , .assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [logical_or_expression -> .logical_and_expression, )/,/?/OR_OP]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/,/?/OR_OP]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/,/?/AND_OP/OR_OP]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/,/?/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/,/?/^/|/AND_OP/OR_OP]
NK - [and_expression -> .equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [and_expression -> .and_expression & equality_expression, )/,/?/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/,/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression < shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression > shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/,/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/,/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/,/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .unary_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
NK - [cast_expression -> .( type_name ) cast_expression, )/,/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP]
State 315:
K  - [cast_expression -> ( type_name ) cast_expression., ;/?/]/)/=/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 316:
K  - [unary_expression -> SIZEOF ( type_name )., =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/]/)/:/}/,/|/+/-/*///%/EQ_OP/NE_OP/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/&/^/AND_OP/OR_OP]
State 317:
K  - [conditional_expression -> logical_or_expression ? expression : .conditional_expression, ;/]/)/:/}/,]
NK - [conditional_expression -> .logical_or_expression, ;/]/)/:/}/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/]/)/:/}/,]
NK - [logical_or_expression -> .logical_and_expression, ;/]/)/:/?/OR_OP/}/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/]/)/:/?/OR_OP/}/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/]/)/:/?/AND_OP/OR_OP/}/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/]/)/:/?/AND_OP/OR_OP/}/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/]/)/:/?/|/AND_OP/OR_OP/}/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/]/)/:/?/|/AND_OP/OR_OP/}/,]
NK - [exclusive_or_expression -> .and_expression, ;/]/)/:/?/^/|/AND_OP/OR_OP/}/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/]/)/:/?/^/|/AND_OP/OR_OP/}/,]
NK - [and_expression -> .equality_expression, ;/]/)/:/?/&/^/|/AND_OP/OR_OP/}/,]
NK - [and_expression -> .and_expression & equality_expression, ;/]/)/:/?/&/^/|/AND_OP/OR_OP/}/,]
NK - [equality_expression -> .relational_expression, ;/]/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/]/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/]/)/:/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/]/)/:/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [shift_expression -> .additive_expression, ;/]/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/]/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/]/)/:/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [additive_expression -> .multiplicative_expression, ;/]/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/]/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/]/)/:/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [cast_expression -> .unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .postfix_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/]/)/:/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .primary_expression, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [primary_expression -> .CONSTANT, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [primary_expression -> .STRING_LITERAL, ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
NK - [primary_expression -> .( expression ), ;/]/)/:/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/}/,]
State 318:
K  - [labeled_statement -> CASE constant_expression : statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 319:
K  - [iteration_statement -> DO statement WHILE ( .expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression -> .assignment_expression, )/,]
NK - [expression -> .expression , assignment_expression, )/,]
NK - [assignment_expression -> .conditional_expression, )/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, )/,]
NK - [conditional_expression -> .logical_or_expression, )/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, )/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, )/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, )/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, )/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/)/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, )/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, )/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, )/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, )/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, )/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, )/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, )/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, )/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 320:
K  - [selection_statement -> IF ( expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( expression ) .statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 321:
K  - [selection_statement -> SWITCH ( expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 322:
K  - [iteration_statement -> WHILE ( expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 323:
K  - [iteration_statement -> FOR ( expression_statement expression .) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 324:
K  - [iteration_statement -> FOR ( expression_statement ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 325:
K  - [struct_declarator -> declarator : .constant_expression, ;/,]
NK - [constant_expression -> .conditional_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .postfix_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .primary_expression, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [primary_expression -> .IDENTIFIER, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), ;/?/[/(/./PTR_OP/INC_OP/DEC_OP/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 326:
K  - [struct_declarator -> : constant_expression., ;/,]
State 327:
K  - [struct_declarator_list -> struct_declarator_list , .struct_declarator, ;/,]
NK - [struct_declarator -> .declarator, ;/,]
NK - [struct_declarator -> .: constant_expression, ;/,]
NK - [struct_declarator -> .declarator : constant_expression, ;/,]
NK - [declarator -> .pointer direct_declarator, ;/,/:]
NK - [declarator -> .direct_declarator, ;/,/:]
NK - [pointer -> .*, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list, IDENTIFIER/(]
NK - [pointer -> .* pointer, IDENTIFIER/(]
NK - [pointer -> .* type_qualifier_list pointer, IDENTIFIER/(]
NK - [direct_declarator -> .IDENTIFIER, ;/,/:/[/(]
NK - [direct_declarator -> .( declarator ), ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ constant_expression ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator [ ], ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start parameter_type_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator parameter_list_start identifier_list parameter_list_end, ;/,/:/[/(]
NK - [direct_declarator -> .direct_declarator ( ), ;/,/:/[/(]
State 328:
K  - [struct_declaration -> specifier_qualifier_list struct_declarator_list ;., }/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
State 329:
K  - [direct_abstract_declarator -> [ constant_expression ]., )/,/[/(]
State 330:
K  - [direct_abstract_declarator -> ( abstract_declarator )., )/,/[/(]
State 331:
K  - [direct_abstract_declarator -> parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 332:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ ]., )/,/[/(]
State 333:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression .], )/,/[/(]
State 334:
K  - [direct_abstract_declarator -> direct_abstract_declarator ( )., )/,/[/(]
State 335:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list .parameter_list_end, )/,/[/(]
NK - [parameter_list_end -> .), )/,/[/(]
State 336:
K  - [initializer_list -> initializer_list , initializer., }/,]
State 337:
K  - [initializer -> { initializer_list , }., ;/}/,]
State 338:
K  - [argument_expression_list -> argument_expression_list , assignment_expression., )/,]
State 339:
K  - [conditional_expression -> logical_or_expression ? expression : conditional_expression., ;/]/)/:/}/,]
State 340:
K  - [iteration_statement -> DO statement WHILE ( expression .) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [expression -> expression ., assignment_expression, )/,]
State 341:
K  - [selection_statement -> IF ( expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
K  - [selection_statement -> IF ( expression ) statement .ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 342:
K  - [selection_statement -> SWITCH ( expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 343:
K  - [iteration_statement -> WHILE ( expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 344:
K  - [iteration_statement -> FOR ( expression_statement expression ) .statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .labeled_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .compound_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .expression_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .selection_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .iteration_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [statement -> .jump_statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .IDENTIFIER : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .CASE constant_expression : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [labeled_statement -> .DEFAULT : statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [compound_statement -> .block_start declaration_list statement_list block_end, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [expression_statement -> .expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .IF ( expression ) statement ELSE, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [selection_statement -> .SWITCH ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .WHILE ( expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .DO statement WHILE ( expression ) ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [iteration_statement -> .FOR ( expression_statement expression ) statement, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .GOTO IDENTIFIER ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .CONTINUE ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .BREAK ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [jump_statement -> .RETURN expression ;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
NK - [block_start -> .{, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/TYPEDEF/EXTERN/STATIC/AUTO/REGISTER/VOID/CHAR/SHORT/INT/LONG/FLOAT/DOUBLE/SIGNED/UNSIGNED/STRUCT/UNION/ENUM/TYPE_NAME/CONST/VOLATILE]
NK - [expression -> .assignment_expression, ;/,]
NK - [expression -> .expression , assignment_expression, ;/,]
NK - [assignment_expression -> .conditional_expression, ;/,]
NK - [assignment_expression -> .unary_expression assignment_operator assignment_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression, ;/,]
NK - [conditional_expression -> .logical_or_expression ? expression : conditional_expression, ;/,]
NK - [unary_expression -> .postfix_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .INC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .DEC_OP unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .unary_operator cast_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF unary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_expression -> .SIZEOF ( type_name ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [logical_or_expression -> .logical_and_expression, ;/?/OR_OP/,]
NK - [logical_or_expression -> .logical_or_expression OR_OP logical_and_expression, ;/?/OR_OP/,]
NK - [postfix_expression -> .primary_expression, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression [ expression ], =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression ( argument_expression_list ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression struct_member_accessor IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression INC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [postfix_expression -> .postfix_expression DEC_OP, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [unary_operator -> .&, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .*, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .+, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .-, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .~, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [unary_operator -> .!, IDENTIFIER/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF]
NK - [logical_and_expression -> .inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [logical_and_expression -> .logical_and_expression AND_OP inclusive_or_expression, ;/?/AND_OP/OR_OP/,]
NK - [primary_expression -> .IDENTIFIER, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .CONSTANT, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .STRING_LITERAL, =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [primary_expression -> .( expression ), =/MUL_ASSIGN/DIV_ASSIGN/MOD_ASSIGN/ADD_ASSIGN/SUB_ASSIGN/LEFT_ASSIGN/RIGHT_ASSIGN/AND_ASSIGN/XOR_ASSIGN/OR_ASSIGN/[/(/./PTR_OP/INC_OP/DEC_OP/;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [inclusive_or_expression -> .inclusive_or_expression | exclusive_or_expression, ;/?/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [exclusive_or_expression -> .exclusive_or_expression ^ and_expression, ;/?/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [and_expression -> .and_expression & equality_expression, ;/?/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression EQ_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [equality_expression -> .equality_expression NE_OP relational_expression, ;/?/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression < shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression > shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression LE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [relational_expression -> .relational_expression GE_OP shift_expression, ;/?/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression LEFT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [shift_expression -> .shift_expression RIGHT_OP additive_expression, ;/?/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression + multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [additive_expression -> .additive_expression - multiplicative_expression, ;/?/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression * cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression / cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [multiplicative_expression -> .multiplicative_expression % cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .unary_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
NK - [cast_expression -> .( type_name ) cast_expression, ;/?/*///%/+/-/LEFT_OP/RIGHT_OP/</>/LE_OP/GE_OP/EQ_OP/NE_OP/&/^/|/AND_OP/OR_OP/,]
State 345:
K  - [iteration_statement -> FOR ( expression_statement ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 346:
K  - [struct_declarator -> declarator : constant_expression., ;/,]
State 347:
K  - [struct_declarator_list -> struct_declarator_list , struct_declarator., ;/,]
State 348:
K  - [direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]., )/,/[/(]
State 349:
K  - [direct_abstract_declarator -> direct_abstract_declarator parameter_list_start parameter_type_list parameter_list_end., )/,/[/(]
State 350:
K  - [iteration_statement -> DO statement WHILE ( expression ) .;, }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 351:
K  - [selection_statement -> IF ( expression ) statement ELSE., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 352:
K  - [iteration_statement -> FOR ( expression_statement expression ) statement., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]
State 353:
K  - [iteration_statement -> DO statement WHILE ( expression ) ;., }/IDENTIFIER/CASE/DEFAULT/{/;/CONSTANT/STRING_LITERAL/(/INC_OP/DEC_OP/&/*/+/-/~/!/SIZEOF/IF/SWITCH/WHILE/DO/FOR/GOTO/CONTINUE/BREAK/RETURN/ELSE]

